"""
This file was generated by using a modified version of sqlacodgen such that we'd
generate a class model for every table rather than create a Table object for the 
association tables- Mark Nazzaro 2024
"""

from sqlalchemy import BINARY, BigInteger, Column, Date, DateTime, ForeignKey, ForeignKeyConstraint, Index, Integer, JSON, MetaData, Numeric, SmallInteger, String, Text
from sqlalchemy.schema import FetchedValue
from sqlalchemy.orm import relationship
from sqlalchemy.dialects.mysql.enumerated import ENUM
from sqlalchemy.ext.declarative import declarative_base

Base = declarative_base()
metadata = Base.metadata

class SubscriptionUniversalInstitution(Base):
    __tablename__ = 'Subscription_UniversalInstitution'

    resolver_URL = Column(String(255))
    name = Column(String(255), nullable=False, index=True)
    label = Column(String(255))
    id = Column(Integer, primary_key=True)
    alt_text = Column(String(255))
    link_icon = Column(String(255))
    note = Column(String(255))



class SubscriptionUniversalInstitutionContact(Base):
    __tablename__ = 'Subscription_UniversalInstitutionContact'

    email = Column(String(255))
    sid = Column(ForeignKey('Subscription_UniversalInstitution.id', ondelete='CASCADE'), nullable=False, index=True)
    active = Column(Integer, server_default=FetchedValue())
    contact_name = Column(String(255))
    id = Column(Integer, primary_key=True)
    phone = Column(String(255))
    note = Column(String(2048))

    Subscription_UniversalInstitution = relationship('SubscriptionUniversalInstitution', primaryjoin='SubscriptionUniversalInstitutionContact.sid == SubscriptionUniversalInstitution.id', backref='subscription_universal_institution_contacts')



class SubscriptionUniversalInstitutionIP(Base):
    __tablename__ = 'Subscription_UniversalInstitutionIP'
    __table_args__ = (
        Index('ip', 'start', 'end'),
    )

    sid = Column(ForeignKey('Subscription_UniversalInstitution.id', ondelete='CASCADE'), nullable=False, index=True)
    id = Column(Integer, primary_key=True)
    exclude = Column(Integer, server_default=FetchedValue())
    end = Column(BigInteger, nullable=False, index=True)
    start = Column(BigInteger, nullable=False, index=True)

    Subscription_UniversalInstitution = relationship('SubscriptionUniversalInstitution', primaryjoin='SubscriptionUniversalInstitutionIP.sid == SubscriptionUniversalInstitution.id', backref='subscription_universal_institution_ips')



class AdminLog(Base):
    __tablename__ = 'arXiv_admin_log'

    id = Column(Integer, primary_key=True)
    logtime = Column(String(24))
    created = Column(DateTime, nullable=False, server_default=FetchedValue())
    paper_id = Column(String(20), index=True)
    username = Column(String(20), index=True)
    host = Column(String(64))
    program = Column(String(20))
    command = Column(String(20), index=True)
    logtext = Column(Text)
    document_id = Column(Integer)
    submission_id = Column(Integer, index=True)
    notify = Column(Integer, server_default=FetchedValue())



class AdminMetadata(Base):
    __tablename__ = 'arXiv_admin_metadata'
    __table_args__ = (
        Index('pidv', 'paper_id', 'version'),
    )

    metadata_id = Column(Integer, primary_key=True, index=True)
    document_id = Column(ForeignKey('arXiv_documents.document_id', ondelete='CASCADE'), index=True)
    paper_id = Column(String(64))
    created = Column(DateTime)
    updated = Column(DateTime)
    submitter_name = Column(String(64))
    submitter_email = Column(String(64))
    history = Column(Text)
    source_size = Column(Integer)
    source_type = Column(String(12))
    title = Column(Text)
    authors = Column(Text)
    category_string = Column(String(255))
    comments = Column(Text)
    proxy = Column(String(255))
    report_num = Column(Text)
    msc_class = Column(String(255))
    acm_class = Column(String(255))
    journal_ref = Column(Text)
    doi = Column(String(255))
    abstract = Column(Text)
    license = Column(String(255))
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    modtime = Column(Integer)
    is_current = Column(Integer, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='AdminMetadata.document_id == Document.document_id', backref='arXiv_admin_metadata')



class AdminState(Base):
    __tablename__ = 'arXiv_admin_state'

    document_id = Column(Integer, unique=True)
    timestamp = Column(DateTime, nullable=False, server_default=FetchedValue())
    abs_timestamp = Column(Integer)
    src_timestamp = Column(Integer)
    state = Column(ENUM('pending', 'ok', 'bad'), nullable=False, server_default=FetchedValue())
    admin = Column(String(32))
    comment = Column(String(255))



class ArchiveCategory(Base):
    __tablename__ = 'arXiv_archive_category'

    archive_id = Column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    category_id = Column(String(32), primary_key=True, nullable=False)



class ArchiveDef(Base):
    __tablename__ = 'arXiv_archive_def'

    archive = Column(String(16), primary_key=True, server_default=FetchedValue())
    name = Column(String(255))



class ArchiveGroup(Base):
    __tablename__ = 'arXiv_archive_group'

    archive_id = Column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    group_id = Column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())



class Archive(Base):
    __tablename__ = 'arXiv_archives'

    archive_id = Column(String(16), primary_key=True, server_default=FetchedValue())
    in_group = Column(ForeignKey('arXiv_groups.group_id'), nullable=False, index=True, server_default=FetchedValue())
    archive_name = Column(String(255), nullable=False, server_default=FetchedValue())
    start_date = Column(String(4), nullable=False, server_default=FetchedValue())
    end_date = Column(String(4), nullable=False, server_default=FetchedValue())
    subdivided = Column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_group = relationship('Group', primaryjoin='Archive.in_group == Group.group_id', backref='arXiv_archives')



class AwsConfig(Base):
    __tablename__ = 'arXiv_aws_config'

    domain = Column(String(75), primary_key=True, nullable=False)
    keyname = Column(String(60), primary_key=True, nullable=False)
    value = Column(String(150))



class AwsFile(Base):
    __tablename__ = 'arXiv_aws_files'

    type = Column(String(10), nullable=False, index=True, server_default=FetchedValue())
    filename = Column(String(100), primary_key=True, server_default=FetchedValue())
    md5sum = Column(String(50))
    content_md5sum = Column(String(50))
    size = Column(Integer)
    timestamp = Column(DateTime)
    yymm = Column(String(4))
    seq_num = Column(Integer)
    first_item = Column(String(20))
    last_item = Column(String(20))
    num_items = Column(Integer)



class BadPw(Base):
    __tablename__ = 'arXiv_bad_pw'

    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='BadPw.user_id == TapirUser.user_id', backref='arXiv_bad_pws')



class BibFeed(Base):
    __tablename__ = 'arXiv_bib_feeds'

    bib_id = Column(Integer, primary_key=True)
    name = Column(String(64), nullable=False, server_default=FetchedValue())
    priority = Column(Integer, nullable=False, server_default=FetchedValue())
    uri = Column(String(255))
    identifier = Column(String(255))
    version = Column(String(255))
    strip_journal_ref = Column(Integer, nullable=False, server_default=FetchedValue())
    concatenate_dupes = Column(Integer)
    max_updates = Column(Integer)
    email_errors = Column(String(255))
    prune_ids = Column(Text)
    prune_regex = Column(Text)
    enabled = Column(Integer, server_default=FetchedValue())



class BibUpdate(Base):
    __tablename__ = 'arXiv_bib_updates'

    update_id = Column(Integer, primary_key=True)
    document_id = Column(Integer, nullable=False, server_default=FetchedValue())
    bib_id = Column(Integer, nullable=False, server_default=FetchedValue())
    updated = Column(DateTime, nullable=False, server_default=FetchedValue())
    journal_ref = Column(Text)
    doi = Column(Text)



class BlackEmail(Base):
    __tablename__ = 'arXiv_black_email'

    pattern = Column(String(64))



class BlockEmail(Base):
    __tablename__ = 'arXiv_block_email'

    pattern = Column(String(64))



class BogusCountry(Base):
    __tablename__ = 'arXiv_bogus_countries'

    user_id = Column(Integer, primary_key=True, server_default=FetchedValue())
    country_name = Column(String(255), nullable=False, server_default=FetchedValue())



class BogusSubjectClas(Base):
    __tablename__ = 'arXiv_bogus_subject_class'

    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue())
    category_name = Column(String(255), nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='BogusSubjectClas.document_id == Document.document_id', backref='arXiv_bogus_subject_class')



class Category(Base):
    __tablename__ = 'arXiv_categories'

    archive = Column(ForeignKey('arXiv_archives.archive_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    subject_class = Column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    definitive = Column(Integer, nullable=False, server_default=FetchedValue())
    active = Column(Integer, nullable=False, server_default=FetchedValue())
    category_name = Column(String(255))
    endorse_all = Column(ENUM('y', 'n', 'd'), nullable=False, server_default=FetchedValue())
    endorse_email = Column(ENUM('y', 'n', 'd'), nullable=False, server_default=FetchedValue())
    papers_to_endorse = Column(SmallInteger, nullable=False, server_default=FetchedValue())
    endorsement_domain = Column(ForeignKey('arXiv_endorsement_domains.endorsement_domain'), index=True)

    arXiv_archive = relationship('Archive', primaryjoin='Category.archive == Archive.archive_id', backref='arXiv_categories')
    arXiv_endorsement_domain = relationship('EndorsementDomain', primaryjoin='Category.endorsement_domain == EndorsementDomain.endorsement_domain', backref='arXiv_categories')


class QuestionableCategory(Category):
    __tablename__ = 'arXiv_questionable_categories'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
    )

    archive = Column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    subject_class = Column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())



class CategoryDef(Base):
    __tablename__ = 'arXiv_category_def'

    category = Column(String(32), primary_key=True)
    name = Column(String(255))
    active = Column(Integer, server_default=FetchedValue())



class ControlHold(Base):
    __tablename__ = 'arXiv_control_holds'
    __table_args__ = (
        Index('control_id', 'control_id', 'hold_type'),
    )

    hold_id = Column(Integer, primary_key=True)
    control_id = Column(Integer, nullable=False, server_default=FetchedValue())
    hold_type = Column(ENUM('submission', 'cross', 'jref'), nullable=False, index=True, server_default=FetchedValue())
    hold_status = Column(ENUM('held', 'extended', 'accepted', 'rejected'), nullable=False, index=True, server_default=FetchedValue())
    hold_reason = Column(String(255), nullable=False, index=True, server_default=FetchedValue())
    hold_data = Column(String(255), nullable=False, server_default=FetchedValue())
    origin = Column(ENUM('auto', 'user', 'admin', 'moderator'), nullable=False, index=True, server_default=FetchedValue())
    placed_by = Column(ForeignKey('tapir_users.user_id'), index=True)
    last_changed_by = Column(ForeignKey('tapir_users.user_id'), index=True)

    tapir_user = relationship('TapirUser', primaryjoin='ControlHold.last_changed_by == TapirUser.user_id', backref='tapiruser_arXiv_control_holds')
    tapir_user1 = relationship('TapirUser', primaryjoin='ControlHold.placed_by == TapirUser.user_id', backref='tapiruser_arXiv_control_holds_0')



class CrossControl(Base):
    __tablename__ = 'arXiv_cross_control'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('document_id', 'document_id', 'version'),
        Index('archive', 'archive', 'subject_class')
    )

    control_id = Column(Integer, primary_key=True)
    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, server_default=FetchedValue())
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    desired_order = Column(Integer, nullable=False, server_default=FetchedValue())
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    status = Column(ENUM('new', 'frozen', 'published', 'rejected'), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify = Column(ENUM('0', '1'), server_default=FetchedValue())
    archive = Column(String(16), nullable=False, server_default=FetchedValue())
    subject_class = Column(String(16), nullable=False, server_default=FetchedValue())
    request_date = Column(Integer, nullable=False, server_default=FetchedValue())
    freeze_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date = Column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category = relationship('Category', primaryjoin='and_(CrossControl.archive == Category.archive, CrossControl.subject_class == Category.subject_class)', backref='arXiv_cross_controls')
    document = relationship('Document', primaryjoin='CrossControl.document_id == Document.document_id', backref='arXiv_cross_controls')
    user = relationship('TapirUser', primaryjoin='CrossControl.user_id == TapirUser.user_id', backref='arXiv_cross_controls')



class DataciteDois(Base):
    __tablename__ = 'arXiv_datacite_dois'
    __table_args__ = (
        Index('account_paper_id', 'account', 'paper_id'),
    )

    doi = Column(String(255), primary_key=True)
    account = Column(ENUM('test', 'prod'))
    metadata_id = Column(ForeignKey('arXiv_metadata.metadata_id'), nullable=False, index=True)
    paper_id = Column(String(64), nullable=False)
    created = Column(DateTime, server_default=FetchedValue())
    updated = Column(DateTime, server_default=FetchedValue())

    metadata = relationship('Metadata', primaryjoin='DataciteDois.metadata_id == Metadata.metadata_id', backref='arXiv_datacite_dois')



class DblpAuthor(Base):
    __tablename__ = 'arXiv_dblp_authors'

    author_id = Column(Integer, primary_key=True, unique=True)
    name = Column(String(40), unique=True)



class DblpDocumentAuthor(Base):
    __tablename__ = 'arXiv_dblp_document_authors'

    document_id = Column(ForeignKey('arXiv_documents.document_id'), primary_key=True, nullable=False, index=True)
    author_id = Column(ForeignKey('arXiv_dblp_authors.author_id'), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    position = Column(Integer, nullable=False, server_default=FetchedValue())

    author = relationship('DblpAuthor', primaryjoin='DblpDocumentAuthor.author_id == DblpAuthor.author_id', backref='arXiv_dblp_document_authors')
    document = relationship('Document', primaryjoin='DblpDocumentAuthor.document_id == Document.document_id', backref='arXiv_dblp_document_authors')



class DocumentCategory(Base):
    __tablename__ = 'arXiv_document_category'

    document_id = Column(ForeignKey('arXiv_documents.document_id', ondelete='CASCADE'), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    category = Column(ForeignKey('arXiv_category_def.category'), primary_key=True, nullable=False, index=True)
    is_primary = Column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category_def = relationship('CategoryDef', primaryjoin='DocumentCategory.category == CategoryDef.category', backref='arXiv_document_categories')
    document = relationship('Document', primaryjoin='DocumentCategory.document_id == Document.document_id', backref='arXiv_document_categories')



class Document(Base):
    __tablename__ = 'arXiv_documents'

    document_id = Column(Integer, primary_key=True)
    paper_id = Column(String(20), nullable=False, unique=True, server_default=FetchedValue())
    title = Column(String(255), nullable=False, index=True, server_default=FetchedValue())
    authors = Column(Text)
    submitter_email = Column(String(64), nullable=False, index=True, server_default=FetchedValue())
    submitter_id = Column(ForeignKey('tapir_users.user_id'), index=True)
    dated = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    primary_subject_class = Column(String(16))
    created = Column(DateTime)

    submitter = relationship('TapirUser', primaryjoin='Document.submitter_id == TapirUser.user_id', backref='arXiv_documents')


class Dblp(Document):
    __tablename__ = 'arXiv_dblp'

    document_id = Column(ForeignKey('arXiv_documents.document_id'), primary_key=True, server_default=FetchedValue())
    url = Column(String(80))


class PaperPw(Document):
    __tablename__ = 'arXiv_paper_pw'

    document_id = Column(ForeignKey('arXiv_documents.document_id'), primary_key=True, server_default=FetchedValue())
    password_storage = Column(Integer)
    password_enc = Column(String(50))



class Duplicate(Base):
    __tablename__ = 'arXiv_duplicates'

    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    email = Column(String(255))
    username = Column(String(255))

    user = relationship('TapirUser', primaryjoin='Duplicate.user_id == TapirUser.user_id', backref='arXiv_duplicates')



class EndorsementDomain(Base):
    __tablename__ = 'arXiv_endorsement_domains'

    endorsement_domain = Column(String(32), primary_key=True, server_default=FetchedValue())
    endorse_all = Column(ENUM('y', 'n'), nullable=False, server_default=FetchedValue())
    mods_endorse_all = Column(ENUM('y', 'n'), nullable=False, server_default=FetchedValue())
    endorse_email = Column(ENUM('y', 'n'), nullable=False, server_default=FetchedValue())
    papers_to_endorse = Column(SmallInteger, nullable=False, server_default=FetchedValue())



class EndorsementRequest(Base):
    __tablename__ = 'arXiv_endorsement_requests'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('archive', 'archive', 'subject_class'),
        Index('endorsee_id_2', 'endorsee_id', 'archive', 'subject_class')
    )

    request_id = Column(Integer, primary_key=True)
    endorsee_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    archive = Column(String(16), nullable=False, server_default=FetchedValue())
    subject_class = Column(String(16), nullable=False, server_default=FetchedValue())
    secret = Column(String(16), nullable=False, unique=True, server_default=FetchedValue())
    flag_valid = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_when = Column(Integer, nullable=False, server_default=FetchedValue())
    point_value = Column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category = relationship('Category', primaryjoin='and_(EndorsementRequest.archive == Category.archive, EndorsementRequest.subject_class == Category.subject_class)', backref='arXiv_endorsement_requests')
    endorsee = relationship('TapirUser', primaryjoin='EndorsementRequest.endorsee_id == TapirUser.user_id', backref='arXiv_endorsement_requests')


class EndorsementRequestsAudit(EndorsementRequest):
    __tablename__ = 'arXiv_endorsement_requests_audit'

    request_id = Column(ForeignKey('arXiv_endorsement_requests.request_id'), primary_key=True, server_default=FetchedValue())
    session_id = Column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr = Column(String(16))
    remote_host = Column(String(255))
    tracking_cookie = Column(String(255))



class Endorsement(Base):
    __tablename__ = 'arXiv_endorsements'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('archive', 'archive', 'subject_class'),
        Index('endorser_id_2', 'endorser_id', 'endorsee_id', 'archive', 'subject_class')
    )

    endorsement_id = Column(Integer, primary_key=True)
    endorser_id = Column(ForeignKey('tapir_users.user_id'), index=True)
    endorsee_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    archive = Column(String(16), nullable=False, server_default=FetchedValue())
    subject_class = Column(String(16), nullable=False, server_default=FetchedValue())
    flag_valid = Column(Integer, nullable=False, server_default=FetchedValue())
    type = Column(ENUM('user', 'admin', 'auto'))
    point_value = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_when = Column(Integer, nullable=False, server_default=FetchedValue())
    request_id = Column(ForeignKey('arXiv_endorsement_requests.request_id'), index=True)

    arXiv_category = relationship('Category', primaryjoin='and_(Endorsement.archive == Category.archive, Endorsement.subject_class == Category.subject_class)', backref='arXiv_endorsements')
    endorsee = relationship('TapirUser', primaryjoin='Endorsement.endorsee_id == TapirUser.user_id', backref='tapiruser_arXiv_endorsements')
    endorser = relationship('TapirUser', primaryjoin='Endorsement.endorser_id == TapirUser.user_id', backref='tapiruser_arXiv_endorsements_0')
    request = relationship('EndorsementRequest', primaryjoin='Endorsement.request_id == EndorsementRequest.request_id', backref='arXiv_endorsements')


class EndorsementsAudit(Endorsement):
    __tablename__ = 'arXiv_endorsements_audit'

    endorsement_id = Column(ForeignKey('arXiv_endorsements.endorsement_id'), primary_key=True, server_default=FetchedValue())
    session_id = Column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())
    flag_knows_personally = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_seen_paper = Column(Integer, nullable=False, server_default=FetchedValue())
    comment = Column(Text)



class FreezeLog(Base):
    __tablename__ = 'arXiv_freeze_log'

    date = Column(Integer, primary_key=True, server_default=FetchedValue())



class GroupDef(Base):
    __tablename__ = 'arXiv_group_def'

    archive_group = Column(String(16), primary_key=True, server_default=FetchedValue())
    name = Column(String(255))



class Group(Base):
    __tablename__ = 'arXiv_groups'

    group_id = Column(String(16), primary_key=True, server_default=FetchedValue())
    group_name = Column(String(255), nullable=False, server_default=FetchedValue())
    start_year = Column(String(4), nullable=False, server_default=FetchedValue())



class InCategory(Base):
    __tablename__ = 'arXiv_in_category'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('archive', 'archive', 'subject_class', 'document_id'),
        Index('arXiv_in_category_mp', 'archive', 'subject_class')
    )

    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue())
    archive = Column(String(16), nullable=False, server_default=FetchedValue())
    subject_class = Column(String(16), nullable=False, server_default=FetchedValue())
    is_primary = Column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category = relationship('Category', primaryjoin='and_(InCategory.archive == Category.archive, InCategory.subject_class == Category.subject_class)', backref='arXiv_in_categories')
    document = relationship('Document', primaryjoin='InCategory.document_id == Document.document_id', backref='arXiv_in_categories')



class JrefControl(Base):
    __tablename__ = 'arXiv_jref_control'
    __table_args__ = (
        Index('document_id', 'document_id', 'version'),
    )

    control_id = Column(Integer, primary_key=True)
    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, server_default=FetchedValue())
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    status = Column(ENUM('new', 'frozen', 'published', 'rejected'), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify = Column(ENUM('0', '1'), server_default=FetchedValue())
    jref = Column(String(255), nullable=False, server_default=FetchedValue())
    request_date = Column(Integer, nullable=False, server_default=FetchedValue())
    freeze_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date = Column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='JrefControl.document_id == Document.document_id', backref='arXiv_jref_controls')
    user = relationship('TapirUser', primaryjoin='JrefControl.user_id == TapirUser.user_id', backref='arXiv_jref_controls')



class License(Base):
    __tablename__ = 'arXiv_licenses'

    name = Column(String(255), primary_key=True)
    label = Column(String(255))
    active = Column(Integer, server_default=FetchedValue())
    note = Column(String(400))
    sequence = Column(Integer)



class LogPosition(Base):
    __tablename__ = 'arXiv_log_positions'

    id = Column(String(255), primary_key=True, server_default=FetchedValue())
    position = Column(Integer)
    date = Column(Integer)



class Metadata(Base):
    __tablename__ = 'arXiv_metadata'
    __table_args__ = (
        Index('pidv', 'paper_id', 'version'),
    )

    metadata_id = Column(Integer, primary_key=True)
    document_id = Column(ForeignKey('arXiv_documents.document_id', ondelete='CASCADE', onupdate='CASCADE'), nullable=False, index=True, server_default=FetchedValue())
    paper_id = Column(String(64), nullable=False)
    created = Column(DateTime)
    updated = Column(DateTime)
    submitter_id = Column(ForeignKey('tapir_users.user_id'), index=True)
    submitter_name = Column(String(64), nullable=False)
    submitter_email = Column(String(64), nullable=False)
    source_size = Column(Integer)
    source_format = Column(String(12))
    source_flags = Column(String(12))
    title = Column(Text)
    authors = Column(Text)
    abs_categories = Column(String(255))
    comments = Column(Text)
    proxy = Column(String(255))
    report_num = Column(Text)
    msc_class = Column(String(255))
    acm_class = Column(String(255))
    journal_ref = Column(Text)
    doi = Column(String(255))
    abstract = Column(Text)
    license = Column(ForeignKey('arXiv_licenses.name'), index=True)
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    modtime = Column(Integer)
    is_current = Column(Integer, server_default=FetchedValue())
    is_withdrawn = Column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='Metadata.document_id == Document.document_id', backref='arXiv_metadata')
    arXiv_license = relationship('License', primaryjoin='Metadata.license == License.name', backref='arXiv_metadata')
    submitter = relationship('TapirUser', primaryjoin='Metadata.submitter_id == TapirUser.user_id', backref='arXiv_metadata')



class MirrorList(Base):
    __tablename__ = 'arXiv_mirror_list'

    mirror_list_id = Column(Integer, primary_key=True)
    created = Column(DateTime)
    updated = Column(DateTime)
    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue())
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    write_source = Column(Integer, nullable=False, server_default=FetchedValue())
    write_abs = Column(Integer, nullable=False, server_default=FetchedValue())
    is_written = Column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='MirrorList.document_id == Document.document_id', backref='arXiv_mirror_lists')



class ModeratorApiKey(Base):
    __tablename__ = 'arXiv_moderator_api_key'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret = Column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    valid = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_when = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_to = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='ModeratorApiKey.user_id == TapirUser.user_id', backref='arXiv_moderator_api_keys')



class Moderator(Base):
    __tablename__ = 'arXiv_moderators'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('user_id', 'archive', 'subject_class', 'user_id')
    )

    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    archive = Column(ForeignKey('arXiv_archive_group.archive_id'), nullable=False, server_default=FetchedValue())
    subject_class = Column(String(16), nullable=False, server_default=FetchedValue())
    is_public = Column(Integer, nullable=False, server_default=FetchedValue())
    no_email = Column(Integer, index=True, server_default=FetchedValue())
    no_web_email = Column(Integer, index=True, server_default=FetchedValue())
    no_reply_to = Column(Integer, index=True, server_default=FetchedValue())
    daily_update = Column(Integer, server_default=FetchedValue())

    arXiv_category = relationship('Category', primaryjoin='and_(Moderator.archive == Category.archive, Moderator.subject_class == Category.subject_class)', backref='arXiv_moderators')
    arXiv_archive_group = relationship('ArchiveGroup', primaryjoin='Moderator.archive == ArchiveGroup.archive_id', backref='arXiv_moderators')
    user = relationship('TapirUser', primaryjoin='Moderator.user_id == TapirUser.user_id', backref='arXiv_moderators')



class MonitorKlog(Base):
    __tablename__ = 'arXiv_monitor_klog'

    t = Column(Integer, primary_key=True, server_default=FetchedValue())
    sent = Column(Integer)



class MonitorMailq(Base):
    __tablename__ = 'arXiv_monitor_mailq'

    t = Column(Integer, primary_key=True, server_default=FetchedValue())
    main_q = Column(Integer, nullable=False, server_default=FetchedValue())
    local_q = Column(Integer, nullable=False, server_default=FetchedValue())
    local_host_map = Column(Integer, nullable=False, server_default=FetchedValue())
    local_timeout = Column(Integer, nullable=False, server_default=FetchedValue())
    local_refused = Column(Integer, nullable=False, server_default=FetchedValue())
    local_in_flight = Column(Integer, nullable=False, server_default=FetchedValue())



class MonitorMailsent(Base):
    __tablename__ = 'arXiv_monitor_mailsent'

    t = Column(Integer, primary_key=True, server_default=FetchedValue())
    sent = Column(Integer)



class NextMail(Base):
    __tablename__ = 'arXiv_next_mail'
    __table_args__ = (
        Index('arXiv_next_mail_idx_document_id_version', 'document_id', 'version'),
    )

    next_mail_id = Column(Integer, primary_key=True)
    submission_id = Column(Integer, nullable=False)
    document_id = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    paper_id = Column(String(20))
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    type = Column(String(255), nullable=False, server_default=FetchedValue())
    extra = Column(String(255))
    mail_id = Column(String(6))
    is_written = Column(Integer, nullable=False, server_default=FetchedValue())



class OrcidConfig(Base):
    __tablename__ = 'arXiv_orcid_config'

    domain = Column(String(75), primary_key=True, nullable=False)
    keyname = Column(String(60), primary_key=True, nullable=False)
    value = Column(String(150))



class OwnershipRequest(Base):
    __tablename__ = 'arXiv_ownership_requests'

    request_id = Column(Integer, primary_key=True)
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    endorsement_request_id = Column(ForeignKey('arXiv_endorsement_requests.request_id'), index=True)
    workflow_status = Column(ENUM('pending', 'accepted', 'rejected'), nullable=False, server_default=FetchedValue())

    endorsement_request = relationship('EndorsementRequest', primaryjoin='OwnershipRequest.endorsement_request_id == EndorsementRequest.request_id', backref='arXiv_ownership_requests')
    user = relationship('TapirUser', primaryjoin='OwnershipRequest.user_id == TapirUser.user_id', backref='arXiv_ownership_requests')


class OwnershipRequestsAudit(OwnershipRequest):
    __tablename__ = 'arXiv_ownership_requests_audit'

    request_id = Column(ForeignKey('arXiv_ownership_requests.request_id'), primary_key=True, server_default=FetchedValue())
    session_id = Column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())
    date = Column(Integer, nullable=False, server_default=FetchedValue())



class OwnershipRequestsPaper(Base):
    __tablename__ = 'arXiv_ownership_requests_papers'
    __table_args__ = (
        Index('request_id', 'request_id', 'document_id'),
    )

    request_id = Column(Integer, nullable=False, server_default=FetchedValue())
    document_id = Column(Integer, nullable=False, index=True, server_default=FetchedValue())



class PaperOwner(Base):
    __tablename__ = 'arXiv_paper_owners'
    __table_args__ = (
        Index('document_id', 'document_id', 'user_id'),
    )

    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, server_default=FetchedValue())
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    date = Column(Integer, nullable=False, server_default=FetchedValue())
    added_by = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    remote_addr = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(32), nullable=False, server_default=FetchedValue())
    valid = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_author = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_auto = Column(Integer, nullable=False, server_default=FetchedValue())

    tapir_user = relationship('TapirUser', primaryjoin='PaperOwner.added_by == TapirUser.user_id', backref='tapiruser_arXiv_paper_owners')
    document = relationship('Document', primaryjoin='PaperOwner.document_id == Document.document_id', backref='arXiv_paper_owners')
    user = relationship('TapirUser', primaryjoin='PaperOwner.user_id == TapirUser.user_id', backref='tapiruser_arXiv_paper_owners_0')



class PaperSession(Base):
    __tablename__ = 'arXiv_paper_sessions'

    paper_session_id = Column(Integer, primary_key=True)
    paper_id = Column(String(16), nullable=False, server_default=FetchedValue())
    start_time = Column(Integer, nullable=False, server_default=FetchedValue())
    end_time = Column(Integer, nullable=False, server_default=FetchedValue())
    ip_name = Column(String(16), nullable=False, server_default=FetchedValue())



class PilotFile(Base):
    __tablename__ = 'arXiv_pilot_files'

    file_id = Column(Integer, primary_key=True)
    submission_id = Column(ForeignKey('arXiv_submissions.submission_id'), nullable=False, index=True)
    filename = Column(String(256), server_default=FetchedValue())
    entity_url = Column(String(256))
    description = Column(String(80))
    byRef = Column(Integer, server_default=FetchedValue())

    submission = relationship('Submission', primaryjoin='PilotFile.submission_id == Submission.submission_id', backref='arXiv_pilot_files')



class PublishLog(Base):
    __tablename__ = 'arXiv_publish_log'

    date = Column(Integer, primary_key=True, server_default=FetchedValue())



class RefreshList(Base):
    __tablename__ = 'arXiv_refresh_list'

    filename = Column(String(255))
    mtime = Column(Integer, index=True)



class RejectSessionUsername(Base):
    __tablename__ = 'arXiv_reject_session_usernames'

    username = Column(String(64), primary_key=True, server_default=FetchedValue())



class SciencewisePing(Base):
    __tablename__ = 'arXiv_sciencewise_pings'

    paper_id_v = Column(String(32), primary_key=True)
    updated = Column(DateTime)



class ShowEmailRequest(Base):
    __tablename__ = 'arXiv_show_email_requests'
    __table_args__ = (
        Index('user_id', 'user_id', 'dated'),
    )

    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue())
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, server_default=FetchedValue())
    session_id = Column(Integer, nullable=False, server_default=FetchedValue())
    dated = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_allowed = Column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr = Column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())
    request_id = Column(Integer, primary_key=True)

    document = relationship('Document', primaryjoin='ShowEmailRequest.document_id == Document.document_id', backref='arXiv_show_email_requests')
    user = relationship('TapirUser', primaryjoin='ShowEmailRequest.user_id == TapirUser.user_id', backref='arXiv_show_email_requests')



class State(Base):
    __tablename__ = 'arXiv_state'

    id = Column(Integer, primary_key=True)
    name = Column(String(24))
    value = Column(String(24))



class StatsHourly(Base):
    __tablename__ = 'arXiv_stats_hourly'

    ymd = Column(Date, nullable=False, index=True)
    hour = Column(Integer, nullable=False, index=True)
    node_num = Column(Integer, nullable=False, index=True)
    access_type = Column(String(1), nullable=False, index=True)
    connections = Column(Integer, nullable=False)



class StatsMonthlyDownload(Base):
    __tablename__ = 'arXiv_stats_monthly_downloads'

    ym = Column(Date, primary_key=True)
    downloads = Column(Integer, nullable=False)



class StatsMonthlySubmission(Base):
    __tablename__ = 'arXiv_stats_monthly_submissions'

    ym = Column(Date, primary_key=True, server_default=FetchedValue())
    num_submissions = Column(SmallInteger, nullable=False)
    historical_delta = Column(Integer, nullable=False, server_default=FetchedValue())



class SubmissionAgreement(Base):
    __tablename__ = 'arXiv_submission_agreements'

    agreement_id = Column(SmallInteger, primary_key=True)
    effective_date = Column(DateTime, server_default=FetchedValue())
    commit_ref = Column(String(255), nullable=False)
    content = Column(Text)



class SubmissionCategory(Base):
    __tablename__ = 'arXiv_submission_category'

    submission_id = Column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE', onupdate='CASCADE'), primary_key=True, nullable=False, index=True)
    category = Column(ForeignKey('arXiv_category_def.category'), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    is_primary = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    is_published = Column(Integer, index=True, server_default=FetchedValue())

    arXiv_category_def = relationship('CategoryDef', primaryjoin='SubmissionCategory.category == CategoryDef.category', backref='arXiv_submission_categories')
    submission = relationship('Submission', primaryjoin='SubmissionCategory.submission_id == Submission.submission_id', backref='arXiv_submission_categories')



class SubmissionCategoryProposal(Base):
    __tablename__ = 'arXiv_submission_category_proposal'

    proposal_id = Column(Integer, primary_key=True, nullable=False, index=True)
    submission_id = Column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE', onupdate='CASCADE'), primary_key=True, nullable=False, index=True)
    category = Column(ForeignKey('arXiv_category_def.category'), primary_key=True, nullable=False, index=True)
    is_primary = Column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    proposal_status = Column(Integer, server_default=FetchedValue())
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True)
    updated = Column(DateTime)
    proposal_comment_id = Column(ForeignKey('arXiv_admin_log.id'), index=True)
    response_comment_id = Column(ForeignKey('arXiv_admin_log.id'), index=True)

    arXiv_category_def = relationship('CategoryDef', primaryjoin='SubmissionCategoryProposal.category == CategoryDef.category', backref='arXiv_submission_category_proposals')
    proposal_comment = relationship('AdminLog', primaryjoin='SubmissionCategoryProposal.proposal_comment_id == AdminLog.id', backref='arxivadminlog_arXiv_submission_category_proposals')
    response_comment = relationship('AdminLog', primaryjoin='SubmissionCategoryProposal.response_comment_id == AdminLog.id', backref='arxivadminlog_arXiv_submission_category_proposals_0')
    submission = relationship('Submission', primaryjoin='SubmissionCategoryProposal.submission_id == Submission.submission_id', backref='arXiv_submission_category_proposals')
    user = relationship('TapirUser', primaryjoin='SubmissionCategoryProposal.user_id == TapirUser.user_id', backref='arXiv_submission_category_proposals')



class SubmissionControl(Base):
    __tablename__ = 'arXiv_submission_control'
    __table_args__ = (
        Index('document_id', 'document_id', 'version'),
    )

    control_id = Column(Integer, primary_key=True)
    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, server_default=FetchedValue())
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    pending_paper_id = Column(String(20), nullable=False, index=True, server_default=FetchedValue())
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    status = Column(ENUM('new', 'frozen', 'published', 'rejected'), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify = Column(ENUM('0', '1'), server_default=FetchedValue())
    request_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    freeze_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date = Column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='SubmissionControl.document_id == Document.document_id', backref='arXiv_submission_controls')
    user = relationship('TapirUser', primaryjoin='SubmissionControl.user_id == TapirUser.user_id', backref='arXiv_submission_controls')



class SubmissionFlag(Base):
    __tablename__ = 'arXiv_submission_flag'
    __table_args__ = (
        Index('uniq_one_flag_per_mod', 'submission_id', 'user_id'),
    )

    flag_id = Column(Integer, primary_key=True)
    user_id = Column(ForeignKey('tapir_users.user_id', ondelete='CASCADE'), nullable=False, index=True, server_default=FetchedValue())
    submission_id = Column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), nullable=False)
    flag = Column(Integer, nullable=False, server_default=FetchedValue())
    updated = Column(DateTime, nullable=False, server_default=FetchedValue())

    submission = relationship('Submission', primaryjoin='SubmissionFlag.submission_id == Submission.submission_id', backref='arXiv_submission_flags')
    user = relationship('TapirUser', primaryjoin='SubmissionFlag.user_id == TapirUser.user_id', backref='arXiv_submission_flags')



class SubmissionHoldReason(Base):
    __tablename__ = 'arXiv_submission_hold_reason'

    reason_id = Column(Integer, primary_key=True, nullable=False)
    submission_id = Column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), nullable=False, index=True)
    user_id = Column(ForeignKey('tapir_users.user_id', ondelete='CASCADE'), primary_key=True, nullable=False, index=True)
    reason = Column(String(30))
    type = Column(String(30))
    comment_id = Column(ForeignKey('arXiv_admin_log.id'), index=True)

    comment = relationship('AdminLog', primaryjoin='SubmissionHoldReason.comment_id == AdminLog.id', backref='arXiv_submission_hold_reasons')
    submission = relationship('Submission', primaryjoin='SubmissionHoldReason.submission_id == Submission.submission_id', backref='arXiv_submission_hold_reasons')
    user = relationship('TapirUser', primaryjoin='SubmissionHoldReason.user_id == TapirUser.user_id', backref='arXiv_submission_hold_reasons')



class SubmissionNearDuplicate(Base):
    __tablename__ = 'arXiv_submission_near_duplicates'
    __table_args__ = (
        Index('match', 'submission_id', 'matching_id'),
    )

    submission_id = Column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), primary_key=True, nullable=False, server_default=FetchedValue())
    matching_id = Column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    similarity = Column(Numeric(2, 1), nullable=False)
    last_update = Column(DateTime, nullable=False, server_default=FetchedValue())

    submission = relationship('Submission', primaryjoin='SubmissionNearDuplicate.submission_id == Submission.submission_id', backref='arXiv_submission_near_duplicates')



class SubmissionQaReport(Base):
    __tablename__ = 'arXiv_submission_qa_reports'

    id = Column(Integer, primary_key=True)
    submission_id = Column(ForeignKey('arXiv_submissions.submission_id'), nullable=False, index=True)
    report_key_name = Column(String(64), nullable=False, index=True)
    created = Column(DateTime, server_default=FetchedValue())
    num_flags = Column(SmallInteger, nullable=False, server_default=FetchedValue())
    report = Column(JSON, nullable=False)
    report_uri = Column(String(256))

    submission = relationship('Submission', primaryjoin='SubmissionQaReport.submission_id == Submission.submission_id', backref='arXiv_submission_qa_reports')



class SubmissionViewFlag(Base):
    __tablename__ = 'arXiv_submission_view_flag'

    submission_id = Column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), primary_key=True, nullable=False)
    flag = Column(Integer, server_default=FetchedValue())
    user_id = Column(ForeignKey('tapir_users.user_id', ondelete='CASCADE'), primary_key=True, nullable=False, index=True)
    updated = Column(DateTime)

    submission = relationship('Submission', primaryjoin='SubmissionViewFlag.submission_id == Submission.submission_id', backref='arXiv_submission_view_flags')
    user = relationship('TapirUser', primaryjoin='SubmissionViewFlag.user_id == TapirUser.user_id', backref='arXiv_submission_view_flags')



class Submission(Base):
    __tablename__ = 'arXiv_submissions'

    submission_id = Column(Integer, primary_key=True)
    document_id = Column(ForeignKey('arXiv_documents.document_id', ondelete='CASCADE', onupdate='CASCADE'), index=True)
    doc_paper_id = Column(String(20), index=True)
    sword_id = Column(ForeignKey('arXiv_tracking.sword_id'), index=True)
    userinfo = Column(Integer, server_default=FetchedValue())
    is_author = Column(Integer, nullable=False, server_default=FetchedValue())
    agree_policy = Column(Integer, server_default=FetchedValue())
    viewed = Column(Integer, server_default=FetchedValue())
    stage = Column(Integer, server_default=FetchedValue())
    submitter_id = Column(ForeignKey('tapir_users.user_id', ondelete='CASCADE', onupdate='CASCADE'), index=True)
    submitter_name = Column(String(64))
    submitter_email = Column(String(64))
    created = Column(DateTime)
    updated = Column(DateTime)
    status = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    sticky_status = Column(Integer)
    must_process = Column(Integer, server_default=FetchedValue())
    submit_time = Column(DateTime)
    release_time = Column(DateTime)
    source_size = Column(Integer, server_default=FetchedValue())
    source_format = Column(String(12))
    source_flags = Column(String(12))
    has_pilot_data = Column(Integer)
    is_withdrawn = Column(Integer, nullable=False, server_default=FetchedValue())
    title = Column(Text)
    authors = Column(Text)
    comments = Column(Text)
    proxy = Column(String(255))
    report_num = Column(Text)
    msc_class = Column(String(255))
    acm_class = Column(String(255))
    journal_ref = Column(Text)
    doi = Column(String(255))
    abstract = Column(Text)
    license = Column(ForeignKey('arXiv_licenses.name', onupdate='CASCADE'), index=True)
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    type = Column(String(8), index=True)
    is_ok = Column(Integer, index=True)
    admin_ok = Column(Integer)
    allow_tex_produced = Column(Integer, server_default=FetchedValue())
    is_oversize = Column(Integer, server_default=FetchedValue())
    remote_addr = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    package = Column(String(255), nullable=False, server_default=FetchedValue())
    rt_ticket_id = Column(Integer, index=True)
    auto_hold = Column(Integer, server_default=FetchedValue())
    is_locked = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    agreement_id = Column(ForeignKey('arXiv_submission_agreements.agreement_id'), index=True)

    agreement = relationship('SubmissionAgreement', primaryjoin='Submission.agreement_id == SubmissionAgreement.agreement_id', backref='arXiv_submissions')
    document = relationship('Document', primaryjoin='Submission.document_id == Document.document_id', backref='arXiv_submissions')
    arXiv_license = relationship('License', primaryjoin='Submission.license == License.name', backref='arXiv_submissions')
    submitter = relationship('TapirUser', primaryjoin='Submission.submitter_id == TapirUser.user_id', backref='arXiv_submissions')
    sword = relationship('Tracking', primaryjoin='Submission.sword_id == Tracking.sword_id', backref='arXiv_submissions')


class PilotDataset(Submission):
    __tablename__ = 'arXiv_pilot_datasets'

    submission_id = Column(ForeignKey('arXiv_submissions.submission_id'), primary_key=True)
    numfiles = Column(SmallInteger, server_default=FetchedValue())
    feed_url = Column(String(256))
    manifestation = Column(String(256))
    published = Column(Integer, server_default=FetchedValue())
    created = Column(DateTime, nullable=False)
    last_checked = Column(DateTime, nullable=False, server_default=FetchedValue())


class SubmissionAbsClassifierDatum(Submission):
    __tablename__ = 'arXiv_submission_abs_classifier_data'

    submission_id = Column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), primary_key=True, server_default=FetchedValue())
    json = Column(Text)
    last_update = Column(DateTime, nullable=False, server_default=FetchedValue())
    status = Column(ENUM('processing', 'success', 'failed', 'no connection'))
    message = Column(Text)
    is_oversize = Column(Integer, server_default=FetchedValue())
    suggested_primary = Column(Text)
    suggested_reason = Column(Text)
    autoproposal_primary = Column(Text)
    autoproposal_reason = Column(Text)
    classifier_service_version = Column(Text)
    classifier_model_version = Column(Text)


class SubmissionClassifierDatum(Submission):
    __tablename__ = 'arXiv_submission_classifier_data'

    submission_id = Column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), primary_key=True, server_default=FetchedValue())
    json = Column(Text)
    last_update = Column(DateTime, nullable=False, server_default=FetchedValue())
    status = Column(ENUM('processing', 'success', 'failed', 'no connection'))
    message = Column(Text)
    is_oversize = Column(Integer, server_default=FetchedValue())



class SubmitterFlag(Base):
    __tablename__ = 'arXiv_submitter_flags'

    flag_id = Column(Integer, primary_key=True)
    comment = Column(String(255))
    pattern = Column(String(255))



class SuspectEmail(Base):
    __tablename__ = 'arXiv_suspect_emails'

    id = Column(Integer, primary_key=True)
    type = Column(String(10), nullable=False)
    pattern = Column(Text, nullable=False)
    comment = Column(Text, nullable=False)
    updated = Column(DateTime, nullable=False, server_default=FetchedValue())



class Title(Base):
    __tablename__ = 'arXiv_titles'

    paper_id = Column(String(64), primary_key=True)
    title = Column(String(255), index=True)
    report_num = Column(String(255), index=True)
    date = Column(Date)



class TopPaper(Base):
    __tablename__ = 'arXiv_top_papers'

    from_week = Column(Date, primary_key=True, nullable=False, server_default=FetchedValue())
    _class = Column('class', String(1), primary_key=True, nullable=False, server_default=FetchedValue())
    rank = Column(SmallInteger, primary_key=True, nullable=False, server_default=FetchedValue())
    document_id = Column(ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue())
    viewers = Column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='TopPaper.document_id == Document.document_id', backref='arXiv_top_papers')



class TrackbackPing(Base):
    __tablename__ = 'arXiv_trackback_pings'

    trackback_id = Column(Integer, primary_key=True)
    document_id = Column(Integer, index=True)
    title = Column(String(255), nullable=False, server_default=FetchedValue())
    excerpt = Column(String(255), nullable=False, server_default=FetchedValue())
    url = Column(String(255), nullable=False, index=True, server_default=FetchedValue())
    blog_name = Column(String(255), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    remote_addr = Column(String(16), nullable=False, server_default=FetchedValue())
    posted_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    is_stale = Column(Integer, nullable=False, server_default=FetchedValue())
    approved_by_user = Column(Integer, nullable=False, server_default=FetchedValue())
    approved_time = Column(Integer, nullable=False, server_default=FetchedValue())
    status = Column(ENUM('pending', 'pending2', 'accepted', 'rejected', 'spam'), nullable=False, index=True, server_default=FetchedValue())
    site_id = Column(Integer)



class TrackbackSite(Base):
    __tablename__ = 'arXiv_trackback_sites'

    pattern = Column(String(255), nullable=False, index=True, server_default=FetchedValue())
    site_id = Column(Integer, primary_key=True)
    action = Column(ENUM('neutral', 'accept', 'reject', 'spam'), nullable=False, server_default=FetchedValue())



class Tracking(Base):
    __tablename__ = 'arXiv_tracking'

    tracking_id = Column(Integer, primary_key=True)
    sword_id = Column(Integer, nullable=False, unique=True, server_default=FetchedValue())
    paper_id = Column(String(32), nullable=False)
    submission_errors = Column(Text)
    timestamp = Column(DateTime, nullable=False, server_default=FetchedValue())



class Update(Base):
    __tablename__ = 'arXiv_updates'
    __table_args__ = (
        Index('document_id', 'document_id', 'date', 'action', 'category'),
    )

    document_id = Column(Integer, index=True)
    version = Column(Integer, nullable=False, server_default=FetchedValue())
    date = Column(Date, index=True)
    action = Column(ENUM('new', 'replace', 'absonly', 'cross', 'repcro'))
    archive = Column(String(20), index=True)
    category = Column(String(20), index=True)



class UpdatesTmp(Base):
    __tablename__ = 'arXiv_updates_tmp'
    __table_args__ = (
        Index('document_id', 'document_id', 'date', 'action', 'category'),
    )

    document_id = Column(Integer)
    date = Column(Date)
    action = Column(ENUM('new', 'replace', 'absonly', 'cross', 'repcro'))
    category = Column(String(20))



class Version(Base):
    __tablename__ = 'arXiv_versions'

    document_id = Column(ForeignKey('arXiv_documents.document_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    version = Column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    request_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    freeze_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_current = Column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='Version.document_id == Document.document_id', backref='arXiv_versions')


class VersionsChecksum(Version):
    __tablename__ = 'arXiv_versions_checksum'
    __table_args__ = (
        ForeignKeyConstraint(['document_id', 'version'], ['arXiv_versions.document_id', 'arXiv_versions.version']),
    )

    document_id = Column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    version = Column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    flag_abs_present = Column(Integer, nullable=False, server_default=FetchedValue())
    abs_size = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    abs_md5sum = Column(BINARY(16), index=True)
    flag_src_present = Column(Integer, nullable=False, server_default=FetchedValue())
    src_size = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    src_md5sum = Column(BINARY(16), index=True)



class WhiteEmail(Base):
    __tablename__ = 'arXiv_white_email'

    pattern = Column(String(64), unique=True)



class XmlNotification(Base):
    __tablename__ = 'arXiv_xml_notifications'

    control_id = Column(Integer, index=True)
    type = Column(ENUM('submission', 'cross', 'jref'))
    queued_date = Column(Integer, nullable=False, server_default=FetchedValue())
    sent_date = Column(Integer, nullable=False, server_default=FetchedValue())
    status = Column(ENUM('unsent', 'sent', 'failed'), index=True)



class DbixClassSchemaVersion(Base):
    __tablename__ = 'dbix_class_schema_versions'

    version = Column(String(10), primary_key=True)
    installed = Column(String(20), nullable=False)



class DemographicsBackup(Base):
    __tablename__ = 'demographics_backup'

    user_id = Column(Integer, nullable=False, server_default=FetchedValue())
    country = Column(String(2), nullable=False, server_default=FetchedValue())
    affiliation = Column(String(255), nullable=False, server_default=FetchedValue())
    url = Column(String(255), nullable=False, server_default=FetchedValue())
    type = Column(SmallInteger)
    os = Column(SmallInteger)
    archive = Column(String(16))
    subject_class = Column(String(16))
    original_subject_classes = Column(String(255), nullable=False, server_default=FetchedValue())
    flag_group_physics = Column(Integer)
    flag_group_math = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_group_cs = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_group_nlin = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_proxy = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_journal = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_xml = Column(Integer, nullable=False, server_default=FetchedValue())
    dirty = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_group_test = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_suspect = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_group_q_bio = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_no_upload = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_no_endorse = Column(Integer, nullable=False, server_default=FetchedValue())
    veto_status = Column(ENUM('ok', 'no-endorse', 'no-upload'), server_default=FetchedValue())



class Session(Base):
    __tablename__ = 'sessions'

    id = Column(String(72), primary_key=True)
    session_data = Column(Text)
    expires = Column(Integer)



class TapirAddres(Base):
    __tablename__ = 'tapir_address'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    address_type = Column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    company = Column(String(80), nullable=False, server_default=FetchedValue())
    line1 = Column(String(80), nullable=False, server_default=FetchedValue())
    line2 = Column(String(80), nullable=False, server_default=FetchedValue())
    city = Column(String(50), nullable=False, index=True, server_default=FetchedValue())
    state = Column(String(50), nullable=False, server_default=FetchedValue())
    postal_code = Column(String(16), nullable=False, index=True, server_default=FetchedValue())
    country = Column(ForeignKey('tapir_countries.digraph'), nullable=False, index=True, server_default=FetchedValue())
    share_addr = Column(Integer, nullable=False, server_default=FetchedValue())

    tapir_country = relationship('TapirCountry', primaryjoin='TapirAddres.country == TapirCountry.digraph', backref='tapir_address')
    user = relationship('TapirUser', primaryjoin='TapirAddres.user_id == TapirUser.user_id', backref='tapir_address')



class TapirAdminAudit(Base):
    __tablename__ = 'tapir_admin_audit'

    log_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    session_id = Column(ForeignKey('tapir_sessions.session_id'), index=True)
    ip_addr = Column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    admin_user = Column(ForeignKey('tapir_users.user_id'), index=True)
    affected_user = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())
    action = Column(String(32), nullable=False, server_default=FetchedValue())
    data = Column(Text, nullable=False, index=True)
    comment = Column(Text, nullable=False)
    entry_id = Column(Integer, primary_key=True)

    tapir_user = relationship('TapirUser', primaryjoin='TapirAdminAudit.admin_user == TapirUser.user_id', backref='tapiruser_tapir_admin_audits')
    tapir_user1 = relationship('TapirUser', primaryjoin='TapirAdminAudit.affected_user == TapirUser.user_id', backref='tapiruser_tapir_admin_audits_0')
    session = relationship('TapirSession', primaryjoin='TapirAdminAudit.session_id == TapirSession.session_id', backref='tapir_admin_audits')



class TapirCountry(Base):
    __tablename__ = 'tapir_countries'

    digraph = Column(String(2), primary_key=True, server_default=FetchedValue())
    country_name = Column(String(255), nullable=False, server_default=FetchedValue())
    rank = Column(Integer, nullable=False, server_default=FetchedValue())



class TapirEmailChangeToken(Base):
    __tablename__ = 'tapir_email_change_tokens'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    old_email = Column(String(255))
    new_email = Column(String(255))
    secret = Column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    tapir_dest = Column(String(255), nullable=False, server_default=FetchedValue())
    issued_when = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_to = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(16), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())
    used = Column(Integer, nullable=False, server_default=FetchedValue())
    session_id = Column(Integer, nullable=False, server_default=FetchedValue())
    consumed_when = Column(Integer)
    consumed_from = Column(String(16))

    user = relationship('TapirUser', primaryjoin='TapirEmailChangeToken.user_id == TapirUser.user_id', backref='tapir_email_change_tokens')



class TapirEmailChangeTokensUsed(Base):
    __tablename__ = 'tapir_email_change_tokens_used'

    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    secret = Column(String(32), nullable=False, server_default=FetchedValue())
    used_when = Column(Integer, nullable=False, server_default=FetchedValue())
    used_from = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    session_id = Column(ForeignKey('tapir_sessions.session_id'), nullable=False, index=True, server_default=FetchedValue())

    session = relationship('TapirSession', primaryjoin='TapirEmailChangeTokensUsed.session_id == TapirSession.session_id', backref='tapir_email_change_tokens_useds')
    user = relationship('TapirUser', primaryjoin='TapirEmailChangeTokensUsed.user_id == TapirUser.user_id', backref='tapir_email_change_tokens_useds')



class TapirEmailHeader(Base):
    __tablename__ = 'tapir_email_headers'

    template_id = Column(ForeignKey('tapir_email_templates.template_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    header_name = Column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    header_content = Column(String(255), nullable=False, server_default=FetchedValue())

    template = relationship('TapirEmailTemplate', primaryjoin='TapirEmailHeader.template_id == TapirEmailTemplate.template_id', backref='tapir_email_headers')



class TapirEmailLog(Base):
    __tablename__ = 'tapir_email_log'

    mail_id = Column(Integer, primary_key=True)
    reference_type = Column(String(1))
    reference_id = Column(Integer)
    sent_date = Column(Integer, nullable=False, server_default=FetchedValue())
    email = Column(String(255))
    flag_bounced = Column(Integer)
    mailing_id = Column(Integer, index=True)
    template_id = Column(Integer, nullable=False, server_default=FetchedValue())



class TapirEmailMailing(Base):
    __tablename__ = 'tapir_email_mailings'

    mailing_id = Column(Integer, primary_key=True)
    template_id = Column(ForeignKey('tapir_email_templates.template_id'), index=True)
    created_by = Column(ForeignKey('tapir_users.user_id'), index=True)
    sent_by = Column(ForeignKey('tapir_users.user_id'), index=True)
    created_date = Column(Integer)
    sent_date = Column(Integer)
    complete_date = Column(Integer)
    mailing_name = Column(String(255))
    comment = Column(Text)

    tapir_user = relationship('TapirUser', primaryjoin='TapirEmailMailing.created_by == TapirUser.user_id', backref='tapiruser_tapir_email_mailings')
    tapir_user1 = relationship('TapirUser', primaryjoin='TapirEmailMailing.sent_by == TapirUser.user_id', backref='tapiruser_tapir_email_mailings_0')
    template = relationship('TapirEmailTemplate', primaryjoin='TapirEmailMailing.template_id == TapirEmailTemplate.template_id', backref='tapir_email_mailings')



class TapirEmailTemplate(Base):
    __tablename__ = 'tapir_email_templates'
    __table_args__ = (
        Index('short_name', 'short_name', 'lang'),
    )

    template_id = Column(Integer, primary_key=True)
    short_name = Column(String(32), nullable=False, server_default=FetchedValue())
    lang = Column(String(2), nullable=False, server_default=FetchedValue())
    long_name = Column(String(255), nullable=False, server_default=FetchedValue())
    data = Column(Text, nullable=False)
    sql_statement = Column(Text, nullable=False)
    update_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    created_by = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    updated_by = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    workflow_status = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_system = Column(Integer, nullable=False, server_default=FetchedValue())

    tapir_user = relationship('TapirUser', primaryjoin='TapirEmailTemplate.created_by == TapirUser.user_id', backref='tapiruser_tapir_email_templates')
    tapir_user1 = relationship('TapirUser', primaryjoin='TapirEmailTemplate.updated_by == TapirUser.user_id', backref='tapiruser_tapir_email_templates_0')



class TapirEmailToken(Base):
    __tablename__ = 'tapir_email_tokens'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret = Column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    tapir_dest = Column(String(255), nullable=False, server_default=FetchedValue())
    issued_when = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_to = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())
    wants_perm_token = Column(Integer, nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirEmailToken.user_id == TapirUser.user_id', backref='tapir_email_tokens')



class TapirEmailTokensUsed(Base):
    __tablename__ = 'tapir_email_tokens_used'

    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    secret = Column(String(32), nullable=False, server_default=FetchedValue())
    used_when = Column(Integer, nullable=False, server_default=FetchedValue())
    used_from = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    session_id = Column(ForeignKey('tapir_sessions.session_id'), nullable=False, index=True, server_default=FetchedValue())

    session = relationship('TapirSession', primaryjoin='TapirEmailTokensUsed.session_id == TapirSession.session_id', backref='tapir_email_tokens_useds')
    user = relationship('TapirUser', primaryjoin='TapirEmailTokensUsed.user_id == TapirUser.user_id', backref='tapir_email_tokens_useds')



class TapirErrorLog(Base):
    __tablename__ = 'tapir_error_log'

    error_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    user_id = Column(Integer, index=True)
    session_id = Column(Integer, index=True)
    ip_addr = Column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(32), nullable=False, index=True, server_default=FetchedValue())
    message = Column(String(32), nullable=False, index=True, server_default=FetchedValue())
    url = Column(String(255), nullable=False, server_default=FetchedValue())
    error_url = Column(String(255), nullable=False, server_default=FetchedValue())



class TapirIntegerVariable(Base):
    __tablename__ = 'tapir_integer_variables'

    variable_id = Column(String(32), primary_key=True, server_default=FetchedValue())
    value = Column(Integer, nullable=False, server_default=FetchedValue())



class TapirNickname(Base):
    __tablename__ = 'tapir_nicknames'
    __table_args__ = (
        Index('user_id', 'user_id', 'user_seq'),
    )

    nick_id = Column(Integer, primary_key=True)
    nickname = Column(String(20), nullable=False, unique=True, server_default=FetchedValue())
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, server_default=FetchedValue())
    user_seq = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_valid = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    role = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    policy = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_primary = Column(Integer, nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirNickname.user_id == TapirUser.user_id', backref='tapir_nicknames')



class TapirNicknamesAudit(Base):
    __tablename__ = 'tapir_nicknames_audit'

    nick_id = Column(Integer, primary_key=True, server_default=FetchedValue())
    creation_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    creation_ip_num = Column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, index=True, server_default=FetchedValue())



class TapirNoCooky(Base):
    __tablename__ = 'tapir_no_cookies'

    log_date = Column(Integer, nullable=False, server_default=FetchedValue())
    ip_addr = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())
    session_data = Column(String(255), nullable=False, server_default=FetchedValue())
    user_agent = Column(String(255), nullable=False, server_default=FetchedValue())



class TapirPeriodicTasksLog(Base):
    __tablename__ = 'tapir_periodic_tasks_log'

    t = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    entry = Column(Text)



class TapirPermanentToken(Base):
    __tablename__ = 'tapir_permanent_tokens'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret = Column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    valid = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_when = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_to = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    session_id = Column(ForeignKey('tapir_sessions.session_id'), nullable=False, index=True, server_default=FetchedValue())

    session = relationship('TapirSession', primaryjoin='TapirPermanentToken.session_id == TapirSession.session_id', backref='tapir_permanent_tokens')
    user = relationship('TapirUser', primaryjoin='TapirPermanentToken.user_id == TapirUser.user_id', backref='tapir_permanent_tokens')



class TapirPermanentTokensUsed(Base):
    __tablename__ = 'tapir_permanent_tokens_used'

    user_id = Column(ForeignKey('tapir_users.user_id'), index=True)
    secret = Column(String(32), nullable=False, server_default=FetchedValue())
    used_when = Column(Integer)
    used_from = Column(String(16))
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    session_id = Column(ForeignKey('tapir_sessions.session_id'), nullable=False, index=True, server_default=FetchedValue())

    session = relationship('TapirSession', primaryjoin='TapirPermanentTokensUsed.session_id == TapirSession.session_id', backref='tapir_permanent_tokens_useds')
    user = relationship('TapirUser', primaryjoin='TapirPermanentTokensUsed.user_id == TapirUser.user_id', backref='tapir_permanent_tokens_useds')



class TapirPhone(Base):
    __tablename__ = 'tapir_phone'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    phone_type = Column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    phone_number = Column(String(32), index=True)
    share_phone = Column(Integer, nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirPhone.user_id == TapirUser.user_id', backref='tapir_phones')



class TapirPolicyClass(Base):
    __tablename__ = 'tapir_policy_classes'

    class_id = Column(SmallInteger, primary_key=True)
    name = Column(String(64), nullable=False, server_default=FetchedValue())
    description = Column(Text, nullable=False)
    password_storage = Column(Integer, nullable=False, server_default=FetchedValue())
    recovery_policy = Column(Integer, nullable=False, server_default=FetchedValue())
    permanent_login = Column(Integer, nullable=False, server_default=FetchedValue())



class TapirPresession(Base):
    __tablename__ = 'tapir_presessions'

    presession_id = Column(Integer, primary_key=True)
    ip_num = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())
    created_at = Column(Integer, nullable=False, server_default=FetchedValue())



class TapirRecoveryToken(Base):
    __tablename__ = 'tapir_recovery_tokens'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret = Column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    valid = Column(Integer, nullable=False, server_default=FetchedValue())
    tapir_dest = Column(String(255), nullable=False, server_default=FetchedValue())
    issued_when = Column(Integer, nullable=False, server_default=FetchedValue())
    issued_to = Column(String(16), nullable=False, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirRecoveryToken.user_id == TapirUser.user_id', backref='tapir_recovery_tokens')



class TapirRecoveryTokensUsed(Base):
    __tablename__ = 'tapir_recovery_tokens_used'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret = Column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    used_when = Column(Integer)
    used_from = Column(String(16))
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    session_id = Column(ForeignKey('tapir_sessions.session_id'), index=True)

    session = relationship('TapirSession', primaryjoin='TapirRecoveryTokensUsed.session_id == TapirSession.session_id', backref='tapir_recovery_tokens_useds')
    user = relationship('TapirUser', primaryjoin='TapirRecoveryTokensUsed.user_id == TapirUser.user_id', backref='tapir_recovery_tokens_useds')



class TapirSavePostVariable(Base):
    __tablename__ = 'tapir_save_post_variables'

    presession_id = Column(ForeignKey('tapir_presessions.presession_id'), nullable=False, index=True, server_default=FetchedValue())
    name = Column(String(255))
    value = Column(String, nullable=False)
    seq = Column(Integer, nullable=False, server_default=FetchedValue())

    presession = relationship('TapirPresession', primaryjoin='TapirSavePostVariable.presession_id == TapirPresession.presession_id', backref='tapir_save_post_variables')



class TapirSession(Base):
    __tablename__ = 'tapir_sessions'

    session_id = Column(Integer, primary_key=True)
    user_id = Column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    last_reissue = Column(Integer, nullable=False, server_default=FetchedValue())
    start_time = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    end_time = Column(Integer, nullable=False, index=True, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirSession.user_id == TapirUser.user_id', backref='tapir_sessions')


class TapirSessionsAudit(TapirSession):
    __tablename__ = 'tapir_sessions_audit'

    session_id = Column(ForeignKey('tapir_sessions.session_id'), primary_key=True, server_default=FetchedValue())
    ip_addr = Column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, index=True, server_default=FetchedValue())



class TapirStringVariable(Base):
    __tablename__ = 'tapir_string_variables'

    variable_id = Column(String(32), primary_key=True, server_default=FetchedValue())
    value = Column(Text, nullable=False)



class TapirString(Base):
    __tablename__ = 'tapir_strings'

    name = Column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    module = Column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    language = Column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    string = Column(Text, nullable=False)



class TapirUser(Base):
    __tablename__ = 'tapir_users'

    user_id = Column(Integer, primary_key=True)
    first_name = Column(String(50), index=True)
    last_name = Column(String(50), index=True)
    suffix_name = Column(String(50))
    share_first_name = Column(Integer, nullable=False, server_default=FetchedValue())
    share_last_name = Column(Integer, nullable=False, server_default=FetchedValue())
    email = Column(String(255), nullable=False, unique=True, server_default=FetchedValue())
    share_email = Column(Integer, nullable=False, server_default=FetchedValue())
    email_bouncing = Column(Integer, nullable=False, server_default=FetchedValue())
    policy_class = Column(ForeignKey('tapir_policy_classes.class_id'), nullable=False, index=True, server_default=FetchedValue())
    joined_date = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    joined_ip_num = Column(String(16), index=True)
    joined_remote_host = Column(String(255), nullable=False, server_default=FetchedValue())
    flag_internal = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_edit_users = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_edit_system = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_email_verified = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_approved = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_deleted = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_banned = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_wants_email = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_html_email = Column(Integer, nullable=False, server_default=FetchedValue())
    tracking_cookie = Column(String(255), nullable=False, index=True, server_default=FetchedValue())
    flag_allow_tex_produced = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_can_lock = Column(Integer, nullable=False, index=True, server_default=FetchedValue())

    tapir_policy_class = relationship('TapirPolicyClass', primaryjoin='TapirUser.policy_class == TapirPolicyClass.class_id', backref='tapir_users')


class AuthorId(TapirUser):
    __tablename__ = 'arXiv_author_ids'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True)
    author_id = Column(String(50), nullable=False, index=True)
    updated = Column(DateTime, nullable=False, server_default=FetchedValue())


class Demographic(TapirUser):
    __tablename__ = 'arXiv_demographics'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('archive', 'archive', 'subject_class')
    )

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    country = Column(String(2), nullable=False, index=True, server_default=FetchedValue())
    affiliation = Column(String(255), nullable=False, server_default=FetchedValue())
    url = Column(String(255), nullable=False, server_default=FetchedValue())
    type = Column(SmallInteger, index=True)
    archive = Column(String(16))
    subject_class = Column(String(16))
    original_subject_classes = Column(String(255), nullable=False, server_default=FetchedValue())
    flag_group_physics = Column(Integer, index=True)
    flag_group_math = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_group_cs = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_group_nlin = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_proxy = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_journal = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_xml = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    dirty = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_group_test = Column(Integer, nullable=False, server_default=FetchedValue())
    flag_suspect = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_group_q_bio = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_group_q_fin = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_group_stat = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_group_eess = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_group_econ = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    veto_status = Column(ENUM('ok', 'no-endorse', 'no-upload', 'no-replace'), nullable=False, server_default=FetchedValue())

    arXiv_category = relationship('Category', primaryjoin='and_(Demographic.archive == Category.archive, Demographic.subject_class == Category.subject_class)', backref='arXiv_demographics')


class OrcidId(TapirUser):
    __tablename__ = 'arXiv_orcid_ids'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True)
    orcid = Column(String(19), nullable=False, index=True)
    authenticated = Column(Integer, nullable=False, server_default=FetchedValue())
    updated = Column(DateTime, nullable=False, server_default=FetchedValue())


class QueueView(TapirUser):
    __tablename__ = 'arXiv_queue_view'

    user_id = Column(ForeignKey('tapir_users.user_id', ondelete='CASCADE'), primary_key=True, server_default=FetchedValue())
    last_view = Column(DateTime)
    second_last_view = Column(DateTime)
    total_views = Column(Integer, nullable=False, server_default=FetchedValue())


class SuspiciousName(TapirUser):
    __tablename__ = 'arXiv_suspicious_names'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    full_name = Column(String(255), nullable=False, server_default=FetchedValue())


class SwordLicense(TapirUser):
    __tablename__ = 'arXiv_sword_licenses'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True)
    license = Column(String(127))
    updated = Column(DateTime, nullable=False, server_default=FetchedValue())


class TapirDemographic(TapirUser):
    __tablename__ = 'tapir_demographics'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    gender = Column(Integer, nullable=False, server_default=FetchedValue())
    share_gender = Column(Integer, nullable=False, server_default=FetchedValue())
    birthday = Column(Date, index=True)
    share_birthday = Column(Integer, nullable=False, server_default=FetchedValue())
    country = Column(ForeignKey('tapir_countries.digraph'), nullable=False, index=True, server_default=FetchedValue())
    share_country = Column(Integer, nullable=False, server_default=FetchedValue())
    postal_code = Column(String(16), nullable=False, index=True, server_default=FetchedValue())

    tapir_country = relationship('TapirCountry', primaryjoin='TapirDemographic.country == TapirCountry.digraph', backref='tapir_demographics')


class TapirUsersHot(TapirUser):
    __tablename__ = 'tapir_users_hot'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    last_login = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    second_last_login = Column(Integer, nullable=False, index=True, server_default=FetchedValue())
    number_sessions = Column(Integer, nullable=False, index=True, server_default=FetchedValue())


class TapirUsersPassword(TapirUser):
    __tablename__ = 'tapir_users_password'

    user_id = Column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    password_storage = Column(Integer, nullable=False, server_default=FetchedValue())
    password_enc = Column(String(50), nullable=False, server_default=FetchedValue())
