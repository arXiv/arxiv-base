"""These models represent the entire arXiv DB and the LaTeXML DB.

This file was generated by using sqlacodgen
"""

from typing import Optional, Literal, Any, Tuple, List
import re
import os
import hashlib
import datetime as dt
from datetime import datetime, date
from dateutil.tz import gettz, tzutc
from validators import url as is_valid_url

from sqlalchemy import (
    BINARY, 
    BigInteger, 
    Column,
    Date, 
    DateTime, 
    ForeignKey, 
    ForeignKeyConstraint, 
    Index, 
    Integer, 
    JSON, 
    Numeric,
    PrimaryKeyConstraint, 
    SmallInteger, 
    String, 
    Text, 
    Table,
    Enum,
    text, 
    create_engine,
    Engine
)
from sqlalchemy.schema import FetchedValue
from sqlalchemy.orm import (
    Mapped,
    mapped_column, 
    relationship
)

from ..config import Settings, settings
from . import Base, LaTeXMLBase, metadata, \
    SessionLocal, engine, latexml_engine

from .types import intpk

tb_secret = settings.TRACKBACK_SECRET
tz = gettz(settings.ARXIV_BUSINESS_TZ)

def configure_db (base_settings: Settings) -> Tuple[Engine, Optional[Engine]]:
    if 'sqlite' in base_settings.CLASSIC_DB_URI:
        engine = create_engine(base_settings.CLASSIC_DB_URI)
        if base_settings.LATEXML_DB_URI:
            latexml_engine = create_engine(base_settings.LATEXML_DB_URI)
        else:
            latexml_engine = None
    else:
        engine = create_engine(base_settings.CLASSIC_DB_URI,
                        echo=base_settings.ECHO_SQL,
                        isolation_level=base_settings.CLASSIC_DB_TRANSACTION_ISOLATION_LEVEL,
                        pool_recycle=600,
                        max_overflow=(base_settings.REQUEST_CONCURRENCY - 5), # max overflow is how many + base pool size, which is 5 by default
                        pool_pre_ping=base_settings.POOL_PRE_PING)
        if base_settings.LATEXML_DB_URI:
            latexml_engine = create_engine(base_settings.LATEXML_DB_URI,
                                    echo=base_settings.ECHO_SQL,
                                    isolation_level=base_settings.LATEXML_DB_TRANSACTION_ISOLATION_LEVEL,
                                    pool_recycle=600,
                                    max_overflow=(base_settings.REQUEST_CONCURRENCY - 5),
                                    pool_pre_ping=base_settings.POOL_PRE_PING)
        else:
            latexml_engine = None
    SessionLocal.configure(binds={
        Base: engine,
        LaTeXMLBase: (latexml_engine if latexml_engine else engine),
        t_arXiv_stats_hourly: engine,
        t_arXiv_admin_state: engine,
        t_arXiv_bad_pw: engine,
        t_arXiv_black_email: engine,
        t_arXiv_block_email: engine,
        t_arXiv_bogus_subject_class: engine,
        t_arXiv_duplicates: engine,
        t_arXiv_in_category: engine,
        t_arXiv_moderators: engine,
        t_arXiv_ownership_requests_papers: engine,
        t_arXiv_refresh_list: engine,
        t_arXiv_paper_owners: engine,
        t_arXiv_updates_tmp: engine,
        t_arXiv_white_email: engine,
        t_arXiv_xml_notifications: engine,
        t_demographics_backup: engine,
        t_tapir_email_change_tokens_used: engine,
        t_tapir_email_tokens_used: engine,
        t_tapir_error_log: engine,
        t_tapir_no_cookies: engine,
        t_tapir_periodic_tasks_log: engine,
        t_tapir_periodic_tasks_log: engine,
        t_tapir_permanent_tokens_used: engine,
        t_tapir_save_post_variables: engine
    })
    return engine, latexml_engine

class MemberInstitution(Base):
    __tablename__ = 'Subscription_UniversalInstitution'

    resolver_URL: Mapped[Optional[str]]
    name: Mapped[str] = mapped_column(String(255), nullable=False, index=True)
    label: Mapped[Optional[str]]
    id: Mapped[intpk]
    alt_text: Mapped[Optional[str]]
    link_icon: Mapped[Optional[str]]
    note: Mapped[Optional[str]]



class MemberInstitutionContact(Base):
    __tablename__ = 'Subscription_UniversalInstitutionContact'

    email: Mapped[Optional[str]]
    sid: Mapped[int] = mapped_column(ForeignKey('Subscription_UniversalInstitution.id', ondelete='CASCADE'), nullable=False, index=True)
    active: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    contact_name: Mapped[Optional[str]]
    id: Mapped[intpk]
    phone: Mapped[Optional[str]]
    note: Mapped[Optional[str]] = mapped_column(String(2048))

    Subscription_UniversalInstitution = relationship('MemberInstitution', primaryjoin='MemberInstitutionContact.sid == MemberInstitution.id')



class MemberInstitutionIP(Base):
    __tablename__ = 'Subscription_UniversalInstitutionIP'
    __table_args__ = (
        Index('ip', 'start', 'end'),
    )

    sid: Mapped[int] = mapped_column(ForeignKey('Subscription_UniversalInstitution.id', ondelete='CASCADE'), nullable=False, index=True)
    id: Mapped[intpk]
    exclude: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    end: Mapped[int] = mapped_column(BigInteger, nullable=False, index=True)
    start: Mapped[int] = mapped_column(BigInteger, nullable=False, index=True)

    Subscription_UniversalInstitution = relationship('MemberInstitution', primaryjoin='MemberInstitutionIP.sid == MemberInstitution.id')



class AdminLog(Base):
    __tablename__ = 'arXiv_admin_log'

    id: Mapped[intpk]
    logtime: Mapped[Optional[str]] = mapped_column(String(24))
    created: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())
    paper_id: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    username: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    host: Mapped[Optional[str]] = mapped_column(String(64))
    program: Mapped[Optional[str]] = mapped_column(String(20))
    command: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    logtext: Mapped[Optional[str]] = mapped_column(Text)
    document_id: Mapped[Optional[int]] = mapped_column(Integer)
    submission_id: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    notify: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())



class AdminMetadata(Base):
    __tablename__ = 'arXiv_admin_metadata'
    __table_args__ = (
        Index('admin_metadata_pidv', 'paper_id', 'version'),
    )

    metadata_id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    document_id = mapped_column(ForeignKey('arXiv_documents.document_id', ondelete='CASCADE'), index=True)
    paper_id: Mapped[Optional[str]] = mapped_column(String(64))
    created: Mapped[Optional[datetime]]
    updated: Mapped[Optional[datetime]]
    submitter_name: Mapped[Optional[str]] = mapped_column(String(64))
    submitter_email: Mapped[Optional[str]] = mapped_column(String(64))
    history: Mapped[Optional[str]] = mapped_column(Text)
    source_size: Mapped[Optional[int]] = mapped_column(Integer)
    source_type: Mapped[Optional[str]] = mapped_column(String(12))
    title: Mapped[Optional[str]] = mapped_column(Text)
    authors: Mapped[Optional[str]] = mapped_column(Text)
    category_string: Mapped[Optional[str]]
    comments: Mapped[Optional[str]] = mapped_column(Text)
    proxy: Mapped[Optional[str]]
    report_num: Mapped[Optional[str]] = mapped_column(Text)
    msc_class: Mapped[Optional[str]]
    acm_class: Mapped[Optional[str]]
    journal_ref: Mapped[Optional[str]] = mapped_column(Text)
    doi: Mapped[Optional[str]]
    abstract: Mapped[Optional[str]] = mapped_column(Text)
    license: Mapped[Optional[str]]
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    modtime: Mapped[Optional[int]] = mapped_column(Integer)
    is_current: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='AdminMetadata.document_id == Document.document_id', backref='arXiv_admin_metadata')



t_arXiv_admin_state = Table(
    'arXiv_admin_state', metadata,
    Column('document_id', Integer, unique=True),
    Column('timestamp', DateTime, nullable=False, server_default=FetchedValue()),
    Column('abs_timestamp', Integer),
    Column('src_timestamp', Integer),
    Column('state', Enum('pending', 'ok', 'bad'), nullable=False, server_default=FetchedValue()),
    Column('admin', String(32)),
    Column('comment', String(255))
)



class ArchiveCategory(Base):
    __tablename__ = 'arXiv_archive_category'

    archive_id: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    category_id: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False)



class ArchiveDef(Base):
    __tablename__ = 'arXiv_archive_def'

    archive: Mapped[str] = mapped_column(String(16), primary_key=True, server_default=FetchedValue())
    name: Mapped[Optional[str]]



class ArchiveGroup(Base):
    __tablename__ = 'arXiv_archive_group'

    archive_id: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    group_id: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())



class Archive(Base):
    __tablename__ = 'arXiv_archives'

    archive_id: Mapped[str] = mapped_column(String(16), primary_key=True, server_default=FetchedValue())
    in_group = mapped_column(ForeignKey('arXiv_groups.group_id'), nullable=False, index=True, server_default=FetchedValue())
    archive_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    start_date: Mapped[str] = mapped_column(String(4), nullable=False, server_default=FetchedValue())
    end_date: Mapped[str] = mapped_column(String(4), nullable=False, server_default=FetchedValue())
    subdivided: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_group = relationship('Group', primaryjoin='Archive.in_group == Group.group_id', backref='arXiv_archives')



class AwsConfig(Base):
    __tablename__ = 'arXiv_aws_config'

    domain: Mapped[str] = mapped_column(String(75), primary_key=True, nullable=False)
    keyname: Mapped[str] = mapped_column(String(60), primary_key=True, nullable=False)
    value: Mapped[Optional[str]] = mapped_column(String(150))



class AwsFile(Base):
    __tablename__ = 'arXiv_aws_files'

    type: Mapped[str] = mapped_column(String(10), nullable=False, index=True, server_default=FetchedValue())
    filename: Mapped[str] = mapped_column(String(100), primary_key=True, server_default=FetchedValue())
    md5sum: Mapped[Optional[str]] = mapped_column(String(50))
    content_md5sum: Mapped[Optional[str]] = mapped_column(String(50))
    size: Mapped[Optional[int]] = mapped_column(Integer)
    timestamp: Mapped[Optional[datetime]]
    yymm: Mapped[Optional[str]] = mapped_column(String(4))
    seq_num: Mapped[Optional[int]] = mapped_column(Integer)
    first_item: Mapped[Optional[str]] = mapped_column(String(20))
    last_item: Mapped[Optional[str]] = mapped_column(String(20))
    num_items: Mapped[Optional[int]] = mapped_column(Integer)



t_arXiv_bad_pw = Table(
    'arXiv_bad_pw', metadata,
    Column('user_id', ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
)


class BibFeed(Base):
    __tablename__ = 'arXiv_bib_feeds'

    bib_id: Mapped[intpk]
    name: Mapped[str] = mapped_column(String(64), nullable=False, server_default=FetchedValue())
    priority: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    uri: Mapped[Optional[str]]
    identifier: Mapped[Optional[str]]
    version: Mapped[Optional[str]]
    strip_journal_ref: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    concatenate_dupes: Mapped[Optional[int]] = mapped_column(Integer)
    max_updates: Mapped[Optional[int]] = mapped_column(Integer)
    email_errors: Mapped[Optional[str]]
    prune_ids: Mapped[Optional[str]] = mapped_column(Text)
    prune_regex: Mapped[Optional[str]] = mapped_column(Text)
    enabled: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())



class BibUpdate(Base):
    __tablename__ = 'arXiv_bib_updates'

    update_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    bib_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())
    journal_ref: Mapped[Optional[str]] = mapped_column(Text)
    doi: Mapped[Optional[str]] = mapped_column(Text)



t_arXiv_black_email = Table(
    'arXiv_black_email', metadata,
    Column('pattern', String(64))
)



t_arXiv_block_email = Table(
    'arXiv_block_email', metadata,
    Column('pattern', String(64))
)



class BogusCountry(Base):
    __tablename__ = 'arXiv_bogus_countries'

    user_id: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    country_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())



t_arXiv_bogus_subject_class = Table(
    'arXiv_bogus_subject_class', metadata,
    Column('document_id', ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue()),
    Column('category_name', String(255), nullable=False, server_default=FetchedValue())
)


class Category(Base):
    __tablename__ = 'arXiv_categories'

    archive: Mapped[str] = mapped_column(ForeignKey('arXiv_archives.archive_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    definitive: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    active: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    category_name: Mapped[Optional[str]]
    endorse_all: Mapped[Literal['y', 'n', 'd']] = mapped_column(Enum('y', 'n', 'd'), nullable=False, server_default=text("'d'"))
    endorse_email: Mapped[Literal['y', 'n', 'd']] = mapped_column(Enum('y', 'n', 'd'), nullable=False, server_default=text("'d'"))
    papers_to_endorse: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=text("'0'"))
    endorsement_domain: Mapped[Optional[str]] = mapped_column(ForeignKey('arXiv_endorsement_domains.endorsement_domain'), index=True)

    arXiv_archive = relationship('Archive', primaryjoin='Category.archive == Archive.archive_id', backref='arXiv_categories')
    arXiv_endorsement_domain = relationship('EndorsementDomain', primaryjoin='Category.endorsement_domain == EndorsementDomain.endorsement_domain', backref='arXiv_categories')


class QuestionableCategory(Category):
    __tablename__ = 'arXiv_questionable_categories'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
    )

    archive: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())



class CategoryDef(Base):
    __tablename__ = 'arXiv_category_def'

    category: Mapped[str] = mapped_column(String(32), primary_key=True)
    name: Mapped[Optional[str]]
    active: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())



class ControlHold(Base):
    __tablename__ = 'arXiv_control_holds'
    __table_args__ = (
        Index('control_id', 'hold_type'),
    )

    hold_id: Mapped[intpk]
    control_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    hold_type: Mapped[Literal['submission', 'cross', 'jref']] = mapped_column(Enum('submission', 'cross', 'jref'), nullable=False, index=True, server_default=FetchedValue())
    hold_status: Mapped[Literal['held', 'extended', 'accepted', 'rejected']] = mapped_column(Enum('held', 'extended', 'accepted', 'rejected'), nullable=False, index=True, server_default=FetchedValue())
    hold_reason: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())
    hold_data: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    origin: Mapped[Literal['auto', 'user', 'admin', 'moderator']] = mapped_column(Enum('auto', 'user', 'admin', 'moderator'), nullable=False, index=True, server_default=FetchedValue())
    placed_by: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id'), index=True)
    last_changed_by: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id'), index=True)

    tapir_user = relationship('TapirUser', primaryjoin='ControlHold.last_changed_by == TapirUser.user_id', backref='tapiruser_arXiv_control_holds')
    tapir_user1 = relationship('TapirUser', primaryjoin='ControlHold.placed_by == TapirUser.user_id', backref='tapiruser_arXiv_control_holds_0')



class CrossControl(Base):
    __tablename__ = 'arXiv_cross_control'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('document_id', 'document_id', 'version'),
        Index('archive', 'archive', 'subject_class')
    )

    control_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    desired_order: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    status: Mapped[Literal['new', 'frozen', 'published', 'rejected']] = mapped_column(Enum('new', 'frozen', 'published', 'rejected'), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify: Mapped[Optional[Literal['0', '1']]] = mapped_column(Enum('0', '1'), server_default=FetchedValue())
    archive: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    request_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    freeze_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category = relationship('Category', primaryjoin='and_(CrossControl.archive == Category.archive, CrossControl.subject_class == Category.subject_class)', backref='arXiv_cross_controls')
    document = relationship('Document', primaryjoin='CrossControl.document_id == Document.document_id', backref='arXiv_cross_controls')
    user = relationship('TapirUser', primaryjoin='CrossControl.user_id == TapirUser.user_id', backref='arXiv_cross_controls')



class DataciteDois(Base):
    __tablename__ = 'arXiv_datacite_dois'
    __table_args__ = (
        Index('account_paper_id', 'account', 'paper_id'),
    )

    doi: Mapped[str] = mapped_column(String(255), primary_key=True)
    account: Mapped[Optional[Literal['test', 'prod']]] = mapped_column(Enum('test', 'prod'))
    metadata_id: Mapped[int] = mapped_column(ForeignKey('arXiv_metadata.metadata_id'), nullable=False, index=True)
    paper_id: Mapped[str] = mapped_column(String(64), nullable=False)
    created: Mapped[Optional[datetime]] = mapped_column(DateTime, server_default=FetchedValue())
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime, server_default=FetchedValue())

    metadata_ = relationship('Metadata', primaryjoin='DataciteDois.metadata_id == Metadata.metadata_id', backref='arXiv_datacite_dois')



class DBLPAuthor(Base):
    __tablename__ = 'arXiv_dblp_authors'

    author_id: Mapped[int] = mapped_column(Integer, primary_key=True, unique=True)
    name: Mapped[Optional[str]] = mapped_column(String(40), unique=True)



class DBLPDocumentAuthor(Base):
    __tablename__ = 'arXiv_dblp_document_authors'

    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), primary_key=True, nullable=False, index=True)
    author_id: Mapped[int] = mapped_column(ForeignKey('arXiv_dblp_authors.author_id'), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    position: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    author = relationship('DBLPAuthor', primaryjoin='DBLPDocumentAuthor.author_id == DBLPAuthor.author_id', backref='arXiv_dblp_document_authors')
    document = relationship('Document', primaryjoin='DBLPDocumentAuthor.document_id == Document.document_id', backref='arXiv_dblp_document_authors')



class DocumentCategory(Base):
    __tablename__ = 'arXiv_document_category'

    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id', ondelete='CASCADE'), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    category = mapped_column(ForeignKey('arXiv_category_def.category'), primary_key=True, nullable=False, index=True)
    is_primary: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category_def: Mapped[Optional[str]] = relationship('CategoryDef', primaryjoin='DocumentCategory.category == CategoryDef.category', backref='arXiv_document_categories')
    document = relationship('Document', primaryjoin='DocumentCategory.document_id == Document.document_id', backref='arXiv_document_categories')



class Document(Base):
    __tablename__ = 'arXiv_documents'

    document_id: Mapped[intpk]
    paper_id: Mapped[str] = mapped_column(String(20), nullable=False, unique=True, server_default=FetchedValue())
    title: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())
    authors: Mapped[Optional[str]] = mapped_column(Text)
    submitter_email: Mapped[str] = mapped_column(String(64), nullable=False, index=True, server_default=FetchedValue())
    submitter_id: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id'), index=True)
    dated: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    primary_subject_class: Mapped[Optional[str]] = mapped_column(String(16))
    created: Mapped[Optional[datetime]]

    submitter = relationship('TapirUser', primaryjoin='Document.submitter_id == TapirUser.user_id', backref='arXiv_documents')


class DBLP(Document):
    __tablename__ = 'arXiv_dblp'

    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), primary_key=True, server_default=FetchedValue())
    url: Mapped[Optional[str]] = mapped_column(String(80))


class PaperPw(Document):
    __tablename__ = 'arXiv_paper_pw'

    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), primary_key=True, server_default=FetchedValue())
    password_storage: Mapped[Optional[int]] = mapped_column(Integer)
    password_enc: Mapped[Optional[str]] = mapped_column(String(50))



t_arXiv_duplicates = Table(
    'arXiv_duplicates', metadata,
    Column('user_id', ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue()),
    Column('email', String(255)),
    Column('username', String(255))
)


class EndorsementDomain(Base):
    __tablename__ = 'arXiv_endorsement_domains'

    endorsement_domain: Mapped[str] = mapped_column(String(32), primary_key=True, server_default=FetchedValue())
    endorse_all: Mapped[Literal['y', 'n']] = mapped_column(Enum('y', 'n'), nullable=False, server_default=FetchedValue())
    mods_endorse_all: Mapped[Literal['y', 'n']] = mapped_column(Enum('y', 'n'), nullable=False, server_default=FetchedValue())
    endorse_email: Mapped[Literal['y', 'n']] = mapped_column(Enum('y', 'n'), nullable=False, server_default=FetchedValue())
    papers_to_endorse: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=FetchedValue())



class EndorsementRequest(Base):
    __tablename__ = 'arXiv_endorsement_requests'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('endorsee_id_2', 'endorsee_id', 'archive', 'subject_class')
    )

    request_id: Mapped[intpk]
    endorsee_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    archive: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(16), nullable=False, unique=True, server_default=FetchedValue())
    flag_valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    point_value: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category = relationship('Category', primaryjoin='and_(EndorsementRequest.archive == Category.archive, EndorsementRequest.subject_class == Category.subject_class)', backref='arXiv_endorsement_requests')
    endorsee = relationship('TapirUser', primaryjoin='EndorsementRequest.endorsee_id == TapirUser.user_id', backref='arXiv_endorsement_requests')


class EndorsementRequestsAudit(EndorsementRequest):
    __tablename__ = 'arXiv_endorsement_requests_audit'

    request_id: Mapped[int] = mapped_column(ForeignKey('arXiv_endorsement_requests.request_id'), primary_key=True, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[Optional[str]] = mapped_column(String(16))
    remote_host: Mapped[Optional[str]]
    tracking_cookie: Mapped[Optional[str]]



class Endorsement(Base):
    __tablename__ = 'arXiv_endorsements'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('endorsement_archive', 'archive', 'subject_class'),
        Index('endorser_id_2', 'endorser_id', 'endorsee_id', 'archive', 'subject_class')
    )

    endorsement_id: Mapped[intpk]
    endorser_id: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id'), index=True)
    endorsee_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    archive: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    flag_valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    type: Mapped[Optional[Literal['user', 'admin', 'auto']]] = mapped_column(Enum('user', 'admin', 'auto'))
    point_value: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    request_id: Mapped[Optional[int]] = mapped_column(ForeignKey('arXiv_endorsement_requests.request_id'), index=True)

    arXiv_category = relationship('Category', primaryjoin='and_(Endorsement.archive == Category.archive, Endorsement.subject_class == Category.subject_class)', backref='arXiv_endorsements')
    endorsee = relationship('TapirUser', primaryjoin='Endorsement.endorsee_id == TapirUser.user_id', backref='tapiruser_arXiv_endorsements')
    endorser = relationship('TapirUser', primaryjoin='Endorsement.endorser_id == TapirUser.user_id', backref='tapiruser_arXiv_endorsements_0')
    request = relationship('EndorsementRequest', primaryjoin='Endorsement.request_id == EndorsementRequest.request_id', backref='arXiv_endorsements')


class EndorsementsAudit(Endorsement):
    __tablename__ = 'arXiv_endorsements_audit'

    endorsement_id: Mapped[int] = mapped_column(ForeignKey('arXiv_endorsements.endorsement_id'), primary_key=True, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    flag_knows_personally: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    flag_seen_paper: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    comment: Mapped[Optional[str]] = mapped_column(Text)



class FreezeLog(Base):
    __tablename__ = 'arXiv_freeze_log'

    date: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())



class GroupDef(Base):
    __tablename__ = 'arXiv_group_def'

    archive_group: Mapped[str] = mapped_column(String(16), primary_key=True, server_default=FetchedValue())
    name: Mapped[Optional[str]]



class Group(Base):
    __tablename__ = 'arXiv_groups'

    group_id: Mapped[str] = mapped_column(String(16), primary_key=True, server_default=FetchedValue())
    group_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    start_year: Mapped[str] = mapped_column(String(4), nullable=False, server_default=FetchedValue())



t_arXiv_in_category = Table(
    'arXiv_in_category', metadata,
    Column('document_id', ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue()),
    Column('archive', String(16), nullable=False, server_default=FetchedValue()),
    Column('subject_class', String(16), nullable=False, server_default=FetchedValue()),
    Column('is_primary', Integer, nullable=False, server_default=FetchedValue()),
    ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
    Index('in_cat_archive', 'archive', 'subject_class', 'document_id'),
    Index('arXiv_in_category_mp', 'archive', 'subject_class')
)


class JrefControl(Base):
    __tablename__ = 'arXiv_jref_control'
    __table_args__ = (
        Index('jref_ctrl_document_id', 'document_id', 'version'),
    )

    control_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    status: Mapped[Literal['new', 'frozen', 'published', 'rejected']] = mapped_column(Enum('new', 'frozen', 'published', 'rejected'), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify: Mapped[Optional[Literal['0', '1']]] = mapped_column(Enum('0', '1'), server_default=FetchedValue())
    jref: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    request_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    freeze_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='JrefControl.document_id == Document.document_id', backref='arXiv_jref_controls')
    user = relationship('TapirUser', primaryjoin='JrefControl.user_id == TapirUser.user_id', backref='arXiv_jref_controls')



class License(Base):
    __tablename__ = 'arXiv_licenses'

    name: Mapped[str] = mapped_column(String(255), primary_key=True)
    label: Mapped[Optional[str]]
    active: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    note: Mapped[Optional[str]] = mapped_column(String(400))
    sequence: Mapped[Optional[int]] = mapped_column(Integer)



class LogPosition(Base):
    __tablename__ = 'arXiv_log_positions'

    id: Mapped[str] = mapped_column(String(255), primary_key=True, server_default=FetchedValue())
    position: Mapped[Optional[int]]
    date: Mapped[Optional[int]]



class Metadata(Base):
    __tablename__ = 'arXiv_metadata'
    __table_args__ = (
        Index('pidv', 'paper_id', 'version'),
    )

    metadata_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id', ondelete='CASCADE', onupdate='CASCADE'), nullable=False, index=True, server_default=FetchedValue())
    paper_id: Mapped[str] = mapped_column(String(64), nullable=False)
    created: Mapped[Optional[datetime]]
    updated: Mapped[Optional[datetime]]
    submitter_id: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id'), index=True)
    submitter_name: Mapped[str] = mapped_column(String(64), nullable=False)
    submitter_email: Mapped[str] = mapped_column(String(64), nullable=False)
    source_size: Mapped[Optional[int]] = mapped_column(Integer)
    source_format: Mapped[Optional[Literal['tex', 'ps', 'html', 'pdf', 'withdrawn', 'pdftex', 'docx']]] = mapped_column(String(12))
    source_flags: Mapped[Optional[str]] = mapped_column(String(12))
    title: Mapped[Optional[str]] = mapped_column(Text)
    authors: Mapped[Optional[str]] = mapped_column(Text)
    abs_categories: Mapped[Optional[str]]
    comments: Mapped[Optional[str]] = mapped_column(Text)
    proxy: Mapped[Optional[str]]
    report_num: Mapped[Optional[str]] = mapped_column(Text)
    msc_class: Mapped[Optional[str]]
    acm_class: Mapped[Optional[str]]
    journal_ref: Mapped[Optional[str]] = mapped_column(Text)
    doi: Mapped[Optional[str]]
    abstract: Mapped[Optional[str]] = mapped_column(Text)
    license: Mapped[Optional[str]] = mapped_column(ForeignKey('arXiv_licenses.name'), index=True)
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    modtime: Mapped[Optional[int]] = mapped_column(Integer)
    is_current: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    is_withdrawn: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='Metadata.document_id == Document.document_id', backref='arXiv_metadata')
    arXiv_license = relationship('License', primaryjoin='Metadata.license == License.name', backref='arXiv_metadata')
    submitter = relationship('TapirUser', primaryjoin='Metadata.submitter_id == TapirUser.user_id', backref='arXiv_metadata')



class MirrorList(Base):
    __tablename__ = 'arXiv_mirror_list'

    mirror_list_id: Mapped[intpk]
    created: Mapped[Optional[datetime]]
    updated: Mapped[Optional[datetime]]
    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    write_source: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    write_abs: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    is_written: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='MirrorList.document_id == Document.document_id', backref='arXiv_mirror_lists')



class ModeratorApiKey(Base):
    __tablename__ = 'arXiv_moderator_api_key'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='ModeratorApiKey.user_id == TapirUser.user_id', backref='arXiv_moderator_api_keys')



t_arXiv_moderators = Table(
    'arXiv_moderators', metadata,
    Column('user_id', ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue()),
    Column('archive', ForeignKey('arXiv_archive_group.archive_id'), nullable=False, server_default=FetchedValue()),
    Column('subject_class', String(16), nullable=False, server_default=FetchedValue()),
    Column('is_public', Integer, nullable=False, server_default=FetchedValue()),
    Column('no_email', Integer, index=True, server_default=FetchedValue()),
    Column('no_web_email', Integer, index=True, server_default=FetchedValue()),
    Column('no_reply_to', Integer, index=True, server_default=FetchedValue()),
    Column('daily_update', Integer, server_default=FetchedValue()),
    ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
    Index('mod_user_id', 'archive', 'subject_class', 'user_id')
)


class MonitorKlog(Base):
    __tablename__ = 'arXiv_monitor_klog'

    t: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    sent: Mapped[Optional[int]] = mapped_column(Integer)



class MonitorMailq(Base):
    __tablename__ = 'arXiv_monitor_mailq'

    t: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    main_q: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_q: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_host_map: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_timeout: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_refused: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_in_flight: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())



class MonitorMailsent(Base):
    __tablename__ = 'arXiv_monitor_mailsent'

    t: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    sent: Mapped[Optional[int]] = mapped_column(Integer)



class NextMail(Base):
    __tablename__ = 'arXiv_next_mail'
    __table_args__ = (
        Index('arXiv_next_mail_idx_document_id_version', 'document_id', 'version'),
    )

    next_mail_id: Mapped[intpk]
    submission_id: Mapped[int] = mapped_column(Integer, nullable=False)
    document_id: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    paper_id: Mapped[Optional[str]] = mapped_column(String(20))
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    type: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    extra: Mapped[Optional[str]]
    mail_id: Mapped[Optional[str]] = mapped_column(String(6))
    is_written: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())



class OrcidConfig(Base):
    __tablename__ = 'arXiv_orcid_config'

    domain: Mapped[str] = mapped_column(String(75), primary_key=True, nullable=False)
    keyname: Mapped[str] = mapped_column(String(60), primary_key=True, nullable=False)
    value: Mapped[Optional[str]] = mapped_column(String(150))



class OwnershipRequest(Base):
    __tablename__ = 'arXiv_ownership_requests'

    request_id: Mapped[intpk]
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    endorsement_request_id: Mapped[Optional[int]] = mapped_column(ForeignKey('arXiv_endorsement_requests.request_id'), index=True)
    workflow_status: Mapped[Literal['pending', 'accepted', 'rejected']] = mapped_column(Enum('pending', 'accepted', 'rejected'), nullable=False, server_default=FetchedValue())

    endorsement_request = relationship('EndorsementRequest', primaryjoin='OwnershipRequest.endorsement_request_id == EndorsementRequest.request_id', backref='arXiv_ownership_requests')
    user = relationship('TapirUser', primaryjoin='OwnershipRequest.user_id == TapirUser.user_id', backref='arXiv_ownership_requests')


class OwnershipRequestsAudit(OwnershipRequest):
    __tablename__ = 'arXiv_ownership_requests_audit'

    request_id: Mapped[int] = mapped_column(ForeignKey('arXiv_ownership_requests.request_id'), primary_key=True, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())



t_arXiv_ownership_requests_papers = Table(
    'arXiv_ownership_requests_papers', metadata,
    Column('request_id', Integer, nullable=False, server_default=FetchedValue()),
    Column('document_id', Integer, nullable=False, index=True, server_default=FetchedValue()),
    Index('request_id', 'request_id', 'document_id')
)



t_arXiv_paper_owners = Table(
    'arXiv_paper_owners', metadata,
    Column('document_id', ForeignKey('arXiv_documents.document_id'), nullable=False, server_default=FetchedValue()),
    Column('user_id', ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue()),
    Column('date', Integer, nullable=False, server_default=text("'0'")),
    Column('added_by', ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=text("'0'")),
    Column('remote_addr', String(16), nullable=False, server_default=FetchedValue()),
    Column('remote_host', String(255), nullable=False, server_default=FetchedValue()),
    Column('tracking_cookie', String(32), nullable=False, server_default=FetchedValue()),
    Column('valid', Integer, nullable=False, server_default=text("'0'")),
    Column('flag_author', Integer, nullable=False, server_default=text("'0'")),
    Column('flag_auto', Integer, nullable=False, server_default=text("'1'")),
    Index('owners_document_id', 'document_id', 'user_id')
)


class PaperSession(Base):
    __tablename__ = 'arXiv_paper_sessions'

    paper_session_id: Mapped[intpk]
    paper_id: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    start_time: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    end_time: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    ip_name: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())



class PilotFile(Base):
    __tablename__ = 'arXiv_pilot_files'

    file_id: Mapped[intpk]
    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id'), nullable=False, index=True)
    filename: Mapped[Optional[str]] = mapped_column(String(256), server_default=FetchedValue())
    entity_url: Mapped[Optional[str]] = mapped_column(String(256))
    description: Mapped[Optional[str]] = mapped_column(String(80))
    byRef: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())

    submission = relationship('Submission', primaryjoin='PilotFile.submission_id == Submission.submission_id', backref='arXiv_pilot_files')



class PublishLog(Base):
    __tablename__ = 'arXiv_publish_log'

    date: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())



t_arXiv_refresh_list = Table(
    'arXiv_refresh_list', metadata,
    Column('filename', String(255)),
    Column('mtime', Integer, index=True)
)


class RejectSessionUsername(Base):
    __tablename__ = 'arXiv_reject_session_usernames'

    username: Mapped[str] = mapped_column(String(64), primary_key=True, server_default=FetchedValue())



class SciencewisePing(Base):
    __tablename__ = 'arXiv_sciencewise_pings'

    paper_id_v: Mapped[str] = mapped_column(String(32), primary_key=True)
    updated: Mapped[Optional[datetime]]



class ShowEmailRequest(Base):
    __tablename__ = 'arXiv_show_email_requests'
    __table_args__ = (
        Index('email_reqs_user_id', 'user_id', 'dated'),
    )

    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    dated: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_allowed: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    request_id: Mapped[intpk]

    document = relationship('Document', primaryjoin='ShowEmailRequest.document_id == Document.document_id', backref='arXiv_show_email_requests')
    user = relationship('TapirUser', primaryjoin='ShowEmailRequest.user_id == TapirUser.user_id', backref='arXiv_show_email_requests')



class State(Base):
    __tablename__ = 'arXiv_state'

    id: Mapped[intpk]
    name: Mapped[Optional[str]] = mapped_column(String(24))
    value: Mapped[Optional[str]] = mapped_column(String(24))



t_arXiv_stats_hourly = Table(
    'arXiv_stats_hourly', metadata,
    Column('ymd', Date, nullable=False, index=True),
    Column('hour', Integer, nullable=False, index=True),
    Column('node_num', Integer, nullable=False, index=True),
    Column('access_type', String(1), nullable=False, index=True),
    Column('connections', Integer, nullable=False)
)


class StatsMonthlyDownload(Base):
    __tablename__ = 'arXiv_stats_monthly_downloads'

    ym: Mapped[date] = mapped_column(Date, primary_key=True)
    downloads: Mapped[int] = mapped_column(Integer, nullable=False)



class StatsMonthlySubmission(Base):
    __tablename__ = 'arXiv_stats_monthly_submissions'

    ym: Mapped[date] = mapped_column(Date, primary_key=True, server_default=FetchedValue())
    num_submissions: Mapped[int] = mapped_column(SmallInteger, nullable=False)
    historical_delta: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())



class SubmissionAgreement(Base):
    __tablename__ = 'arXiv_submission_agreements'

    agreement_id: Mapped[int] = mapped_column(SmallInteger, primary_key=True)
    effective_date: Mapped[Optional[datetime]] = mapped_column(DateTime, server_default=FetchedValue())
    commit_ref: Mapped[str] = mapped_column(String(255), nullable=False)
    content: Mapped[Optional[str]] = mapped_column(Text)



class SubmissionCategory(Base):
    __tablename__ = 'arXiv_submission_category'

    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE', onupdate='CASCADE'), primary_key=True, nullable=False, index=True)
    category: Mapped[str] = mapped_column(ForeignKey('arXiv_category_def.category'), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    is_primary: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    is_published: Mapped[Optional[int]] = mapped_column(Integer, index=True, server_default=FetchedValue())

    arXiv_category_def = relationship('CategoryDef', primaryjoin='SubmissionCategory.category == CategoryDef.category', backref='arXiv_submission_categories')
    submission = relationship('Submission', primaryjoin='SubmissionCategory.submission_id == Submission.submission_id', backref='arXiv_submission_categories')



class SubmissionCategoryProposal(Base):
    __tablename__ = 'arXiv_submission_category_proposal'

    proposal_id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, index=True)
    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE', onupdate='CASCADE'), primary_key=True, nullable=False, index=True)
    category: Mapped[str] = mapped_column(ForeignKey('arXiv_category_def.category'), primary_key=True, nullable=False, index=True)
    is_primary: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    proposal_status: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True)
    updated: Mapped[Optional[datetime]]
    proposal_comment_id: Mapped[Optional[int]] = mapped_column(ForeignKey('arXiv_admin_log.id'), index=True)
    response_comment_id: Mapped[Optional[int]] = mapped_column(ForeignKey('arXiv_admin_log.id'), index=True)

    arXiv_category_def = relationship('CategoryDef', primaryjoin='SubmissionCategoryProposal.category == CategoryDef.category', backref='arXiv_submission_category_proposals')
    proposal_comment = relationship('AdminLog', primaryjoin='SubmissionCategoryProposal.proposal_comment_id == AdminLog.id', backref='arxivadminlog_arXiv_submission_category_proposals')
    response_comment = relationship('AdminLog', primaryjoin='SubmissionCategoryProposal.response_comment_id == AdminLog.id', backref='arxivadminlog_arXiv_submission_category_proposals_0')
    submission = relationship('Submission', primaryjoin='SubmissionCategoryProposal.submission_id == Submission.submission_id', backref='arXiv_submission_category_proposals')
    user = relationship('TapirUser', primaryjoin='SubmissionCategoryProposal.user_id == TapirUser.user_id', backref='arXiv_submission_category_proposals')



class SubmissionControl(Base):
    __tablename__ = 'arXiv_submission_control'
    __table_args__ = (
        Index('sub_ctrl_document_id', 'document_id', 'version'),
    )

    control_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    pending_paper_id: Mapped[str] = mapped_column(String(20), nullable=False, index=True, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    status: Mapped[Literal['new', 'frozen', 'published', 'rejected']] = mapped_column(Enum('new', 'frozen', 'published', 'rejected'), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify: Mapped[Optional[Literal['0', '1']]] = mapped_column(Enum('0', '1'), server_default=FetchedValue())
    request_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    freeze_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='SubmissionControl.document_id == Document.document_id', backref='arXiv_submission_controls')
    user = relationship('TapirUser', primaryjoin='SubmissionControl.user_id == TapirUser.user_id', backref='arXiv_submission_controls')



class SubmissionFlag(Base):
    __tablename__ = 'arXiv_submission_flag'
    __table_args__ = (
        Index('uniq_one_flag_per_mod', 'submission_id', 'user_id'),
    )

    flag_id: Mapped[intpk]
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id', ondelete='CASCADE'), nullable=False, index=True, server_default=FetchedValue())
    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), nullable=False)
    flag: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())

    submission = relationship('Submission', primaryjoin='SubmissionFlag.submission_id == Submission.submission_id', backref='arXiv_submission_flags')
    user = relationship('TapirUser', primaryjoin='SubmissionFlag.user_id == TapirUser.user_id', backref='arXiv_submission_flags')



class SubmissionHoldReason(Base):
    __tablename__ = 'arXiv_submission_hold_reason'

    reason_id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)
    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), nullable=False, index=True)
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id', ondelete='CASCADE'), primary_key=True, nullable=False, index=True)
    reason: Mapped[Optional[str]] = mapped_column(String(30))
    type: Mapped[Optional[str]] = mapped_column(String(30))
    comment_id: Mapped[Optional[int]] = mapped_column(ForeignKey('arXiv_admin_log.id'), index=True)

    comment = relationship('AdminLog', primaryjoin='SubmissionHoldReason.comment_id == AdminLog.id', backref='arXiv_submission_hold_reasons')
    submission = relationship('Submission', primaryjoin='SubmissionHoldReason.submission_id == Submission.submission_id', backref='arXiv_submission_hold_reasons')
    user = relationship('TapirUser', primaryjoin='SubmissionHoldReason.user_id == TapirUser.user_id', backref='arXiv_submission_hold_reasons')



class SubmissionNearDuplicate(Base):
    __tablename__ = 'arXiv_submission_near_duplicates'
    __table_args__ = (
        Index('match', 'submission_id', 'matching_id'),
    )

    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), primary_key=True, nullable=False, server_default=FetchedValue())
    matching_id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    similarity: Mapped[float] = mapped_column(Numeric(2, 1), nullable=False)
    last_update: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())

    submission = relationship('Submission', primaryjoin='SubmissionNearDuplicate.submission_id == Submission.submission_id', backref='arXiv_submission_near_duplicates')



class SubmissionQaReport(Base):
    __tablename__ = 'arXiv_submission_qa_reports'

    id: Mapped[intpk]
    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id'), nullable=False, index=True)
    report_key_name: Mapped[str] = mapped_column(String(64), nullable=False, index=True)
    created: Mapped[Optional[datetime]] = mapped_column(DateTime, server_default=FetchedValue())
    num_flags: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=FetchedValue())
    report: Mapped[dict[str, Any]] = mapped_column(JSON, nullable=False)
    report_uri: Mapped[Optional[str]] = mapped_column(String(256))

    submission = relationship('Submission', primaryjoin='SubmissionQaReport.submission_id == Submission.submission_id', backref='arXiv_submission_qa_reports')



class SubmissionViewFlag(Base):
    __tablename__ = 'arXiv_submission_view_flag'

    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), primary_key=True, nullable=False)
    flag: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id', ondelete='CASCADE'), primary_key=True, nullable=False, index=True)
    updated: Mapped[Optional[datetime]]

    submission = relationship('Submission', primaryjoin='SubmissionViewFlag.submission_id == Submission.submission_id', backref='arXiv_submission_view_flags')
    user = relationship('TapirUser', primaryjoin='SubmissionViewFlag.user_id == TapirUser.user_id', backref='arXiv_submission_view_flags')



class Submission(Base):
    __tablename__ = 'arXiv_submissions'

    submission_id: Mapped[intpk]
    document_id: Mapped[Optional[int]] = mapped_column(ForeignKey('arXiv_documents.document_id', ondelete='CASCADE', onupdate='CASCADE'), index=True)
    doc_paper_id: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    sword_id: Mapped[Optional[int]] = mapped_column(ForeignKey('arXiv_tracking.sword_id'), index=True)
    userinfo: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    is_author: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    agree_policy: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    viewed: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    stage: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    submitter_id: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id', ondelete='CASCADE', onupdate='CASCADE'), index=True)
    submitter_name: Mapped[Optional[str]] = mapped_column(String(64))
    submitter_email: Mapped[Optional[str]] = mapped_column(String(64))
    created: Mapped[Optional[datetime]]
    updated: Mapped[Optional[datetime]]
    status: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    sticky_status: Mapped[Optional[int]] = mapped_column(Integer)
    must_process: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    submit_time: Mapped[Optional[datetime]]
    release_time: Mapped[Optional[datetime]]
    source_size: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    source_format: Mapped[Optional[str]] = mapped_column(String(12))
    source_flags: Mapped[Optional[str]] = mapped_column(String(12))
    has_pilot_data: Mapped[Optional[int]] = mapped_column(Integer)
    is_withdrawn: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    title: Mapped[Optional[str]] = mapped_column(Text)
    authors: Mapped[Optional[str]] = mapped_column(Text)
    comments: Mapped[Optional[str]] = mapped_column(Text)
    proxy: Mapped[Optional[str]]
    report_num: Mapped[Optional[str]] = mapped_column(Text)
    msc_class: Mapped[Optional[str]]
    acm_class: Mapped[Optional[str]]
    journal_ref: Mapped[Optional[str]] = mapped_column(Text)
    doi: Mapped[Optional[str]]
    abstract: Mapped[Optional[str]] = mapped_column(Text)
    license: Mapped[Optional[str]] = mapped_column(ForeignKey('arXiv_licenses.name', onupdate='CASCADE'), index=True)
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    type: Mapped[Optional[str]] = mapped_column(String(8), index=True)
    is_ok: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    admin_ok: Mapped[Optional[int]] = mapped_column(Integer)
    allow_tex_produced: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    is_oversize: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    package: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    rt_ticket_id: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    auto_hold: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    is_locked: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    agreement_id = mapped_column(ForeignKey('arXiv_submission_agreements.agreement_id'), index=True)

    agreement = relationship('SubmissionAgreement', primaryjoin='Submission.agreement_id == SubmissionAgreement.agreement_id', backref='arXiv_submissions')
    document = relationship('Document', primaryjoin='Submission.document_id == Document.document_id', backref='arXiv_submissions')
    arXiv_license = relationship('License', primaryjoin='Submission.license == License.name', backref='arXiv_submissions')
    submitter = relationship('TapirUser', primaryjoin='Submission.submitter_id == TapirUser.user_id', backref='arXiv_submissions')
    sword = relationship('Tracking', primaryjoin='Submission.sword_id == Tracking.sword_id', backref='arXiv_submissions')


class PilotDataset(Submission):
    __tablename__ = 'arXiv_pilot_datasets'

    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id'), primary_key=True)
    numfiles: Mapped[Optional[int]] = mapped_column(SmallInteger, server_default=FetchedValue())
    feed_url: Mapped[Optional[str]] = mapped_column(String(256))
    manifestation: Mapped[Optional[str]] = mapped_column(String(256))
    published: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    # created: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    # ^This column is inherited
    last_checked: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class SubmissionAbsClassifierDatum(Submission):
    __tablename__ = 'arXiv_submission_abs_classifier_data'

    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), primary_key=True, server_default=FetchedValue())
    json: Mapped[Optional[str]] = mapped_column(Text)
    last_update: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())
    # status: Mapped[Optional[Literal['processing', 'success', 'failed', 'no connection']]] = mapped_column(Enum('processing', 'success', 'failed', 'no connection'))
    # ^This column is inherited
    message: Mapped[Optional[str]] = mapped_column(Text)
    # is_oversize: Mapped[Optional[int]] = mapped_column(Integer)
    # ^This column is inherited
    suggested_primary: Mapped[Optional[str]] = mapped_column(Text)
    suggested_reason: Mapped[Optional[str]] = mapped_column(Text)
    autoproposal_primary: Mapped[Optional[str]] = mapped_column(Text)
    autoproposal_reason: Mapped[Optional[str]] = mapped_column(Text)
    classifier_service_version: Mapped[Optional[str]] = mapped_column(Text)
    classifier_model_version: Mapped[Optional[str]] = mapped_column(Text)


class SubmissionClassifierDatum(Submission):
    __tablename__ = 'arXiv_submission_classifier_data'

    submission_id: Mapped[int] = mapped_column(ForeignKey('arXiv_submissions.submission_id', ondelete='CASCADE'), primary_key=True, server_default=FetchedValue())
    json: Mapped[Optional[str]] = mapped_column(Text)
    last_update: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())
    # status: Mapped[Optional[Literal['processing', 'success', 'failed', 'no connection']]] = mapped_column(Enum('processing', 'success', 'failed', 'no connection'))
    # ^This column is inherited
    message: Mapped[Optional[str]] = mapped_column(Text)
    # is_oversize: Mapped[Optional[int]] = mapped_column(Integer)
    # ^This column is inherited


class SubmitterFlag(Base):
    __tablename__ = 'arXiv_submitter_flags'

    flag_id: Mapped[intpk]
    comment: Mapped[Optional[str]]
    pattern: Mapped[Optional[str]]



class SuspectEmail(Base):
    __tablename__ = 'arXiv_suspect_emails'

    id: Mapped[intpk]
    type: Mapped[str] = mapped_column(String(10), nullable=False)
    pattern: Mapped[str] = mapped_column(Text, nullable=False)
    comment: Mapped[str] = mapped_column(Text, nullable=False)
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())



class Title(Base):
    __tablename__ = 'arXiv_titles'

    paper_id: Mapped[str] = mapped_column(String(64), primary_key=True)
    title: Mapped[Optional[str]] = mapped_column(String(255), index=True)
    report_num: Mapped[Optional[str]] = mapped_column(String(255), index=True)
    date: Mapped[Optional[dt.date]] = mapped_column(Date)



class TopPaper(Base):
    __tablename__ = 'arXiv_top_papers'

    from_week: Mapped[date] = mapped_column(Date, primary_key=True, nullable=False, server_default=FetchedValue())
    _class: Mapped[str] = mapped_column('class', String(1), primary_key=True, nullable=False, server_default=FetchedValue())
    rank: Mapped[int] = mapped_column(SmallInteger, primary_key=True, nullable=False, server_default=FetchedValue())
    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), nullable=False, index=True, server_default=FetchedValue())
    viewers: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='TopPaper.document_id == Document.document_id', backref='arXiv_top_papers')



class TrackbackPing(Base):
    __tablename__ = 'arXiv_trackback_pings'

    trackback_id: Mapped[intpk]
    document_id: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    title: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    excerpt: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    url: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())
    blog_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    posted_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    is_stale: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    approved_by_user: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    approved_time: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    status: Mapped[Literal['pending', 'pending2', 'accepted', 'rejected', 'spam']] = mapped_column(Enum('pending', 'pending2', 'accepted', 'rejected', 'spam'), nullable=False, index=True, server_default=FetchedValue())
    site_id: Mapped[Optional[int]] = mapped_column(Integer)

    @property
    def posted_datetime(self) -> DateTime:
        """Get posted_date as UTC datetime."""
        dt = datetime.fromtimestamp(self.posted_date, tz=tz)
        return dt.astimezone(tz=tzutc())

    @property
    def display_url(self) -> str:
        """Get the URL without the protocol, for display."""
        return str(re.sub(r"^[a-z]+:\/\/", "", self.url.strip(), flags=re.IGNORECASE,))

    @property
    def has_valid_url(self) -> bool:
        """Determine whether the trackback URL is valid."""
        return bool(is_valid_url(self.url, public=False))

    # TODO: Make settings for base so we can import them like everyone else does
    # Then I'll include the trackback secret
    @property
    def hashed_document_id(self) -> str:
        """Get the hashed document_id."""
        s = f"{self.document_id}{self.trackback_id}{tb_secret}"
        return hashlib.md5(s.encode()).hexdigest()[0:9]

class TrackbackSite(Base):
    __tablename__ = 'arXiv_trackback_sites'

    pattern: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())
    site_id: Mapped[intpk]
    action: Mapped[Literal['neutral', 'accept', 'reject', 'spam']] = mapped_column(Enum('neutral', 'accept', 'reject', 'spam'), nullable=False, server_default=FetchedValue())



class Tracking(Base):
    __tablename__ = 'arXiv_tracking'

    tracking_id: Mapped[intpk]
    sword_id: Mapped[int] = mapped_column(Integer, nullable=False, unique=True, server_default=FetchedValue())
    paper_id: Mapped[str] = mapped_column(String(32), nullable=False)
    submission_errors: Mapped[Optional[str]] = mapped_column(Text)
    timestamp: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())



class Updates(Base):
    __tablename__ = "arXiv_updates"
    __table_args__ = (PrimaryKeyConstraint('document_id', 'date', 'action', 'category'),)

    document_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("arXiv_documents.document_id", ondelete="CASCADE", onupdate="CASCADE"),
        nullable=False,
        index=True,
        server_default=text("'0'"),
    )
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    date: Mapped[Optional[dt.date]] = mapped_column(Date, index=True)
    action: Mapped[Optional[Literal['new', 'replace', 'absonly', 'cross', 'repcro']]] = mapped_column(Enum('new', 'replace', 'absonly', 'cross', 'repcro'))
    archive: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    category: Mapped[Optional[int]] = mapped_column(String(20), index=True)

    def __repr__(self) -> str:
        return f"ArXivUpdate(document_id={self.document_id}, version={self.version}, action={self.action}, date={self.date}, category={self.category}, archive={self.archive})"


t_arXiv_updates_tmp = Table(
    'arXiv_updates_tmp', metadata,
    Column('document_id', Integer),
    Column('date', Date),
    Column('action', Enum('new', 'replace', 'absonly', 'cross', 'repcro')),
    Column('category', String(20)),
    Index('updates_temp_document_id', 'document_id', 'date', 'action', 'category')
)


class Version(Base):
    __tablename__ = 'arXiv_versions'

    document_id: Mapped[int] = mapped_column(ForeignKey('arXiv_documents.document_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    request_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    freeze_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_current: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document = relationship('Document', primaryjoin='Version.document_id == Document.document_id', backref='arXiv_versions')


class VersionsChecksum(Version):
    __tablename__ = 'arXiv_versions_checksum'
    __table_args__ = (
        ForeignKeyConstraint(['document_id', 'version'], ['arXiv_versions.document_id', 'arXiv_versions.version']),
    )

    document_id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    flag_abs_present: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    abs_size: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    abs_md5sum: Mapped[Optional[str]] = mapped_column(BINARY(16), index=True)
    flag_src_present: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    src_size: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    src_md5sum: Mapped[Optional[str]] = mapped_column(BINARY(16), index=True)



t_arXiv_white_email = Table(
    'arXiv_white_email', metadata,
    Column('pattern', String(64), unique=True)
)



t_arXiv_xml_notifications = Table(
    'arXiv_xml_notifications', metadata,
    Column('control_id', Integer, index=True),
    Column('type', Enum('submission', 'cross', 'jref')),
    Column('queued_date', Integer, nullable=False, server_default=FetchedValue()),
    Column('sent_date', Integer, nullable=False, server_default=FetchedValue()),
    Column('status', Enum('unsent', 'sent', 'failed'), index=True)
)



class DbixClassSchemaVersion(Base):
    __tablename__ = 'dbix_class_schema_versions'

    version: Mapped[str] = mapped_column(String(10), primary_key=True)
    installed: Mapped[str] = mapped_column(String(20), nullable=False)



t_demographics_backup = Table(
    'demographics_backup', metadata,
    Column('user_id', Integer, nullable=False, server_default=FetchedValue()),
    Column('country', String(2), nullable=False, server_default=FetchedValue()),
    Column('affiliation', String(255), nullable=False, server_default=FetchedValue()),
    Column('url', String(255), nullable=False, server_default=FetchedValue()),
    Column('type', SmallInteger),
    Column('os', SmallInteger),
    Column('archive', String(16)),
    Column('subject_class', String(16)),
    Column('original_subject_classes', String(255), nullable=False, server_default=FetchedValue()),
    Column('flag_group_physics', Integer),
    Column('flag_group_math', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_group_cs', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_group_nlin', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_proxy', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_journal', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_xml', Integer, nullable=False, server_default=FetchedValue()),
    Column('dirty', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_group_test', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_suspect', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_group_q_bio', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_no_upload', Integer, nullable=False, server_default=FetchedValue()),
    Column('flag_no_endorse', Integer, nullable=False, server_default=FetchedValue()),
    Column('veto_status', Enum('ok', 'no-endorse', 'no-upload'), server_default=FetchedValue())
)


class Session(Base):
    __tablename__ = 'sessions'

    id: Mapped[str] = mapped_column(String(72), primary_key=True)
    session_data: Mapped[Optional[str]] = mapped_column(Text)
    expires: Mapped[Optional[int]] = mapped_column(Integer)



class TapirAddress(Base):
    __tablename__ = 'tapir_address'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    address_type: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    company: Mapped[str] = mapped_column(String(80), nullable=False, server_default=FetchedValue())
    line1: Mapped[str] = mapped_column(String(80), nullable=False, server_default=FetchedValue())
    line2: Mapped[str] = mapped_column(String(80), nullable=False, server_default=FetchedValue())
    city: Mapped[str] = mapped_column(String(50), nullable=False, index=True, server_default=FetchedValue())
    state: Mapped[str] = mapped_column(String(50), nullable=False, server_default=FetchedValue())
    postal_code: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    country: Mapped[str] = mapped_column(ForeignKey('tapir_countries.digraph'), nullable=False, index=True, server_default=FetchedValue())
    share_addr: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    tapir_country = relationship('TapirCountry', primaryjoin='TapirAddress.country == TapirCountry.digraph', backref='tapir_address')
    user = relationship('TapirUser', primaryjoin='TapirAddress.user_id == TapirUser.user_id', backref='tapir_address')



class TapirAdminAudit(Base):
    __tablename__ = 'tapir_admin_audit'

    log_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    session_id: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_sessions.session_id'), index=True)
    ip_addr: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    admin_user: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id'), index=True)
    affected_user: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    action: Mapped[str] = mapped_column(String(32), nullable=False, server_default=FetchedValue())
    data: Mapped[str] = mapped_column(Text, nullable=False, index=True)
    comment: Mapped[str] = mapped_column(Text, nullable=False)
    entry_id: Mapped[intpk]

    tapir_user = relationship('TapirUser', primaryjoin='TapirAdminAudit.admin_user == TapirUser.user_id', backref='tapiruser_tapir_admin_audits')
    tapir_user1 = relationship('TapirUser', primaryjoin='TapirAdminAudit.affected_user == TapirUser.user_id', backref='tapiruser_tapir_admin_audits_0')
    session = relationship('TapirSession', primaryjoin='TapirAdminAudit.session_id == TapirSession.session_id', backref='tapir_admin_audits')



class TapirCountry(Base):
    __tablename__ = 'tapir_countries'

    digraph: Mapped[str] = mapped_column(String(2), primary_key=True, server_default=FetchedValue())
    country_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    rank: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class TapirEmailChangeToken(Base):
    __tablename__ = 'tapir_email_change_tokens'

    user_id = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    old_email: Mapped[Optional[str]]
    new_email: Mapped[Optional[str]]
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    tapir_dest: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    used: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    consumed_when: Mapped[Optional[int]] = mapped_column(Integer)
    consumed_from: Mapped[Optional[str]] = mapped_column(String(16))

    user = relationship('TapirUser', primaryjoin='TapirEmailChangeToken.user_id == TapirUser.user_id', backref='tapir_email_change_tokens')


t_tapir_email_change_tokens_used = Table(
    'tapir_email_change_tokens_used', metadata,
    Column('user_id', ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue()),
    Column('secret', String(32), nullable=False, server_default=FetchedValue()),
    Column('used_when', Integer, nullable=False, server_default=FetchedValue()),
    Column('used_from', String(16), nullable=False, server_default=FetchedValue()),
    Column('remote_host', String(255), nullable=False, server_default=FetchedValue()),
    Column('session_id', ForeignKey('tapir_sessions.session_id'), nullable=False, index=True, server_default=FetchedValue())
)


class TapirEmailHeader(Base):
    __tablename__ = 'tapir_email_headers'

    template_id: Mapped[int] = mapped_column(ForeignKey('tapir_email_templates.template_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    header_name: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    header_content: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())

    template = relationship('TapirEmailTemplate', primaryjoin='TapirEmailHeader.template_id == TapirEmailTemplate.template_id', backref='tapir_email_headers')



class TapirEmailLog(Base):
    __tablename__ = 'tapir_email_log'

    mail_id: Mapped[intpk]
    reference_type: Mapped[Optional[str]] = mapped_column(String(1))
    reference_id: Mapped[Optional[int]] = mapped_column(Integer)
    sent_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    email: Mapped[Optional[str]]
    flag_bounced: Mapped[Optional[int]] = mapped_column(Integer)
    mailing_id: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    template_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())



class TapirEmailMailing(Base):
    __tablename__ = 'tapir_email_mailings'

    mailing_id: Mapped[intpk]
    template_id: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_email_templates.template_id'), index=True)
    created_by: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id'), index=True)
    sent_by: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_users.user_id'), index=True)
    created_date: Mapped[Optional[int]] = mapped_column(Integer)
    sent_date: Mapped[Optional[int]] = mapped_column(Integer)
    complete_date: Mapped[Optional[int]] = mapped_column(Integer)
    mailing_name: Mapped[Optional[str]]
    comment: Mapped[Optional[str]] = mapped_column(Text)

    tapir_user = relationship('TapirUser', primaryjoin='TapirEmailMailing.created_by == TapirUser.user_id', backref='tapiruser_tapir_email_mailings')
    tapir_user1 = relationship('TapirUser', primaryjoin='TapirEmailMailing.sent_by == TapirUser.user_id', backref='tapiruser_tapir_email_mailings_0')
    template = relationship('TapirEmailTemplate', primaryjoin='TapirEmailMailing.template_id == TapirEmailTemplate.template_id', backref='tapir_email_mailings')



class TapirEmailTemplate(Base):
    __tablename__ = 'tapir_email_templates'
    __table_args__ = (
        Index('short_name', 'short_name', 'lang'),
    )

    template_id: Mapped[intpk]
    short_name: Mapped[str] = mapped_column(String(32), nullable=False, server_default=FetchedValue())
    lang: Mapped[str] = mapped_column(String(2), nullable=False, server_default=FetchedValue())
    long_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    data: Mapped[str] = mapped_column(Text, nullable=False)
    sql_statement: Mapped[str] = mapped_column(Text, nullable=False)
    update_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    created_by: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    updated_by: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    workflow_status: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    flag_system: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    tapir_user = relationship('TapirUser', primaryjoin='TapirEmailTemplate.created_by == TapirUser.user_id', backref='tapiruser_tapir_email_templates')
    tapir_user1 = relationship('TapirUser', primaryjoin='TapirEmailTemplate.updated_by == TapirUser.user_id', backref='tapiruser_tapir_email_templates_0')



class TapirEmailToken(Base):
    __tablename__ = 'tapir_email_tokens'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    tapir_dest: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    wants_perm_token: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirEmailToken.user_id == TapirUser.user_id', backref='tapir_email_tokens')



t_tapir_email_tokens_used = Table(
    'tapir_email_tokens_used', metadata,
    Column('user_id', ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue()),
    Column('secret', String(32), nullable=False, server_default=FetchedValue()),
    Column('used_when', Integer, nullable=False, server_default=FetchedValue()),
    Column('used_from', String(16), nullable=False, server_default=FetchedValue()),
    Column('remote_host', String(255), nullable=False, server_default=FetchedValue()),
    Column('session_id', ForeignKey('tapir_sessions.session_id'), nullable=False, index=True, server_default=FetchedValue())
)



t_tapir_error_log = Table(
    'tapir_error_log', metadata,
    Column('error_date', Integer, nullable=False, index=True, server_default=FetchedValue()),
    Column('user_id', Integer, index=True),
    Column('session_id', Integer, index=True),
    Column('ip_addr', String(16), nullable=False, index=True, server_default=FetchedValue()),
    Column('remote_host', String(255), nullable=False, server_default=FetchedValue()),
    Column('tracking_cookie', String(32), nullable=False, index=True, server_default=FetchedValue()),
    Column('message', String(32), nullable=False, index=True, server_default=FetchedValue()),
    Column('url', String(255), nullable=False, server_default=FetchedValue()),
    Column('error_url', String(255), nullable=False, server_default=FetchedValue())
)



class TapirIntegerVariable(Base):
    __tablename__ = 'tapir_integer_variables'

    variable_id: Mapped[str] = mapped_column(String(32), primary_key=True, server_default=FetchedValue())
    value: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())



class TapirNickname(Base):
    __tablename__ = 'tapir_nicknames'
    __table_args__ = (
        Index('user_id', 'user_id', 'user_seq'),
    )

    nick_id: Mapped[intpk]
    nickname: Mapped[str] = mapped_column(String(20), nullable=False, unique=True, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, server_default=FetchedValue())
    user_seq: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_valid: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    role: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    policy: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_primary: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))

    user = relationship('TapirUser', primaryjoin='TapirNickname.user_id == TapirUser.user_id', backref='tapir_nicknames')



class TapirNicknamesAudit(Base):
    __tablename__ = 'tapir_nicknames_audit'

    nick_id: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    creation_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    creation_ip_num: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())



t_tapir_no_cookies = Table(
    'tapir_no_cookies', metadata,
    Column('log_date', Integer, nullable=False, server_default=FetchedValue()),
    Column('ip_addr', String(16), nullable=False, server_default=FetchedValue()),
    Column('remote_host', String(255), nullable=False, server_default=FetchedValue()),
    Column('tracking_cookie', String(255), nullable=False, server_default=FetchedValue()),
    Column('session_data', String(255), nullable=False, server_default=FetchedValue()),
    Column('user_agent', String(255), nullable=False, server_default=FetchedValue())
)



t_tapir_periodic_tasks_log = Table(
    'tapir_periodic_tasks_log', metadata,
    Column('t', Integer, nullable=False, index=True, server_default=FetchedValue()),
    Column('entry', Text)
)



class TapirPermanentToken(Base):
    __tablename__ = 'tapir_permanent_tokens'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(ForeignKey('tapir_sessions.session_id'), nullable=False, index=True, server_default=FetchedValue())

    session = relationship('TapirSession', primaryjoin='TapirPermanentToken.session_id == TapirSession.session_id', backref='tapir_permanent_tokens')
    user = relationship('TapirUser', primaryjoin='TapirPermanentToken.user_id == TapirUser.user_id', backref='tapir_permanent_tokens')



t_tapir_permanent_tokens_used = Table(
    'tapir_permanent_tokens_used', metadata,
    Column('user_id', ForeignKey('tapir_users.user_id'), index=True),
    Column('secret', String(32), nullable=False, server_default=FetchedValue()),
    Column('used_when', Integer),
    Column('used_from', String(16)),
    Column('remote_host', String(255), nullable=False, server_default=FetchedValue()),
    Column('session_id', ForeignKey('tapir_sessions.session_id'), nullable=False, index=True, server_default=FetchedValue())
)



class TapirPhone(Base):
    __tablename__ = 'tapir_phone'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    phone_type: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    phone_number: Mapped[Optional[str]] = mapped_column(String(32), index=True)
    share_phone: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirPhone.user_id == TapirUser.user_id', backref='tapir_phones')



class TapirPolicyClass(Base):
    __tablename__ = 'tapir_policy_classes'

    ADMIN = 1
    PUBLIC_USER = 2
    LEGACY_USER = 3
    POLICY_CLASSES = [
        {"name": "Administrator", "class_id": ADMIN, "description": "", "password_storage": 2, "recovery_policy": 3, "permanent_login": 1},
        {"name": "Public user", "class_id": PUBLIC_USER, "description": "", "password_storage": 2, "recovery_policy": 3, "permanent_login": 1},
        {"name": "Legacy user", "class_id": LEGACY_USER, "description": "", "password_storage": 2, "recovery_policy": 3, "permanent_login": 1},
    ]

    class_id: Mapped[int] = mapped_column(SmallInteger, primary_key=True)
    name: Mapped[str] = mapped_column(String(64), nullable=False, server_default=FetchedValue())
    description: Mapped[str] = mapped_column(Text, nullable=False)
    password_storage: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    recovery_policy: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    permanent_login: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())



class TapirPresession(Base):
    __tablename__ = 'tapir_presessions'

    presession_id: Mapped[intpk]
    ip_num: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    created_at: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())



class TapirRecoveryToken(Base):
    __tablename__ = 'tapir_recovery_tokens'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    tapir_dest: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirRecoveryToken.user_id == TapirUser.user_id', backref='tapir_recovery_tokens')



class TapirRecoveryTokensUsed(Base):
    __tablename__ = 'tapir_recovery_tokens_used'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    used_when: Mapped[Optional[int]] = mapped_column(Integer)
    used_from: Mapped[Optional[str]] = mapped_column(String(16))
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    session_id: Mapped[Optional[int]] = mapped_column(ForeignKey('tapir_sessions.session_id'), index=True)

    session = relationship('TapirSession', primaryjoin='TapirRecoveryTokensUsed.session_id == TapirSession.session_id', backref='tapir_recovery_tokens_useds')
    user = relationship('TapirUser', primaryjoin='TapirRecoveryTokensUsed.user_id == TapirUser.user_id', backref='tapir_recovery_tokens_useds')



t_tapir_save_post_variables = Table(
    'tapir_save_post_variables', metadata,
    Column('presession_id', ForeignKey('tapir_presessions.presession_id'), nullable=False, index=True, server_default=FetchedValue()),
    Column('name', String(255)),
    Column('value', String, nullable=False),
    Column('seq', Integer, nullable=False, server_default=FetchedValue())
)


class TapirSession(Base):
    __tablename__ = 'tapir_sessions'

    session_id: Mapped[intpk]
    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), nullable=False, index=True, server_default=FetchedValue())
    last_reissue: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    start_time: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    end_time: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())

    user = relationship('TapirUser', primaryjoin='TapirSession.user_id == TapirUser.user_id', backref='tapir_sessions')


class TapirSessionsAudit(TapirSession):
    __tablename__ = 'tapir_sessions_audit'

    session_id: Mapped[int] = mapped_column(ForeignKey('tapir_sessions.session_id'), primary_key=True, server_default=FetchedValue())
    ip_addr: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())



class TapirStringVariable(Base):
    __tablename__ = 'tapir_string_variables'

    variable_id: Mapped[str] = mapped_column(String(32), primary_key=True, server_default=FetchedValue())
    value: Mapped[str] = mapped_column(Text, nullable=False)



class TapirString(Base):
    __tablename__ = 'tapir_strings'

    name: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    module: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    language: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    string: Mapped[str] = mapped_column(Text, nullable=False)



class TapirUser(Base):
    __tablename__ = 'tapir_users'

    user_id: Mapped[intpk]
    first_name: Mapped[Optional[str]] = mapped_column(String(50), index=True)
    last_name: Mapped[Optional[str]] = mapped_column(String(50), index=True)
    suffix_name: Mapped[Optional[str]] = mapped_column(String(50))
    share_first_name: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    share_last_name: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    email: Mapped[str] = mapped_column(String(255), nullable=False, unique=True, server_default=text("''"))
    share_email: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'8'"))
    email_bouncing: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    policy_class: Mapped[int] = mapped_column(ForeignKey('tapir_policy_classes.class_id'), nullable=False, index=True, server_default=text("'0'"))
    joined_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    joined_ip_num: Mapped[Optional[str]] = mapped_column(String(16), index=True)
    joined_remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=text("''"))
    flag_internal: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_edit_users: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_edit_system: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_email_verified: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_approved: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'1'"))
    flag_deleted: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_banned: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_wants_email: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_html_email: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=text("''"))
    flag_allow_tex_produced: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_can_lock: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))

    tapir_policy_class = relationship('TapirPolicyClass', primaryjoin='TapirUser.policy_class == TapirPolicyClass.class_id', backref='tapir_users')


class AuthorIds(Base):
    __tablename__ = 'arXiv_author_ids'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True)
    author_id: Mapped[str] = mapped_column(String(50), nullable=False, index=True)
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class Demographic(Base):
    __tablename__ = 'arXiv_demographics'
    __table_args__ = (
        ForeignKeyConstraint(['archive', 'subject_class'], ['arXiv_categories.archive', 'arXiv_categories.subject_class']),
        Index('dem_archive', 'archive', 'subject_class')
    )

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    country: Mapped[str] = mapped_column(String(2), nullable=False, index=True, server_default=FetchedValue())
    affiliation: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    url: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    type: Mapped[Optional[int]] = mapped_column(SmallInteger, index=True)
    archive: Mapped[Optional[str]] = mapped_column(String(16))
    subject_class: Mapped[Optional[str]] = mapped_column(String(16))
    original_subject_classes: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    flag_group_physics: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    flag_group_math: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_cs: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_nlin: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_proxy: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_journal: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_xml: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    dirty: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_group_test: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_suspect: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_q_bio: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_q_fin: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_stat: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_eess: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_econ: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    veto_status: Mapped[Literal['ok', 'no-endorse', 'no-upload', 'no-replace']] = mapped_column(Enum('ok', 'no-endorse', 'no-upload', 'no-replace'), nullable=False, server_default=text("'ok'"))

    user = relationship('TapirUser')
    arXiv_category = relationship('Category', primaryjoin='and_(Demographic.archive == Category.archive, Demographic.subject_class == Category.subject_class)', backref='arXiv_demographics')

    GROUP_FLAGS = [
        ('grp_physics', 'flag_group_physics'),
        ('grp_math', 'flag_group_math'),
        ('grp_cs', 'flag_group_cs'),
        ('grp_q-bio', 'flag_group_q_bio'),
        ('grp_q-fin', 'flag_group_q_fin'),
        ('grp_q-stat', 'flag_group_stat'),
        ('grp_q-econ', 'flag_group_econ'),
        ('grp_eess', 'flag_group_eess'),
    ]

    @property
    def groups(self) -> List[str]:
        """Active groups for this user profile."""
        return [group for group, column in self.GROUP_FLAGS
                if getattr(self, column) == 1]


class OrcidIds(TapirUser):
    __tablename__ = 'arXiv_orcid_ids'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True)
    orcid: Mapped[str] = mapped_column(String(19), nullable=False, index=True)
    authenticated: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class QueueView(TapirUser):
    __tablename__ = 'arXiv_queue_view'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id', ondelete='CASCADE'), primary_key=True, server_default=FetchedValue())
    last_view: Mapped[Optional[datetime]]
    second_last_view: Mapped[Optional[datetime]]
    total_views: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class SuspiciousName(TapirUser):
    __tablename__ = 'arXiv_suspicious_names'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    full_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())


class SwordLicense(TapirUser):
    __tablename__ = 'arXiv_sword_licenses'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True)
    license: Mapped[Optional[str]] = mapped_column(String(127))
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class TapirDemographic(TapirUser):
    __tablename__ = 'tapir_demographics'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    gender: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    share_gender: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    birthday: Mapped[Optional[date]] = mapped_column(Date, index=True)
    share_birthday: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    country: Mapped[str] = mapped_column(ForeignKey('tapir_countries.digraph'), nullable=False, index=True, server_default=FetchedValue())
    share_country: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    postal_code: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())

    tapir_country = relationship('TapirCountry', primaryjoin='TapirDemographic.country == TapirCountry.digraph', backref='tapir_demographics')


class TapirUsersHot(TapirUser):
    __tablename__ = 'tapir_users_hot'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    last_login: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    second_last_login: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    number_sessions: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())


class TapirUsersPassword(Base):
    __tablename__ = 'tapir_users_password'

    user_id: Mapped[int] = mapped_column(ForeignKey('tapir_users.user_id'), primary_key=True, server_default=FetchedValue())
    password_storage: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    password_enc: Mapped[str] = mapped_column(String(50), nullable=False, server_default=FetchedValue())

    user = relationship('TapirUser')


class DBLaTeXMLDocuments(LaTeXMLBase):
    __tablename__ = 'arXiv_latexml_doc'

    paper_id: Mapped[str] = mapped_column(String(20), primary_key=True)
    document_version: Mapped[intpk]
    # conversion_status codes:
    #   - 0 = in progress
    #   - 1 = success
    #   - 2 = failure
    conversion_status: Mapped[int] = mapped_column(Integer, nullable=False)
    latexml_version: Mapped[str] = mapped_column(String(40), nullable=False)
    tex_checksum: Mapped[Optional[str]]
    conversion_start_time: Mapped[Optional[int]] = mapped_column(Integer)
    conversion_end_time: Mapped[Optional[int]] = mapped_column(Integer)
    publish_dt: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))

class DBLaTeXMLSubmissions (LaTeXMLBase):
    __tablename__ = 'arXiv_latexml_sub'

    submission_id: Mapped[intpk]
    # conversion_status codes: 
    #   - 0 = in progress
    #   - 1 = success
    #   - 2 = failure
    conversion_status: Mapped[int] = mapped_column(Integer, nullable=False)
    latexml_version: Mapped[str] = mapped_column(String(40), nullable=False)
    tex_checksum: Mapped[Optional[str]]
    conversion_start_time: Mapped[Optional[int]]
    conversion_end_time: Mapped[Optional[int]]

class DBLaTeXMLFeedback (LaTeXMLBase):
    __tablename__ = 'feedback'
    
    id: Mapped[str] = mapped_column(String(40), primary_key=True)
    canonical_url: Mapped[Optional[str]]
    conversion_url: Mapped[Optional[str]]
    report_time: Mapped[Optional[int]] = mapped_column(BigInteger)
    browser_info: Mapped[Optional[str]]
    location_low: Mapped[Optional[str]]
    location_high: Mapped[Optional[str]]
    description: Mapped[Optional[str]]
    selected_html: Mapped[Optional[str]]
    initiation_mode: Mapped[Optional[str]]

SessionLocal.configure(binds={
    Base: engine,
    LaTeXMLBase: latexml_engine,
    t_arXiv_stats_hourly: engine,
    t_arXiv_admin_state: engine,
    t_arXiv_bad_pw: engine,
    t_arXiv_black_email: engine,
    t_arXiv_block_email: engine,
    t_arXiv_bogus_subject_class: engine,
    t_arXiv_duplicates: engine,
    t_arXiv_in_category: engine,
    t_arXiv_moderators: engine,
    t_arXiv_ownership_requests_papers: engine,
    t_arXiv_refresh_list: engine,
    t_arXiv_paper_owners: engine,
    t_arXiv_updates_tmp: engine,
    t_arXiv_white_email: engine,
    t_arXiv_xml_notifications: engine,
    t_demographics_backup: engine,
    t_tapir_email_change_tokens_used: engine,
    t_tapir_email_tokens_used: engine,
    t_tapir_error_log: engine,
    t_tapir_no_cookies: engine,
    t_tapir_periodic_tasks_log: engine,
    t_tapir_periodic_tasks_log: engine,
    t_tapir_permanent_tokens_used: engine,
    t_tapir_save_post_variables: engine
})

