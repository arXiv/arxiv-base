"""
*************************************************
DO NOT EDIT WITHOUT CONSULTING THE DOCUMENTATION!
*************************************************

These models represent the entire arXiv DB and the LaTeXML DB.

arxiv/db/models.py was generated by using arxiv/development/db_codegen.py along with arxiv/development/sqlacodegen.

arxiv/db/orig_models.py, arxiv/db/arxiv-db-metadata.yaml are the inputs for the sqlacodegen.

See development/README.md for the details.

If you want to keep the model definition over time, add comment with the intention/reason.
Without it, it may be subjected to removal.

"""

# fake change to test github action

from typing import Optional, Literal, Any, Tuple, List
import re
import hashlib
import datetime as dt
from datetime import datetime, date
from dateutil.tz import gettz, tzutc
from sqlalchemy.dialects.mysql import VARCHAR
from validators import url as is_valid_url

from sqlalchemy import (
    BINARY,
    BigInteger,
    Column,
    Date,
    DateTime,
    Engine,
    Enum,
    ForeignKey,
    ForeignKeyConstraint,
    Index,
    Integer,
    JSON,
    Numeric,
    PrimaryKeyConstraint,
    SmallInteger,
    String,
    TIMESTAMP,
    Table,
    Text,
    func,
    text,
)
from sqlalchemy.schema import FetchedValue
from sqlalchemy.orm import Mapped, mapped_column, relationship

from ..config import settings
from . import Base, LaTeXMLBase, metadata, session_factory, _classic_engine, _latexml_engine

from .types import intpk
from ..document.version import SOURCE_FORMAT

tb_secret = settings.TRACKBACK_SECRET
tz = gettz(settings.ARXIV_BUSINESS_TZ)


class MemberInstitution(Base):
    """Deprecated - superceded by membership_institutions"""

    __tablename__ = "Subscription_UniversalInstitution"
    __table_args__ = {"mysql_charset": "utf8mb3"}
    resolver_URL: Mapped[Optional[str]] = mapped_column(String(255))

    name: Mapped[str] = mapped_column(String(255), nullable=False, index=True)
    label: Mapped[Optional[str]] = mapped_column(String(255))
    id: Mapped[intpk]
    alt_text: Mapped[Optional[str]] = mapped_column(String(255))
    link_icon: Mapped[Optional[str]] = mapped_column(String(255))
    note: Mapped[Optional[str]] = mapped_column(String(255))


class MemberInstitutionContact(Base):
    """Deprecated - superceded by membership_institution_users"""

    __tablename__ = "Subscription_UniversalInstitutionContact"
    __table_args__ = {"mysql_charset": "utf8mb3"}
    email: Mapped[Optional[str]] = mapped_column(String(255))

    sid: Mapped[int] = mapped_column(ForeignKey("Subscription_UniversalInstitution.id", ondelete="CASCADE"), nullable=False, index=True)
    active: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    contact_name: Mapped[Optional[str]] = mapped_column(String(255))
    id: Mapped[intpk]
    phone: Mapped[Optional[str]] = mapped_column(String(255))
    note: Mapped[Optional[str]] = mapped_column(String(2048))

    Subscription_UniversalInstitution: Mapped["MemberInstitution"] = relationship("MemberInstitution", primaryjoin="MemberInstitutionContact.sid == MemberInstitution.id")


class MemberInstitutionIP(Base):
    __tablename__ = "Subscription_UniversalInstitutionIP"
    __table_args__ = (Index("ip", "start", "end"),)

    sid: Mapped[int] = mapped_column(ForeignKey("Subscription_UniversalInstitution.id", ondelete="CASCADE"), nullable=False, index=True)
    id: Mapped[intpk]
    exclude: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    end: Mapped[int] = mapped_column(BigInteger, nullable=False, index=True)
    start: Mapped[int] = mapped_column(BigInteger, nullable=False, index=True)

    Subscription_UniversalInstitution = relationship("MemberInstitution", primaryjoin="MemberInstitutionIP.sid == MemberInstitution.id")


class AdminLog(Base):
    __tablename__ = "arXiv_admin_log"
    __table_args__ = {"mysql_charset": "latin1"}

    id: Mapped[intpk]
    logtime: Mapped[Optional[str]] = mapped_column(String(24))
    created: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=text("CURRENT_TIMESTAMP"))
    paper_id: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    username: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    host: Mapped[Optional[str]] = mapped_column(String(64))
    program: Mapped[Optional[str]] = mapped_column(String(20))
    command: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    logtext: Mapped[Optional[str]] = mapped_column(Text)
    document_id: Mapped[Optional[int]] = mapped_column(Integer)
    submission_id: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    notify: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())

    arXiv_submission_category_proposal: Mapped[List["SubmissionCategoryProposal"]] = relationship(
        "SubmissionCategoryProposal", foreign_keys="[SubmissionCategoryProposal.proposal_comment_id]", back_populates="proposal_comment"
    )
    arXiv_submission_category_proposal_: Mapped[List["SubmissionCategoryProposal"]] = relationship(
        "SubmissionCategoryProposal", foreign_keys="[SubmissionCategoryProposal.response_comment_id]", back_populates="response_comment"
    )
    arXiv_submission_hold_reason: Mapped[List["SubmissionHoldReason"]] = relationship("SubmissionHoldReason", back_populates="comment")


class AdminMetadata(Base):
    __tablename__ = "arXiv_admin_metadata"
    __table_args__ = (Index("arxiv_admin_pidv", "paper_id", "version", unique=True), {"mysql_charset": "latin1"})

    metadata_id: Mapped[int] = mapped_column(Integer, primary_key=True, index=True)
    document_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_documents.document_id", ondelete="CASCADE"), index=True)
    paper_id: Mapped[Optional[str]] = mapped_column(String(64))
    created: Mapped[Optional[datetime]] = mapped_column(DateTime)
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime)
    submitter_name: Mapped[Optional[str]] = mapped_column(String(64))
    submitter_email: Mapped[Optional[str]] = mapped_column(String(64))
    history: Mapped[Optional[str]] = mapped_column(Text)
    source_size: Mapped[Optional[int]] = mapped_column(Integer)
    source_type: Mapped[Optional[str]] = mapped_column(String(12))
    title: Mapped[Optional[str]] = mapped_column(Text)
    authors: Mapped[Optional[str]] = mapped_column(Text)
    category_string: Mapped[Optional[str]] = mapped_column(String(255))
    comments: Mapped[Optional[str]] = mapped_column(Text)
    proxy: Mapped[Optional[str]] = mapped_column(String(255))
    report_num: Mapped[Optional[str]] = mapped_column(Text)
    msc_class: Mapped[Optional[str]] = mapped_column(String(255))
    acm_class: Mapped[Optional[str]] = mapped_column(String(255))
    journal_ref: Mapped[Optional[str]] = mapped_column(Text)
    doi: Mapped[Optional[str]] = mapped_column(String(255))
    abstract: Mapped[Optional[str]] = mapped_column(Text)
    license: Mapped[Optional[str]] = mapped_column(String(255))
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    modtime: Mapped[Optional[int]] = mapped_column(Integer)
    is_current: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())

    document: Mapped["Document"] = relationship("Document", back_populates="arXiv_admin_metadata")


t_arXiv_admin_state = Table(
    "arXiv_admin_state",
    metadata,
    Column("document_id", Integer, unique=True),
    Column("timestamp", DateTime, nullable=False, server_default=FetchedValue()),
    Column("abs_timestamp", Integer),
    Column("src_timestamp", Integer),
    Column("state", Enum("pending", "ok", "bad"), nullable=False, server_default=FetchedValue()),
    Column("admin", String(32)),
    Column("comment", String(255)),
)


class ArchiveCategory(Base):
    __tablename__ = "arXiv_archive_category"
    __table_args__ = {"mysql_charset": "latin1"}

    archive_id: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    category_id: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False)


class ArchiveDef(Base):
    __tablename__ = "arXiv_archive_def"
    __table_args__ = {"mysql_charset": "latin1"}

    archive: Mapped[str] = mapped_column(String(16), primary_key=True, server_default=FetchedValue())
    name: Mapped[Optional[str]] = mapped_column(String(255))


class ArchiveGroup(Base):
    __tablename__ = "arXiv_archive_group"
    __table_args__ = {"mysql_charset": "latin1"}

    archive_id: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    group_id: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())


class Archive(Base):
    __tablename__ = "arXiv_archives"
    __table_args__ = {"mysql_charset": "latin1"}

    archive_id: Mapped[str] = mapped_column(String(16), primary_key=True, server_default=FetchedValue())
    in_group: Mapped[str] = mapped_column(ForeignKey("arXiv_groups.group_id"), nullable=False, index=True, server_default=FetchedValue())
    archive_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    start_date: Mapped[str] = mapped_column(String(4), nullable=False, server_default=FetchedValue())
    end_date: Mapped[str] = mapped_column(String(4), nullable=False, server_default=FetchedValue())
    subdivided: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_categories: Mapped[List["Category"]] = relationship("Category", back_populates="arXiv_archive")

    # additional relation
    arXiv_group = relationship("Group", primaryjoin="Archive.in_group == Group.group_id", back_populates="arXiv_archives")


class AwsConfig(Base):
    __tablename__ = "arXiv_aws_config"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    domain: Mapped[str] = mapped_column(String(75), primary_key=True, nullable=False)
    keyname: Mapped[str] = mapped_column(String(60), primary_key=True, nullable=False)
    value: Mapped[Optional[str]] = mapped_column(String(150))


class AwsFile(Base):
    __tablename__ = "arXiv_aws_files"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    type: Mapped[str] = mapped_column(String(10), nullable=False, index=True, server_default=FetchedValue())
    filename: Mapped[str] = mapped_column(String(100), primary_key=True, server_default=FetchedValue())
    md5sum: Mapped[Optional[str]] = mapped_column(String(50))
    content_md5sum: Mapped[Optional[str]] = mapped_column(String(50))
    size: Mapped[Optional[int]] = mapped_column(Integer)
    timestamp: Mapped[Optional[datetime]] = mapped_column(DateTime)
    yymm: Mapped[Optional[str]] = mapped_column(String(4))
    seq_num: Mapped[Optional[int]] = mapped_column(Integer)
    first_item: Mapped[Optional[str]] = mapped_column(String(20))
    last_item: Mapped[Optional[str]] = mapped_column(String(20))
    num_items: Mapped[Optional[int]] = mapped_column(Integer)


t_arXiv_bad_pw = Table("arXiv_bad_pw", metadata, Column("user_id", ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue()))


class BibFeed(Base):
    __tablename__ = "arXiv_bib_feeds"
    __table_args__ = {"mysql_charset": "latin1"}

    bib_id: Mapped[intpk]
    name: Mapped[str] = mapped_column(String(64), nullable=False, server_default=FetchedValue())
    priority: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    uri: Mapped[Optional[str]] = mapped_column(String(255))
    identifier: Mapped[Optional[str]] = mapped_column(String(255))
    version: Mapped[Optional[str]] = mapped_column(String(255))
    strip_journal_ref: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    concatenate_dupes: Mapped[Optional[int]] = mapped_column(Integer)
    max_updates: Mapped[Optional[int]] = mapped_column(Integer)
    email_errors: Mapped[Optional[str]] = mapped_column(String(255))
    prune_ids: Mapped[Optional[str]] = mapped_column(Text)
    prune_regex: Mapped[Optional[str]] = mapped_column(Text)
    enabled: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())


class BibUpdate(Base):
    __tablename__ = "arXiv_bib_updates"
    __table_args__ = {"mysql_charset": "latin1"}

    update_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    bib_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())
    journal_ref: Mapped[Optional[str]] = mapped_column(Text)
    doi: Mapped[Optional[str]] = mapped_column(Text)


t_arXiv_black_email = Table("arXiv_black_email", metadata, Column("pattern", String(64)))


t_arXiv_block_email = Table("arXiv_block_email", metadata, Column("pattern", String(64)))


class BogusCountries(Base):
    __tablename__ = "arXiv_bogus_countries"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    country_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())


t_arXiv_bogus_subject_class = Table(
    "arXiv_bogus_subject_class",
    metadata,
    Column("document_id", ForeignKey("arXiv_documents.document_id"), nullable=False, index=True, server_default=FetchedValue()),
    Column("category_name", String(255), nullable=False, server_default=FetchedValue()),
)


class Category(Base):
    __tablename__ = "arXiv_categories"
    __table_args__ = {"mysql_charset": "latin1"}

    # link to arXiv_archive
    archive: Mapped[str] = mapped_column(ForeignKey("arXiv_archives.archive_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    definitive: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    active: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    category_name: Mapped[Optional[str]] = mapped_column(String(255))
    endorse_all: Mapped[Literal["y", "n", "d"]] = mapped_column(Enum("y", "n", "d"), nullable=False, server_default=text("'d'"))
    endorse_email: Mapped[Literal["y", "n", "d"]] = mapped_column(Enum("y", "n", "d"), nullable=False, server_default=text("'d'"))
    papers_to_endorse: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    endorsement_domain: Mapped[Optional[str]] = mapped_column(ForeignKey("arXiv_endorsement_domains.endorsement_domain"), index=True)
    arXiv_endorsements: Mapped[List["Endorsement"]] = relationship("Endorsement", back_populates="arXiv_categories")
    arXiv_endorsements = relationship("Endorsement", back_populates="arXiv_categories")

    arXiv_endorsement_domain: Mapped["EndorsementDomain"] = relationship(
        "EndorsementDomain", primaryjoin="Category.endorsement_domain == EndorsementDomain.endorsement_domain", back_populates="arXiv_categories"
    )
    arXiv_endorsement_requests: Mapped[List["EndorsementRequest"]] = relationship("EndorsementRequest", back_populates="arXiv_categories")
    arXiv_endorsement_requests = relationship("EndorsementRequest", back_populates="arXiv_categories")
    arXiv_cross_controls: Mapped[List["CrossControl"]] = relationship("CrossControl", back_populates="arXiv_category")
    arXiv_demographics: Mapped[List["Demographic"]] = relationship("Demographic", back_populates="arXiv_category")

    # link to category
    arXiv_archive = relationship("Archive", primaryjoin="Category.archive == Archive.archive_id", back_populates="arXiv_categories")


class QuestionableCategory(Category):
    __tablename__ = "arXiv_questionable_categories"
    __table_args__ = (ForeignKeyConstraint(["archive", "subject_class"], ["arXiv_categories.archive", "arXiv_categories.subject_class"]), {"mysql_charset": "latin1"})

    archive: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), primary_key=True, nullable=False, server_default=FetchedValue())


class CategoryDef(Base):
    __tablename__ = "arXiv_category_def"
    __table_args__ = {"mysql_charset": "latin1"}

    category: Mapped[str] = mapped_column(String(32), primary_key=True)
    name: Mapped[Optional[str]] = mapped_column(String(255))
    active: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())

    arXiv_document_category: Mapped[List["DocumentCategory"]] = relationship("DocumentCategory", back_populates="arXiv_category_def")
    arXiv_submission_category: Mapped[List["SubmissionCategory"]] = relationship("SubmissionCategory", back_populates="arXiv_category_def")
    arXiv_submission_category_proposal: Mapped[List["SubmissionCategoryProposal"]] = relationship("SubmissionCategoryProposal", back_populates="arXiv_category_def")


class ControlHold(Base):
    __tablename__ = "arXiv_control_holds"
    __table_args__ = (Index("control_id", "control_id", "hold_type", unique=True), {"mysql_charset": "latin1"})

    hold_id: Mapped[intpk]
    control_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    hold_type: Mapped[Literal["submission", "cross", "jref"]] = mapped_column(Enum("submission", "cross", "jref"), nullable=False, index=True, server_default=FetchedValue())
    hold_status: Mapped[Literal["held", "extended", "accepted", "rejected"]] = mapped_column(
        Enum("held", "extended", "accepted", "rejected"), nullable=False, index=True, server_default=FetchedValue()
    )
    hold_reason: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())
    hold_data: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    origin: Mapped[Literal["auto", "user", "admin", "moderator"]] = mapped_column(Enum("auto", "user", "admin", "moderator"), nullable=False, index=True, server_default=FetchedValue())
    placed_by: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id"), index=True)
    last_changed_by: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id"), index=True)

    tapir_users: Mapped["TapirUser"] = relationship("TapirUser", foreign_keys=[last_changed_by], back_populates="arXiv_control_holds")
    tapir_users_: Mapped["TapirUser"] = relationship("TapirUser", foreign_keys=[placed_by], back_populates="arXiv_control_holds_")


class CrossControl(Base):
    __tablename__ = "arXiv_cross_control"
    __table_args__ = (ForeignKeyConstraint(["archive", "subject_class"], ["arXiv_categories.archive", "arXiv_categories.subject_class"]), {"mysql_charset": "latin1"})

    control_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    desired_order: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    status: Mapped[Literal["new", "frozen", "published", "rejected"]] = mapped_column(Enum("new", "frozen", "published", "rejected"), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify: Mapped[Optional[Literal["0", "1"]]] = mapped_column(Enum("0", "1"), server_default=FetchedValue())
    archive: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    request_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    freeze_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category: Mapped["Category"] = relationship(
        "Category", primaryjoin="and_(CrossControl.archive == Category.archive, CrossControl.subject_class == Category.subject_class)", back_populates="arXiv_cross_controls"
    )
    document: Mapped["Document"] = relationship("Document", primaryjoin="CrossControl.document_id == Document.document_id", back_populates="arXiv_cross_controls")
    user: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="CrossControl.user_id == TapirUser.user_id", back_populates="arXiv_cross_controls")


class DataciteDois(Base):
    __tablename__ = "arXiv_datacite_dois"
    __table_args__ = (Index("account_paper_id", "account", "paper_id", unique=True), {"mysql_charset": "latin1"})

    doi: Mapped[str] = mapped_column(String(255), primary_key=True)
    account: Mapped[Optional[Literal["test", "prod"]]] = mapped_column(Enum("test", "prod"))
    metadata_id: Mapped[int] = mapped_column(ForeignKey("arXiv_metadata.metadata_id"), nullable=False, index=True)
    paper_id: Mapped[str] = mapped_column(String(64), nullable=False)
    created: Mapped[Optional[datetime]] = mapped_column(DateTime, server_default=FetchedValue())
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime, server_default=FetchedValue())

    metadata_: Mapped["Metadata"] = relationship("Metadata", back_populates="arXiv_datacite_dois")


class DBLPAuthor(Base):
    __tablename__ = "arXiv_dblp_authors"

    author_id: Mapped[int] = mapped_column(Integer, primary_key=True, unique=True)
    name: Mapped[Optional[str]] = mapped_column(String(40), unique=True)


class DBLPDocumentAuthor(Base):
    __tablename__ = "arXiv_dblp_document_authors"
    __table_args__ = {"mysql_charset": "latin1"}

    # join with document
    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), primary_key=True, nullable=False, index=True)

    # join with author
    author_id: Mapped[int] = mapped_column(ForeignKey("arXiv_dblp_authors.author_id"), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    position: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    # join with dblp author
    author = relationship("DBLPAuthor", primaryjoin="DBLPDocumentAuthor.author_id == DBLPAuthor.author_id", backref="arXiv_dblp_document_authors")

    # join with document
    document = relationship("Document", primaryjoin="DBLPDocumentAuthor.document_id == Document.document_id", backref="arXiv_dblp_document_authors")


class DocumentCategory(Base):
    __tablename__ = "arXiv_document_category"
    __table_args__ = {"mysql_charset": "latin1"}

    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id", ondelete="CASCADE"), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    category: Mapped[str] = mapped_column(ForeignKey("arXiv_category_def.category"), primary_key=True, nullable=False, index=True)
    is_primary: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_category_def: Mapped["CategoryDef"] = relationship("CategoryDef", back_populates="arXiv_document_category")
    document: Mapped["Document"] = relationship("Document", back_populates="arXiv_document_category")


class Document(Base):
    __tablename__ = "arXiv_documents"
    __table_args__ = {"mysql_charset": "latin1"}

    document_id: Mapped[intpk]
    paper_id: Mapped[str] = mapped_column(String(20), nullable=False, unique=True, index=True, server_default=FetchedValue())
    title: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())
    authors: Mapped[Optional[str]] = mapped_column(Text)
    submitter_email: Mapped[str] = mapped_column(String(64), nullable=False, index=True, server_default=FetchedValue())
    submitter_id: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id"), index=True)
    dated: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    primary_subject_class: Mapped[Optional[str]] = mapped_column(String(16))
    created: Mapped[Optional[datetime]] = mapped_column(DateTime)

    # join it with user to get the user info
    submitter = relationship("TapirUser", primaryjoin="Document.submitter_id == TapirUser.user_id", back_populates="arXiv_documents")
    owners = relationship("PaperOwner", back_populates="document")
    arXiv_cross_controls = relationship("CrossControl", back_populates="document")
    arXiv_admin_metadata: Mapped[List["AdminMetadata"]] = relationship("AdminMetadata", back_populates="document")
    arXiv_document_category: Mapped[List["DocumentCategory"]] = relationship("DocumentCategory", back_populates="document")
    arXiv_jref_controls: Mapped[List["JrefControl"]] = relationship("JrefControl", back_populates="document")
    arXiv_metadata: Mapped[List["Metadata"]] = relationship("Metadata", back_populates="document")
    arXiv_mirror_list: Mapped[List["MirrorList"]] = relationship("MirrorList", back_populates="document")
    arXiv_show_email_requests: Mapped[List["ShowEmailRequest"]] = relationship("ShowEmailRequest", back_populates="document")
    arXiv_submission_control: Mapped[List["SubmissionControl"]] = relationship("SubmissionControl", back_populates="document")
    arXiv_submissions: Mapped[List["Submission"]] = relationship("Submission", back_populates="document")
    arXiv_top_papers: Mapped[List["TopPaper"]] = relationship("TopPaper", back_populates="document")
    arXiv_versions: Mapped[List["Version"]] = relationship("Version", back_populates="document")


class DBLP(Document):
    __tablename__ = "arXiv_dblp"
    __table_args__ = {"mysql_charset": "latin1"}

    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), primary_key=True, server_default=FetchedValue())
    url: Mapped[Optional[str]] = mapped_column(String(80))


class PaperPw(Document):
    __tablename__ = "arXiv_paper_pw"
    __table_args__ = {"mysql_charset": "latin1"}

    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), primary_key=True, server_default=FetchedValue())
    password_storage: Mapped[Optional[int]] = mapped_column(Integer)
    password_enc: Mapped[Optional[str]] = mapped_column(String(50))


t_arXiv_duplicates = Table(
    "arXiv_duplicates",
    metadata,
    Column("user_id", ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue()),
    Column("email", String(255)),
    Column("username", String(255)),
)


class EndorsementDomain(Base):
    __tablename__ = "arXiv_endorsement_domains"
    __table_args__ = {"mysql_charset": "latin1"}

    endorsement_domain: Mapped[str] = mapped_column(String(32), primary_key=True, server_default=FetchedValue())
    endorse_all: Mapped[Literal["y", "n"]] = mapped_column(Enum("y", "n"), nullable=False, server_default=FetchedValue())
    mods_endorse_all: Mapped[Literal["y", "n"]] = mapped_column(Enum("y", "n"), nullable=False, server_default=FetchedValue())
    endorse_email: Mapped[Literal["y", "n"]] = mapped_column(Enum("y", "n"), nullable=False, server_default=FetchedValue())
    papers_to_endorse: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_categories: Mapped[List["Category"]] = relationship("Category", back_populates="arXiv_endorsement_domain")


class EndorsementRequest(Base):
    __tablename__ = "arXiv_endorsement_requests"
    __table_args__ = (
        ForeignKeyConstraint(["archive", "subject_class"], ["arXiv_categories.archive", "arXiv_categories.subject_class"]),
        Index("endorsee_id_2", "endorsee_id", "archive", "subject_class", unique=True),
        {"mysql_charset": "latin1"},
    )

    request_id: Mapped[intpk]
    endorsee_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    archive: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(16), nullable=False, unique=True, index=True, server_default=FetchedValue())
    flag_valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    point_value: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    arXiv_categories: Mapped["Category"] = relationship(
        "Category", primaryjoin="and_(EndorsementRequest.archive == Category.archive, EndorsementRequest.subject_class == Category.subject_class)", back_populates="arXiv_endorsement_requests"
    )
    endorsee: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="EndorsementRequest.endorsee_id == TapirUser.user_id", back_populates="arXiv_endorsement_requests", uselist=False)
    endorsement: Mapped["Endorsement"] = relationship("Endorsement", back_populates="request", uselist=False)
    audit = relationship("EndorsementRequestsAudit", uselist=False)
    arXiv_ownership_requests: Mapped[List["OwnershipRequest"]] = relationship("OwnershipRequest", back_populates="endorsement_request")


class EndorsementRequestsAudit(EndorsementRequest):
    __tablename__ = "arXiv_endorsement_requests_audit"
    __table_args__ = {"mysql_charset": "latin1"}

    request_id: Mapped[int] = mapped_column(ForeignKey("arXiv_endorsement_requests.request_id"), primary_key=True, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[Optional[str]] = mapped_column(String(16))
    remote_host: Mapped[Optional[str]] = mapped_column(String(255))
    tracking_cookie: Mapped[Optional[str]] = mapped_column(String(255))


class Endorsement(Base):
    __tablename__ = "arXiv_endorsements"
    __table_args__ = (
        ForeignKeyConstraint(["archive", "subject_class"], ["arXiv_categories.archive", "arXiv_categories.subject_class"]),
        Index("endorser_id_2", "endorser_id", "endorsee_id", "archive", "subject_class", unique=True),
        {"mysql_charset": "latin1"},
    )

    endorsement_id: Mapped[intpk]
    endorser_id: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id"), index=True)
    endorsee_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    archive: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    subject_class: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    flag_valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    type: Mapped[Optional[Literal["user", "admin", "auto"]]] = mapped_column(Enum("user", "admin", "auto"))
    point_value: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    request_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_endorsement_requests.request_id"), index=True)

    arXiv_categories: Mapped["Category"] = relationship("Category", back_populates="arXiv_endorsements")
    endorsee: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="Endorsement.endorsee_id == TapirUser.user_id", back_populates="endorsee_of")
    endorser: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="Endorsement.endorser_id == TapirUser.user_id", back_populates="endorses")
    request: Mapped["EndorsementRequest"] = relationship("EndorsementRequest", back_populates="endorsement")


class EndorsementsAudit(Endorsement):
    __tablename__ = "arXiv_endorsements_audit"
    __table_args__ = {"mysql_charset": "latin1"}

    endorsement_id: Mapped[int] = mapped_column(ForeignKey("arXiv_endorsements.endorsement_id"), primary_key=True, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    flag_knows_personally: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    flag_seen_paper: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    comment: Mapped[Optional[str]] = mapped_column(Text)


class FreezeLog(Base):
    __tablename__ = "arXiv_freeze_log"
    __table_args__ = {"mysql_charset": "latin1"}

    date: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())


class GroupDef(Base):
    __tablename__ = "arXiv_group_def"
    __table_args__ = {"mysql_charset": "latin1"}

    archive_group: Mapped[str] = mapped_column(String(16), primary_key=True, server_default=FetchedValue())
    name: Mapped[Optional[str]] = mapped_column(String(255))


class Group(Base):
    __tablename__ = "arXiv_groups"
    __table_args__ = {"mysql_charset": "latin1"}

    group_id: Mapped[str] = mapped_column(String(16), primary_key=True, server_default=FetchedValue())
    group_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    start_year: Mapped[str] = mapped_column(String(4), nullable=False, server_default=FetchedValue())

    arXiv_archives: Mapped[List["Archive"]] = relationship("Archive", back_populates="arXiv_group")


t_arXiv_in_category = Table(
    "arXiv_in_category",
    metadata,
    Column("document_id", ForeignKey("arXiv_documents.document_id"), nullable=False, index=True, server_default=FetchedValue()),
    Column("archive", String(16), nullable=False, server_default=FetchedValue()),
    Column("subject_class", String(16), nullable=False, server_default=FetchedValue()),
    Column("is_primary", Integer, nullable=False, server_default=FetchedValue()),
    ForeignKeyConstraint(["archive", "subject_class"], ["arXiv_categories.archive", "arXiv_categories.subject_class"]),
    Index("arXiv_in_category_mp", "archive", "subject_class"),
    Index("in_cat_archive", "archive", "subject_class", "document_id", unique=True),
)


class JrefControl(Base):
    __tablename__ = "arXiv_jref_control"
    __table_args__ = (Index("jref_ctrl_document_id", "document_id", "version", unique=True), {"mysql_charset": "latin1"})

    control_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    status: Mapped[Literal["new", "frozen", "published", "rejected"]] = mapped_column(Enum("new", "frozen", "published", "rejected"), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify: Mapped[Optional[Literal["0", "1"]]] = mapped_column(Enum("0", "1"), server_default=FetchedValue())
    jref: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    request_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    freeze_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document: Mapped["Document"] = relationship("Document", back_populates="arXiv_jref_controls")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_jref_controls")


class License(Base):
    __tablename__ = "arXiv_licenses"
    __table_args__ = {"mysql_charset": "latin1"}

    name: Mapped[str] = mapped_column(String(255), primary_key=True)
    label: Mapped[Optional[str]] = mapped_column(String(255))
    active: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    note: Mapped[Optional[str]] = mapped_column(String(400))
    sequence: Mapped[Optional[int]] = mapped_column(Integer)

    arXiv_submissions: Mapped[List["Submission"]] = relationship("Submission", back_populates="arXiv_license")


class LogPosition(Base):
    __tablename__ = "arXiv_log_positions"
    __table_args__ = {"mysql_charset": "latin1"}

    id: Mapped[str] = mapped_column(String(255), primary_key=True, server_default=FetchedValue())
    position: Mapped[Optional[int]] = mapped_column(Integer)
    date: Mapped[Optional[int]] = mapped_column(Integer)


class Metadata(Base):
    __tablename__ = "arXiv_metadata"
    __table_args__ = (Index("pidv", "paper_id", "version", unique=True), {"mysql_charset": "latin1"})

    metadata_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id", ondelete="CASCADE", onupdate="CASCADE"), nullable=False, index=True, server_default=FetchedValue())
    paper_id: Mapped[str] = mapped_column(String(64), nullable=False)
    created: Mapped[Optional[datetime]] = mapped_column(DateTime)
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime)
    submitter_id: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id"), index=True)
    submitter_name: Mapped[str] = mapped_column(String(64), nullable=False)
    submitter_email: Mapped[str] = mapped_column(String(64), nullable=False)
    source_size: Mapped[Optional[int]] = mapped_column(Integer)
    source_format: Mapped[Optional[SOURCE_FORMAT]] = mapped_column(String(12))
    source_flags: Mapped[Optional[str]] = mapped_column(String(12))
    title: Mapped[Optional[str]] = mapped_column(Text)
    authors: Mapped[Optional[str]] = mapped_column(Text)
    abs_categories: Mapped[Optional[str]] = mapped_column(String(255))
    comments: Mapped[Optional[str]] = mapped_column(Text)
    proxy: Mapped[Optional[str]] = mapped_column(String(255))
    report_num: Mapped[Optional[str]] = mapped_column(Text)
    msc_class: Mapped[Optional[str]] = mapped_column(String(255))
    acm_class: Mapped[Optional[str]] = mapped_column(String(255))
    journal_ref: Mapped[Optional[str]] = mapped_column(Text)
    doi: Mapped[Optional[str]] = mapped_column(String(255))
    abstract: Mapped[Optional[str]] = mapped_column(Text)
    license: Mapped[Optional[str]] = mapped_column(ForeignKey("arXiv_licenses.name"), index=True)
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    modtime: Mapped[Optional[int]] = mapped_column(Integer)
    is_current: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    is_withdrawn: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document: Mapped["Document"] = relationship("Document", primaryjoin="Metadata.document_id == Document.document_id", back_populates="arXiv_metadata")
    submitter: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="Metadata.submitter_id == TapirUser.user_id", back_populates="arXiv_metadata")
    arXiv_datacite_dois: Mapped[List["DataciteDois"]] = relationship("DataciteDois", back_populates="metadata_")
    # Link to the license
    arXiv_license = relationship("License", primaryjoin="Metadata.license == License.name", backref="arXiv_metadata")


class MirrorList(Base):
    __tablename__ = "arXiv_mirror_list"
    __table_args__ = {"mysql_charset": "latin1"}

    mirror_list_id: Mapped[intpk]
    created: Mapped[Optional[datetime]] = mapped_column(DateTime)
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime)
    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), nullable=False, index=True, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    write_source: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    write_abs: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    is_written: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document: Mapped["Document"] = relationship("Document", back_populates="arXiv_mirror_list")


class ModeratorApiKey(Base):
    __tablename__ = "arXiv_moderator_api_key"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())

    user: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="ModeratorApiKey.user_id == TapirUser.user_id", back_populates="arXiv_moderator_api_keys")


t_arXiv_moderators = Table(
    "arXiv_moderators",
    metadata,
    Column("user_id", ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue()),
    Column("archive", ForeignKey("arXiv_archive_group.archive_id"), nullable=False, server_default=FetchedValue()),
    Column("subject_class", String(16), nullable=False, server_default=FetchedValue()),
    Column("is_public", Integer, nullable=False, server_default=FetchedValue()),
    Column("no_email", Integer, index=True, server_default=FetchedValue()),
    Column("no_web_email", Integer, index=True, server_default=FetchedValue()),
    Column("no_reply_to", Integer, index=True, server_default=FetchedValue()),
    Column("daily_update", Integer, server_default=FetchedValue()),
    ForeignKeyConstraint(["archive", "subject_class"], ["arXiv_categories.archive", "arXiv_categories.subject_class"]),
    Index("mod_user_id", "archive", "subject_class", "user_id", unique=True),
)


class MonitorKlog(Base):
    __tablename__ = "arXiv_monitor_klog"
    __table_args__ = {"mysql_charset": "latin1"}

    t: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    sent: Mapped[Optional[int]] = mapped_column(Integer)


class MonitorMailq(Base):
    __tablename__ = "arXiv_monitor_mailq"
    __table_args__ = {"mysql_charset": "latin1"}

    t: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    main_q: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_q: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_host_map: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_timeout: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_refused: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    local_in_flight: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class MonitorMailsent(Base):
    __tablename__ = "arXiv_monitor_mailsent"
    __table_args__ = {"mysql_charset": "latin1"}

    t: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    sent: Mapped[Optional[int]] = mapped_column(Integer)


class NextMail(Base):
    __tablename__ = "arXiv_next_mail"
    __table_args__ = (Index("arXiv_next_mail_idx_document_id_version", "document_id", "version"), {"mysql_charset": "latin1"})

    next_mail_id: Mapped[intpk]
    submission_id: Mapped[int] = mapped_column(Integer, nullable=False)
    document_id: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    paper_id: Mapped[Optional[str]] = mapped_column(String(20))
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    type: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    extra: Mapped[Optional[str]] = mapped_column(String(255))
    mail_id: Mapped[Optional[str]] = mapped_column(String(6))
    is_written: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class OrcidConfig(Base):
    __tablename__ = "arXiv_orcid_config"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    domain: Mapped[str] = mapped_column(String(75), primary_key=True, nullable=False)
    keyname: Mapped[str] = mapped_column(String(60), primary_key=True, nullable=False)
    value: Mapped[Optional[str]] = mapped_column(String(150))


t_arXiv_ownership_requests_papers = Table(
    "arXiv_ownership_requests_papers",
    metadata,
    Column("request_id", ForeignKey("arXiv_ownership_requests.request_id"), nullable=False, server_default=FetchedValue()),
    Column("document_id", ForeignKey("arXiv_documents.document_id"), nullable=False, index=True, server_default=FetchedValue()),
    Index("request_id", "request_id", "document_id", unique=True),
)


class OwnershipRequest(Base):
    __tablename__ = "arXiv_ownership_requests"
    __table_args__ = {"mysql_charset": "latin1"}

    request_id: Mapped[intpk]
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    endorsement_request_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_endorsement_requests.request_id"), index=True)
    workflow_status: Mapped[Literal["pending", "accepted", "rejected"]] = mapped_column(Enum("pending", "accepted", "rejected"), nullable=False, server_default=FetchedValue())
    request_audit = relationship("OwnershipRequestsAudit", back_populates="ownership_request", uselist=False)

    endorsement_request: Mapped["EndorsementRequest"] = relationship(
        "EndorsementRequest", primaryjoin="OwnershipRequest.endorsement_request_id == EndorsementRequest.request_id", back_populates="arXiv_ownership_requests"
    )
    user: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="OwnershipRequest.user_id == TapirUser.user_id", back_populates="arXiv_ownership_requests")
    documents = relationship("Document", secondary=t_arXiv_ownership_requests_papers)


class OwnershipRequestsAudit(Base):
    __tablename__ = "arXiv_ownership_requests_audit"
    __table_args__ = {"mysql_charset": "latin1"}

    request_id: Mapped[int] = mapped_column(ForeignKey("arXiv_ownership_requests.request_id"), primary_key=True, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    ownership_request = relationship("OwnershipRequest", primaryjoin="OwnershipRequestsAudit.request_id == OwnershipRequest.request_id", back_populates="request_audit", uselist=False)


class PaperOwner(Base):
    __tablename__ = "arXiv_paper_owners"
    __table_args__ = (PrimaryKeyConstraint("document_id", "user_id"), {"mysql_charset": "latin1"})

    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"))
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"))
    date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    added_by: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=text("'0'"))
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=text("''"))
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=text("''"))
    tracking_cookie: Mapped[str] = mapped_column(String(32), nullable=False, server_default=text("''"))
    valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_author: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_auto: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))

    document: Mapped["Document"] = relationship("Document", back_populates="owners")
    owner = relationship("TapirUser", foreign_keys="[PaperOwner.user_id]", back_populates="owned_papers")


class PaperSession(Base):
    __tablename__ = "arXiv_paper_sessions"
    __table_args__ = {"mysql_charset": "latin1"}

    paper_session_id: Mapped[intpk]
    paper_id: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    start_time: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    end_time: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    ip_name: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())


class PilotFile(Base):
    """arXiv_pilot is deprecated"""

    __tablename__ = "arXiv_pilot_files"
    __table_args__ = {"mysql_charset": "latin1"}

    file_id: Mapped[intpk]
    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id"), nullable=False, index=True)
    filename: Mapped[Optional[str]] = mapped_column(String(256), server_default=FetchedValue())
    entity_url: Mapped[Optional[str]] = mapped_column(String(256))
    description: Mapped[Optional[str]] = mapped_column(String(80))
    byRef: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())

    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_pilot_files")


class PublishLog(Base):
    __tablename__ = "arXiv_publish_log"
    __table_args__ = {"mysql_charset": "latin1"}

    date: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())


t_arXiv_refresh_list = Table("arXiv_refresh_list", metadata, Column("filename", String(255)), Column("mtime", Integer, index=True))


class RejectSessionUsername(Base):
    __tablename__ = "arXiv_reject_session_usernames"
    __table_args__ = {"mysql_charset": "latin1"}

    username: Mapped[str] = mapped_column(String(64), primary_key=True, server_default=FetchedValue())


class SciencewisePing(Base):
    __tablename__ = "arXiv_sciencewise_pings"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    paper_id_v: Mapped[str] = mapped_column(String(32), primary_key=True)
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime)


class ShowEmailRequest(Base):
    __tablename__ = "arXiv_show_email_requests"
    __table_args__ = (Index("email_reqs_user_id", "user_id", "dated"), {"mysql_charset": "latin1"})

    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), nullable=False, index=True, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    dated: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_allowed: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    request_id: Mapped[intpk]

    document: Mapped["Document"] = relationship("Document", back_populates="arXiv_show_email_requests")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_show_email_requests")


class State(Base):
    __tablename__ = "arXiv_state"
    __table_args__ = {"mysql_charset": "latin1"}

    id: Mapped[intpk]
    name: Mapped[Optional[str]] = mapped_column(String(24))
    value: Mapped[Optional[str]] = mapped_column(String(24))


t_arXiv_stats_hourly = Table(
    "arXiv_stats_hourly",
    metadata,
    Column("ymd", Date, nullable=False, index=True),
    Column("hour", Integer, nullable=False, index=True),
    Column("node_num", Integer, nullable=False, index=True),
    Column("access_type", String(1), nullable=False, index=True),
    Column("connections", Integer, nullable=False),
)


class StatsMonthlyDownload(Base):
    __tablename__ = "arXiv_stats_monthly_downloads"
    __table_args__ = {"mysql_charset": "latin1"}

    ym: Mapped[dt.date] = mapped_column(Date, primary_key=True)
    downloads: Mapped[int] = mapped_column(Integer, nullable=False)


class StatsMonthlySubmission(Base):
    __tablename__ = "arXiv_stats_monthly_submissions"
    __table_args__ = {"mysql_charset": "latin1"}

    ym: Mapped[dt.date] = mapped_column(Date, primary_key=True, server_default=FetchedValue())
    num_submissions: Mapped[int] = mapped_column(Integer, nullable=False)
    historical_delta: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class SubmissionAgreement(Base):
    __tablename__ = "arXiv_submission_agreements"
    __table_args__ = {"mysql_charset": "latin1"}

    agreement_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    effective_date: Mapped[Optional[datetime]] = mapped_column(DateTime, server_default=FetchedValue())
    commit_ref: Mapped[str] = mapped_column(String(255), nullable=False)
    content: Mapped[Optional[str]] = mapped_column(Text)

    arXiv_submissions: Mapped[List["Submission"]] = relationship("Submission", back_populates="agreement")


class SubmissionCategory(Base):
    __tablename__ = "arXiv_submission_category"
    __table_args__ = {"mysql_charset": "latin1"}

    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id", ondelete="CASCADE", onupdate="CASCADE"), primary_key=True, nullable=False, index=True)
    category: Mapped[str] = mapped_column(ForeignKey("arXiv_category_def.category"), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    is_primary: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    is_published: Mapped[Optional[int]] = mapped_column(Integer, index=True, server_default=FetchedValue())

    arXiv_category_def: Mapped["CategoryDef"] = relationship("CategoryDef", back_populates="arXiv_submission_category")
    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_submission_category")


class SubmissionCategoryProposal(Base):
    __tablename__ = "arXiv_submission_category_proposal"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    proposal_id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, index=True)
    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id", ondelete="CASCADE", onupdate="CASCADE"), primary_key=True, nullable=False, index=True)
    category: Mapped[str] = mapped_column(ForeignKey("arXiv_category_def.category"), primary_key=True, nullable=False, index=True)
    is_primary: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    proposal_status: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True)
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime)
    proposal_comment_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_admin_log.id"), index=True)
    response_comment_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_admin_log.id"), index=True)

    arXiv_category_def: Mapped["CategoryDef"] = relationship(
        "CategoryDef", primaryjoin="SubmissionCategoryProposal.category == CategoryDef.category", back_populates="arXiv_submission_category_proposal"
    )
    proposal_comment: Mapped["AdminLog"] = relationship("AdminLog", primaryjoin="SubmissionCategoryProposal.proposal_comment_id == AdminLog.id", back_populates="arXiv_submission_category_proposal")
    response_comment: Mapped["AdminLog"] = relationship("AdminLog", primaryjoin="SubmissionCategoryProposal.response_comment_id == AdminLog.id", back_populates="arXiv_submission_category_proposal_")
    submission: Mapped["Submission"] = relationship(
        "Submission", primaryjoin="SubmissionCategoryProposal.submission_id == Submission.submission_id", back_populates="arXiv_submission_category_proposal"
    )
    user: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="SubmissionCategoryProposal.user_id == TapirUser.user_id", back_populates="arXiv_submission_category_proposal")


class SubmissionControl(Base):
    __tablename__ = "arXiv_submission_control"
    __table_args__ = (Index("sub_ctrl_document_id", "document_id", "version", unique=True), {"mysql_charset": "latin1"})

    control_id: Mapped[intpk]
    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    pending_paper_id: Mapped[str] = mapped_column(String(20), nullable=False, index=True, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    status: Mapped[Literal["new", "frozen", "published", "rejected"]] = mapped_column(Enum("new", "frozen", "published", "rejected"), nullable=False, index=True, server_default=FetchedValue())
    flag_must_notify: Mapped[Optional[Literal["0", "1"]]] = mapped_column(Enum("0", "1"), server_default=FetchedValue())
    request_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    freeze_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document: Mapped["Document"] = relationship("Document", back_populates="arXiv_submission_control")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_submission_control")


class SubmissionFlag(Base):
    __tablename__ = "arXiv_submission_flag"
    __table_args__ = (Index("uniq_one_flag_per_mod", "submission_id", "user_id", unique=True), {"mysql_charset": "utf8mb3"})

    flag_id: Mapped[intpk]
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id", ondelete="CASCADE"), nullable=False, index=True, server_default=FetchedValue())
    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id", ondelete="CASCADE"), nullable=False)
    flag: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())

    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_submission_flag")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_submission_flag")


class SubmissionHoldReason(Base):
    __tablename__ = "arXiv_submission_hold_reason"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    reason_id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False)
    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id", ondelete="CASCADE"), nullable=False, index=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id", ondelete="CASCADE"), primary_key=True, nullable=False, index=True)
    reason: Mapped[Optional[str]] = mapped_column(String(30))
    type: Mapped[Optional[str]] = mapped_column(String(30))
    comment_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_admin_log.id"), index=True)

    comment: Mapped["AdminLog"] = relationship("AdminLog", back_populates="arXiv_submission_hold_reason")
    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_submission_hold_reason")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_submission_hold_reason")


class SubmissionNearDuplicate(Base):
    __tablename__ = "arXiv_submission_near_duplicates"
    __table_args__ = (Index("match", "submission_id", "matching_id", unique=True), {"mysql_charset": "utf8mb3"})

    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id", ondelete="CASCADE"), primary_key=True, nullable=False, server_default=FetchedValue())
    matching_id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    similarity: Mapped[float] = mapped_column(Numeric(2, 1), nullable=False)
    last_update: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())

    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_submission_near_duplicates")


class SubmissionQaReport(Base):
    __tablename__ = "arXiv_submission_qa_reports"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    id: Mapped[intpk]
    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id"), nullable=False, index=True)
    report_key_name: Mapped[str] = mapped_column(String(64), nullable=False, index=True)
    created: Mapped[Optional[datetime]] = mapped_column(DateTime, server_default=FetchedValue())
    num_flags: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=FetchedValue())
    report: Mapped[dict] = mapped_column(JSON, nullable=False)
    report_uri: Mapped[Optional[str]] = mapped_column(String(256))

    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_submission_qa_reports")


class SubmissionViewFlag(Base):
    __tablename__ = "arXiv_submission_view_flag"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id", ondelete="CASCADE"), primary_key=True, nullable=False)
    flag: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id", ondelete="CASCADE"), primary_key=True, nullable=False, index=True)
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime)

    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_submission_view_flag")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_submission_view_flag")


class Submission(Base):
    __tablename__ = "arXiv_submissions"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    submission_id: Mapped[intpk]
    document_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_documents.document_id", ondelete="CASCADE", onupdate="CASCADE"), index=True)
    doc_paper_id: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    sword_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_tracking.sword_id"), index=True)
    userinfo: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    is_author: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    agree_policy: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    viewed: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    stage: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    submitter_id: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id", ondelete="CASCADE", onupdate="CASCADE"), index=True)
    submitter_name: Mapped[Optional[str]] = mapped_column(String(64))
    submitter_email: Mapped[Optional[str]] = mapped_column(String(64))
    created: Mapped[Optional[datetime]] = mapped_column(DateTime)
    updated: Mapped[Optional[datetime]] = mapped_column(DateTime)
    status: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    sticky_status: Mapped[Optional[int]] = mapped_column(Integer)
    must_process: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    submit_time: Mapped[Optional[datetime]] = mapped_column(DateTime)
    release_time: Mapped[Optional[datetime]] = mapped_column(DateTime)
    source_size: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    source_format: Mapped[Optional[str]] = mapped_column(String(12))
    source_flags: Mapped[Optional[str]] = mapped_column(String(12))
    has_pilot_data: Mapped[Optional[int]] = mapped_column(Integer)
    is_withdrawn: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    title: Mapped[Optional[str]] = mapped_column(Text)
    authors: Mapped[Optional[str]] = mapped_column(Text)
    comments: Mapped[Optional[str]] = mapped_column(Text)
    proxy: Mapped[Optional[str]] = mapped_column(String(255))
    report_num: Mapped[Optional[str]] = mapped_column(Text)
    msc_class: Mapped[Optional[str]] = mapped_column(String(255))
    acm_class: Mapped[Optional[str]] = mapped_column(String(255))
    journal_ref: Mapped[Optional[str]] = mapped_column(Text)
    doi: Mapped[Optional[str]] = mapped_column(String(255))
    abstract: Mapped[Optional[str]] = mapped_column(Text)
    license: Mapped[Optional[str]] = mapped_column(ForeignKey("arXiv_licenses.name", onupdate="CASCADE"), index=True)
    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    type: Mapped[Optional[str]] = mapped_column(String(8), index=True)
    is_ok: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    admin_ok: Mapped[Optional[int]] = mapped_column(Integer)
    allow_tex_produced: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    is_oversize: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    package: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    rt_ticket_id: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    auto_hold: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    is_locked: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    agreement_id: Mapped[Optional[int]] = mapped_column(ForeignKey("arXiv_submission_agreements.agreement_id"), index=True)

    agreement: Mapped["SubmissionAgreement"] = relationship("SubmissionAgreement", primaryjoin="Submission.agreement_id == SubmissionAgreement.agreement_id", back_populates="arXiv_submissions")
    document: Mapped["Document"] = relationship("Document", primaryjoin="Submission.document_id == Document.document_id", back_populates="arXiv_submissions")
    arXiv_license: Mapped["License"] = relationship("License", primaryjoin="Submission.license == License.name", back_populates="arXiv_submissions")
    submitter: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="Submission.submitter_id == TapirUser.user_id", back_populates="arXiv_submissions")
    sword: Mapped["Tracking"] = relationship("Tracking", primaryjoin="Submission.sword_id == Tracking.sword_id", back_populates="arXiv_submissions")

    # to arxiv check
    arXiv_check_results: Mapped[List["CheckResults"]] = relationship("CheckResults", back_populates="submission")
    # to submission locks
    arXiv_submission_locks: Mapped[List["SubmissionLocks"]] = relationship("SubmissionLocks", back_populates="submission")
    data_version: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=text("'1'"))
    metadata_version: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=text("'1'"))
    data_needed: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=text("'0'"))
    data_version_queued: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=text("'0'"))
    metadata_version_queued: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=text("'0'"))
    data_queued_time: Mapped[Optional[datetime]] = mapped_column(DateTime)
    metadata_queued_time: Mapped[Optional[datetime]] = mapped_column(DateTime)
    arXiv_pilot_files: Mapped[List["PilotFile"]] = relationship("PilotFile", back_populates="submission")
    arXiv_submission_category: Mapped[List["SubmissionCategory"]] = relationship("SubmissionCategory", back_populates="submission")
    arXiv_submission_category_proposal: Mapped[List["SubmissionCategoryProposal"]] = relationship("SubmissionCategoryProposal", back_populates="submission")
    arXiv_submission_flag: Mapped[List["SubmissionFlag"]] = relationship("SubmissionFlag", back_populates="submission")
    arXiv_submission_hold_reason: Mapped[List["SubmissionHoldReason"]] = relationship("SubmissionHoldReason", back_populates="submission")
    arXiv_submission_near_duplicates: Mapped[List["SubmissionNearDuplicate"]] = relationship("SubmissionNearDuplicate", back_populates="submission")
    arXiv_submission_qa_reports: Mapped[List["SubmissionQaReport"]] = relationship("SubmissionQaReport", back_populates="submission")
    arXiv_submission_view_flag: Mapped[List["SubmissionViewFlag"]] = relationship("SubmissionViewFlag", back_populates="submission")


class PilotDataset(Submission):
    """arXiv_pilot is deprecated"""

    __tablename__ = "arXiv_pilot_datasets"
    __table_args__ = {"mysql_charset": "latin1"}

    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id"), primary_key=True)
    numfiles: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    feed_url: Mapped[Optional[str]] = mapped_column(String(256))
    manifestation: Mapped[Optional[str]] = mapped_column(String(256))
    published: Mapped[Optional[int]] = mapped_column(Integer, server_default=FetchedValue())
    # created: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    # ^This column is inherited
    last_checked: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class SubmissionAbsClassifierDatum(Base):
    __tablename__ = "arXiv_submission_abs_classifier_data"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id", ondelete="CASCADE"), primary_key=True, server_default=FetchedValue())
    json: Mapped[Optional[str]] = mapped_column(Text)
    last_update: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())
    status: Mapped[Optional[Literal["processing", "success", "failed", "no connection"]]] = mapped_column(Enum("processing", "success", "failed", "no connection"))
    message: Mapped[Optional[str]] = mapped_column(Text)
    is_oversize: Mapped[Optional[int]] = mapped_column(Integer, server_default=text("'0'"))
    suggested_primary: Mapped[Optional[str]] = mapped_column(Text)
    suggested_reason: Mapped[Optional[str]] = mapped_column(Text)
    autoproposal_primary: Mapped[Optional[str]] = mapped_column(Text)
    autoproposal_reason: Mapped[Optional[str]] = mapped_column(Text)
    classifier_service_version: Mapped[Optional[str]] = mapped_column(Text)
    classifier_model_version: Mapped[Optional[str]] = mapped_column(Text)


class SubmissionClassifierDatum(Base):
    __tablename__ = "arXiv_submission_classifier_data"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id", ondelete="CASCADE"), primary_key=True, server_default=FetchedValue())
    json: Mapped[Optional[str]] = mapped_column(Text)
    last_update: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())
    status: Mapped[Optional[Literal["processing", "success", "failed", "no connection"]]] = mapped_column(Enum("processing", "success", "failed", "no connection"))
    message: Mapped[Optional[str]] = mapped_column(Text)
    is_oversize: Mapped[Optional[int]] = mapped_column(Integer, server_default=text("'0'"))


class SubmitterFlag(Base):
    __tablename__ = "arXiv_submitter_flags"
    __table_args__ = {"mysql_charset": "latin1"}

    flag_id: Mapped[intpk]
    comment: Mapped[Optional[str]] = mapped_column(String(255))
    pattern: Mapped[Optional[str]] = mapped_column(String(255))


class SuspectEmail(Base):
    __tablename__ = "arXiv_suspect_emails"
    __table_args__ = {"mysql_charset": "latin1"}

    id: Mapped[intpk]
    type: Mapped[str] = mapped_column(String(10), nullable=False)
    pattern: Mapped[str] = mapped_column(Text, nullable=False)
    comment: Mapped[str] = mapped_column(Text, nullable=False)
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class Title(Base):
    __tablename__ = "arXiv_titles"
    __table_args__ = {"mysql_charset": "latin1"}

    paper_id: Mapped[str] = mapped_column(String(64), primary_key=True)
    title: Mapped[Optional[str]] = mapped_column(String(255), index=True)
    report_num: Mapped[Optional[str]] = mapped_column(String(255), index=True)
    date: Mapped[Optional[dt.date]] = mapped_column(Date)


class TopPaper(Base):
    __tablename__ = "arXiv_top_papers"
    __table_args__ = {"mysql_charset": "latin1"}

    from_week: Mapped[dt.date] = mapped_column(Date, primary_key=True, nullable=False, server_default=FetchedValue())
    _class: Mapped[str] = mapped_column("class", String(1), primary_key=True, nullable=False, server_default=FetchedValue())
    rank: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), nullable=False, index=True, server_default=FetchedValue())
    viewers: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document: Mapped["Document"] = relationship("Document", primaryjoin="TopPaper.document_id == Document.document_id", back_populates="arXiv_top_papers")


class TrackbackPing(Base):
    __tablename__ = "arXiv_trackback_pings"
    __table_args__ = {"mysql_charset": "latin1"}

    trackback_id: Mapped[intpk]
    document_id: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    title: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    excerpt: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    url: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())
    blog_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    remote_addr: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    posted_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    is_stale: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    approved_by_user: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    approved_time: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    status: Mapped[Literal["pending", "pending2", "accepted", "rejected", "spam"]] = mapped_column(
        Enum("pending", "pending2", "accepted", "rejected", "spam"), nullable=False, index=True, server_default=FetchedValue()
    )
    site_id: Mapped[Optional[int]] = mapped_column(Integer)

    @property
    def posted_datetime(self) -> DateTime:
        """Get posted_date as UTC datetime."""
        dt = datetime.fromtimestamp(self.posted_date, tz=tz)
        return dt.astimezone(tz=tzutc())

    @property
    def display_url(self) -> str:
        """Get the URL without the protocol, for display."""
        return str(
            re.sub(
                r"^[a-z]+:\/\/",
                "",
                self.url.strip(),
                flags=re.IGNORECASE,
            )
        )

    @property
    def has_valid_url(self) -> bool:
        """Determine whether the trackback URL is valid."""
        return bool(is_valid_url(self.url, public=False))

    # TODO: Make settings for base so we can import them like everyone else does
    # Then I'll include the trackback secret
    @property
    def hashed_document_id(self) -> str:
        """Get the hashed document_id."""
        s = f"{self.document_id}{self.trackback_id}{tb_secret}"
        return hashlib.md5(s.encode()).hexdigest()[0:9]


class TrackbackSite(Base):
    __tablename__ = "arXiv_trackback_sites"
    __table_args__ = {"mysql_charset": "latin1"}

    pattern: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())
    site_id: Mapped[intpk]
    action: Mapped[Literal["neutral", "accept", "reject", "spam"]] = mapped_column(Enum("neutral", "accept", "reject", "spam"), nullable=False, server_default=FetchedValue())


class Tracking(Base):
    __tablename__ = "arXiv_tracking"
    __table_args__ = {"mysql_charset": "latin1"}

    tracking_id: Mapped[intpk]
    sword_id: Mapped[int] = mapped_column(Integer, nullable=False, unique=True, index=True, server_default=FetchedValue())
    paper_id: Mapped[str] = mapped_column(String(32), nullable=False)
    submission_errors: Mapped[Optional[str]] = mapped_column(Text)
    timestamp: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())

    arXiv_submissions: Mapped[List["Submission"]] = relationship("Submission", back_populates="sword")


class Updates(Base):
    __tablename__ = "arXiv_updates"
    __table_args__ = (PrimaryKeyConstraint("document_id", "date", "action", "category"), {"mysql_charset": "latin1"})

    # primary key is foregn key
    document_id: Mapped[Optional[int]] = mapped_column(
        ForeignKey("arXiv_documents.document_id", ondelete="CASCADE", onupdate="CASCADE"),
        index=True,
        server_default=text("'0'"),
    )

    version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    date: Mapped[Optional[dt.date]] = mapped_column(Date, index=True)
    action: Mapped[Optional[Literal["new", "replace", "absonly", "cross", "repcro"]]] = mapped_column(Enum("new", "replace", "absonly", "cross", "repcro"))
    archive: Mapped[Optional[str]] = mapped_column(String(20), index=True)
    category: Mapped[Optional[str]] = mapped_column(String(20), index=True)

    def __repr__(self) -> str:
        return f"Update(document_id={self.document_id}, version={self.version}, action={self.action}, date={self.date}, category={self.category}, archive={self.archive})"


t_arXiv_updates_tmp = Table(
    "arXiv_updates_tmp",
    metadata,
    Column("document_id", Integer),
    Column("date", Date),
    Column("action", Enum("new", "replace", "absonly", "cross", "repcro")),
    Column("category", String(20)),
    Index("updates_temp_document_id", "document_id", "date", "action", "category"),
)


class Version(Base):
    __tablename__ = "arXiv_versions"
    __table_args__ = {"mysql_charset": "latin1"}

    document_id: Mapped[int] = mapped_column(ForeignKey("arXiv_documents.document_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    request_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    freeze_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    publish_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    flag_current: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    document: Mapped["Document"] = relationship("Document", back_populates="arXiv_versions")


class VersionsChecksum(Version):
    __tablename__ = "arXiv_versions_checksum"
    __table_args__ = (ForeignKeyConstraint(["document_id", "version"], ["arXiv_versions.document_id", "arXiv_versions.version"]), {"mysql_charset": "latin1"})

    document_id: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    version: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, server_default=FetchedValue())
    flag_abs_present: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    abs_size: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    abs_md5sum: Mapped[Optional[bytes]] = mapped_column(BINARY(16), index=True)
    flag_src_present: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    src_size: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    src_md5sum: Mapped[Optional[bytes]] = mapped_column(BINARY(16), index=True)


t_arXiv_white_email = Table("arXiv_white_email", metadata, Column("pattern", String(64), unique=True, index=True))


t_arXiv_xml_notifications = Table(
    "arXiv_xml_notifications",
    metadata,
    Column("control_id", Integer, index=True),
    Column("type", Enum("submission", "cross", "jref")),
    Column("queued_date", Integer, nullable=False, server_default=FetchedValue()),
    Column("sent_date", Integer, nullable=False, server_default=FetchedValue()),
    Column("status", Enum("unsent", "sent", "failed"), index=True),
)


class DbixClassSchemaVersion(Base):
    __tablename__ = "dbix_class_schema_versions"
    __table_args__ = {"mysql_charset": "latin1"}

    version: Mapped[str] = mapped_column(String(10), primary_key=True)
    installed: Mapped[str] = mapped_column(String(20), nullable=False)


t_demographics_backup = Table(
    "demographics_backup",
    metadata,
    Column("user_id", Integer, nullable=False, server_default=FetchedValue()),
    Column("country", String(2), nullable=False, server_default=FetchedValue()),
    Column("affiliation", String(255), nullable=False, server_default=FetchedValue()),
    Column("url", String(255), nullable=False, server_default=FetchedValue()),
    Column("type", Integer),
    Column("os", Integer),
    Column("archive", String(16)),
    Column("subject_class", String(16)),
    Column("original_subject_classes", String(255), nullable=False, server_default=FetchedValue()),
    Column("flag_group_physics", Integer),
    Column("flag_group_math", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_group_cs", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_group_nlin", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_proxy", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_journal", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_xml", Integer, nullable=False, server_default=FetchedValue()),
    Column("dirty", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_group_test", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_suspect", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_group_q_bio", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_no_upload", Integer, nullable=False, server_default=FetchedValue()),
    Column("flag_no_endorse", Integer, nullable=False, server_default=FetchedValue()),
    Column("veto_status", Enum("ok", "no-endorse", "no-upload"), server_default=FetchedValue()),
)


class Session(Base):
    __tablename__ = "sessions"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    id: Mapped[str] = mapped_column(String(72), primary_key=True)
    session_data: Mapped[Optional[str]] = mapped_column(Text)
    expires: Mapped[Optional[int]] = mapped_column(Integer)


class TapirAddress(Base):
    __tablename__ = "tapir_address"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    address_type: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    company: Mapped[str] = mapped_column(String(80), nullable=False, server_default=FetchedValue())
    line1: Mapped[str] = mapped_column(String(80), nullable=False, server_default=FetchedValue())
    line2: Mapped[str] = mapped_column(String(80), nullable=False, server_default=FetchedValue())
    city: Mapped[str] = mapped_column(String(50), nullable=False, index=True, server_default=FetchedValue())
    state: Mapped[str] = mapped_column(String(50), nullable=False, server_default=FetchedValue())
    postal_code: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    country: Mapped[str] = mapped_column(ForeignKey("tapir_countries.digraph"), nullable=False, index=True, server_default=FetchedValue())
    share_addr: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    tapir_country: Mapped["TapirCountry"] = relationship("TapirCountry", primaryjoin="TapirAddress.country == TapirCountry.digraph", back_populates="tapir_address")
    user: Mapped["TapirUser"] = relationship("TapirUser", primaryjoin="TapirAddress.user_id == TapirUser.user_id", back_populates="tapir_address")


class TapirAdminAudit(Base):
    __tablename__ = "tapir_admin_audit"
    __table_args__ = {"mysql_charset": "latin1"}

    log_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    session_id: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_sessions.session_id"), index=True)
    ip_addr: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    admin_user: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id"), index=True)
    affected_user: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    action: Mapped[str] = mapped_column(String(32), nullable=False, server_default=FetchedValue())
    data: Mapped[str] = mapped_column(String(255))
    comment: Mapped[str] = mapped_column(Text, nullable=False)
    entry_id: Mapped[intpk]

    tapir_users: Mapped["TapirUser"] = relationship("TapirUser", foreign_keys=[admin_user], back_populates="tapir_admin_audit")
    tapir_users_: Mapped["TapirUser"] = relationship("TapirUser", foreign_keys=[affected_user], back_populates="tapir_admin_audit_")
    session: Mapped["TapirSession"] = relationship("TapirSession", back_populates="tapir_admin_audit")


class TapirCountry(Base):
    __tablename__ = "tapir_countries"
    __table_args__ = {"mysql_charset": "latin1"}

    digraph: Mapped[str] = mapped_column(String(2), primary_key=True, server_default=FetchedValue())
    country_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    rank: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    tapir_address: Mapped[List["TapirAddress"]] = relationship("TapirAddress", back_populates="tapir_country")
    tapir_demographics: Mapped[List["TapirDemographic"]] = relationship("TapirDemographic", back_populates="tapir_country")


class TapirEmailChangeToken(Base):
    __tablename__ = "tapir_email_change_tokens"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    old_email: Mapped[Optional[str]] = mapped_column(String(255))
    new_email: Mapped[Optional[str]] = mapped_column(String(255))
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    tapir_dest: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    used: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    consumed_when: Mapped[Optional[int]] = mapped_column(Integer)
    consumed_from: Mapped[Optional[str]] = mapped_column(String(16))

    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="tapir_email_change_tokens")


t_tapir_email_change_tokens_used = Table(
    "tapir_email_change_tokens_used",
    metadata,
    Column("user_id", ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue()),
    Column("secret", String(32), nullable=False, server_default=FetchedValue()),
    Column("used_when", Integer, nullable=False, server_default=FetchedValue()),
    Column("used_from", String(16), nullable=False, server_default=FetchedValue()),
    Column("remote_host", String(255), nullable=False, server_default=FetchedValue()),
    Column("session_id", ForeignKey("tapir_sessions.session_id"), nullable=False, index=True, server_default=FetchedValue()),
)


class TapirEmailHeader(Base):
    __tablename__ = "tapir_email_headers"
    __table_args__ = {"mysql_charset": "latin1"}

    template_id: Mapped[int] = mapped_column(ForeignKey("tapir_email_templates.template_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    header_name: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    header_content: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())

    template: Mapped["TapirEmailTemplate"] = relationship("TapirEmailTemplate", back_populates="tapir_email_headers")


class TapirEmailLog(Base):
    __tablename__ = "tapir_email_log"
    __table_args__ = {"mysql_charset": "latin1"}

    mail_id: Mapped[intpk]
    reference_type: Mapped[Optional[str]] = mapped_column(String(1))
    reference_id: Mapped[Optional[int]] = mapped_column(Integer)
    sent_date: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    email: Mapped[Optional[str]] = mapped_column(String(255))
    flag_bounced: Mapped[Optional[int]] = mapped_column(Integer)
    mailing_id: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    template_id: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class TapirEmailMailing(Base):
    __tablename__ = "tapir_email_mailings"
    __table_args__ = {"mysql_charset": "latin1"}

    mailing_id: Mapped[intpk]
    template_id: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_email_templates.template_id"), index=True)
    created_by: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id"), index=True)
    sent_by: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_users.user_id"), index=True)
    created_date: Mapped[Optional[int]] = mapped_column(Integer)
    sent_date: Mapped[Optional[int]] = mapped_column(Integer)
    complete_date: Mapped[Optional[int]] = mapped_column(Integer)
    mailing_name: Mapped[Optional[str]] = mapped_column(String(255))
    comment: Mapped[Optional[str]] = mapped_column(Text)

    tapir_users: Mapped["TapirUser"] = relationship("TapirUser", foreign_keys=[created_by], back_populates="tapir_email_mailings")
    tapir_users_: Mapped["TapirUser"] = relationship("TapirUser", foreign_keys=[sent_by], back_populates="tapir_email_mailings_")
    template: Mapped["TapirEmailTemplate"] = relationship("TapirEmailTemplate", back_populates="tapir_email_mailings")


class TapirEmailTemplate(Base):
    __tablename__ = "tapir_email_templates"
    __table_args__ = (Index("short_name", "short_name", "lang", unique=True), {"mysql_charset": "latin1"})

    template_id: Mapped[intpk]
    short_name: Mapped[str] = mapped_column(String(32), nullable=False, server_default=FetchedValue())
    lang: Mapped[str] = mapped_column(String(2), nullable=False, server_default=FetchedValue())
    long_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    data: Mapped[str] = mapped_column(Text, nullable=False)
    sql_statement: Mapped[str] = mapped_column(Text, nullable=False)
    update_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    created_by: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    updated_by: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue())
    workflow_status: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    flag_system: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    tapir_users: Mapped["TapirUser"] = relationship("TapirUser", foreign_keys=[created_by], back_populates="tapir_email_templates")
    tapir_users_: Mapped["TapirUser"] = relationship("TapirUser", foreign_keys=[updated_by], back_populates="tapir_email_templates_")
    tapir_email_headers: Mapped[List["TapirEmailHeader"]] = relationship("TapirEmailHeader", back_populates="template")
    tapir_email_mailings: Mapped[List["TapirEmailMailing"]] = relationship("TapirEmailMailing", back_populates="template")


class TapirEmailToken(Base):
    __tablename__ = "tapir_email_tokens"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    tapir_dest: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    wants_perm_token: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="tapir_email_tokens")


t_tapir_email_tokens_used = Table(
    "tapir_email_tokens_used",
    metadata,
    Column("user_id", ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=FetchedValue()),
    Column("secret", String(32), nullable=False, server_default=FetchedValue()),
    Column("used_when", Integer, nullable=False, server_default=FetchedValue()),
    Column("used_from", String(16), nullable=False, server_default=FetchedValue()),
    Column("remote_host", String(255), nullable=False, server_default=FetchedValue()),
    Column("session_id", ForeignKey("tapir_sessions.session_id"), nullable=False, index=True, server_default=FetchedValue()),
)


t_tapir_error_log = Table(
    "tapir_error_log",
    metadata,
    Column("error_date", Integer, nullable=False, index=True, server_default=FetchedValue()),
    Column("user_id", Integer, index=True),
    Column("session_id", Integer, index=True),
    Column("ip_addr", String(16), nullable=False, index=True, server_default=FetchedValue()),
    Column("remote_host", String(255), nullable=False, server_default=FetchedValue()),
    Column("tracking_cookie", String(32), nullable=False, index=True, server_default=FetchedValue()),
    Column("message", String(32), nullable=False, index=True, server_default=FetchedValue()),
    Column("url", String(255), nullable=False, server_default=FetchedValue()),
    Column("error_url", String(255), nullable=False, server_default=FetchedValue()),
)


class TapirIntegerVariable(Base):
    __tablename__ = "tapir_integer_variables"
    __table_args__ = {"mysql_charset": "latin1"}

    variable_id: Mapped[str] = mapped_column(String(32), primary_key=True, server_default=FetchedValue())
    value: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class TapirNickname(Base):
    __tablename__ = "tapir_nicknames"
    __table_args__ = (Index("user_id", "user_id", "user_seq", unique=True), {"mysql_charset": "latin1"})

    nick_id: Mapped[intpk]
    nickname: Mapped[str] = mapped_column(String(20), nullable=False, unique=True, index=True, server_default=FetchedValue())
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, server_default=FetchedValue())
    user_seq: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_valid: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    role: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    policy: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_primary: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))

    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="tapir_nicknames")


class TapirNicknamesAudit(Base):
    __tablename__ = "tapir_nicknames_audit"

    nick_id: Mapped[int] = mapped_column(Integer, primary_key=True, server_default=FetchedValue())
    creation_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    creation_ip_num: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())


t_tapir_no_cookies = Table(
    "tapir_no_cookies",
    metadata,
    Column("log_date", Integer, nullable=False, server_default=FetchedValue()),
    Column("ip_addr", String(16), nullable=False, server_default=FetchedValue()),
    Column("remote_host", String(255), nullable=False, server_default=FetchedValue()),
    Column("tracking_cookie", String(255), nullable=False, server_default=FetchedValue()),
    Column("session_data", String(255), nullable=False, server_default=FetchedValue()),
    Column("user_agent", String(255), nullable=False, server_default=FetchedValue()),
)


t_tapir_periodic_tasks_log = Table("tapir_periodic_tasks_log", metadata, Column("t", Integer, nullable=False, index=True, server_default=FetchedValue()), Column("entry", Text))


class TapirPermanentToken(Base):
    __tablename__ = "tapir_permanent_tokens"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    session_id: Mapped[int] = mapped_column(ForeignKey("tapir_sessions.session_id"), nullable=False, index=True, server_default=FetchedValue())

    session: Mapped["TapirSession"] = relationship("TapirSession", back_populates="tapir_permanent_tokens")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="tapir_permanent_tokens")


t_tapir_permanent_tokens_used = Table(
    "tapir_permanent_tokens_used",
    metadata,
    Column("user_id", ForeignKey("tapir_users.user_id"), index=True),
    Column("secret", String(32), nullable=False, server_default=FetchedValue()),
    Column("used_when", Integer),
    Column("used_from", String(16)),
    Column("remote_host", String(255), nullable=False, server_default=FetchedValue()),
    Column("session_id", ForeignKey("tapir_sessions.session_id"), nullable=False, index=True, server_default=FetchedValue()),
)


class TapirPhone(Base):
    __tablename__ = "tapir_phone"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    phone_type: Mapped[int] = mapped_column(Integer, primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    phone_number: Mapped[Optional[str]] = mapped_column(String(32), index=True)
    share_phone: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="tapir_phone")


class TapirPolicyClass(Base):
    __tablename__ = "tapir_policy_classes"
    __table_args__ = {"mysql_charset": "latin1"}

    class_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(64), nullable=False, server_default=FetchedValue())
    description: Mapped[str] = mapped_column(Text, nullable=False)
    password_storage: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    recovery_policy: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    permanent_login: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())

    tapir_users: Mapped[List["TapirUser"]] = relationship("TapirUser", back_populates="tapir_policy_classes")

    ADMIN = 1
    PUBLIC_USER = 2
    LEGACY_USER = 3
    POLICY_CLASSES = [
        {"name": "Administrator", "class_id": ADMIN, "description": "", "password_storage": 2, "recovery_policy": 3, "permanent_login": 1},
        {"name": "Public user", "class_id": PUBLIC_USER, "description": "", "password_storage": 2, "recovery_policy": 3, "permanent_login": 1},
        {"name": "Legacy user", "class_id": LEGACY_USER, "description": "", "password_storage": 2, "recovery_policy": 3, "permanent_login": 1},
    ]


class TapirPresession(Base):
    __tablename__ = "tapir_presessions"
    __table_args__ = {"mysql_charset": "latin1"}

    presession_id: Mapped[intpk]
    ip_num: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    created_at: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class TapirRecoveryToken(Base):
    __tablename__ = "tapir_recovery_tokens"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, index=True, server_default=FetchedValue())
    valid: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    tapir_dest: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    issued_when: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    issued_to: Mapped[str] = mapped_column(String(16), nullable=False, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())

    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="tapir_recovery_tokens")


class TapirRecoveryTokensUsed(Base):
    __tablename__ = "tapir_recovery_tokens_used"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, nullable=False, server_default=FetchedValue())
    secret: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    used_when: Mapped[Optional[int]] = mapped_column(Integer)
    used_from: Mapped[Optional[str]] = mapped_column(String(16))
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    session_id: Mapped[Optional[int]] = mapped_column(ForeignKey("tapir_sessions.session_id"), index=True)

    session: Mapped["TapirSession"] = relationship("TapirSession", back_populates="tapir_recovery_tokens_used")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="tapir_recovery_tokens_used")


t_tapir_save_post_variables = Table(
    "tapir_save_post_variables",
    metadata,
    Column("presession_id", ForeignKey("tapir_presessions.presession_id"), nullable=False, index=True, server_default=FetchedValue()),
    Column("name", String(255)),
    Column("value", Text, nullable=False),
    Column("seq", Integer, nullable=False, server_default=FetchedValue()),
)


class TapirSession(Base):
    __tablename__ = "tapir_sessions"
    __table_args__ = {"mysql_charset": "latin1"}

    session_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True, server_default=text("'0'"))
    last_reissue: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    start_time: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    end_time: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))

    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="tapir_sessions")
    user = relationship("TapirUser", primaryjoin="TapirSession.user_id == TapirUser.user_id", back_populates="tapir_sessions")
    tapir_admin_audit: Mapped[List["TapirAdminAudit"]] = relationship("TapirAdminAudit", back_populates="session")
    tapir_permanent_tokens: Mapped[List["TapirPermanentToken"]] = relationship("TapirPermanentToken", back_populates="session")
    tapir_recovery_tokens_used: Mapped[List["TapirRecoveryTokensUsed"]] = relationship("TapirRecoveryTokensUsed", back_populates="session")


class TapirSessionsAudit(Base):
    __tablename__ = "tapir_sessions_audit"
    __table_args__ = {"mysql_charset": "latin1"}

    session_id: Mapped[int] = mapped_column(ForeignKey("tapir_sessions.session_id"), primary_key=True, server_default=text("'0'"))
    ip_addr: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())
    remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=FetchedValue())

    session = relationship("TapirSession")


class TapirStringVariable(Base):
    __tablename__ = "tapir_string_variables"
    __table_args__ = {"mysql_charset": "latin1"}

    variable_id: Mapped[str] = mapped_column(String(32), primary_key=True, server_default=FetchedValue())
    value: Mapped[str] = mapped_column(Text, nullable=False)


class TapirString(Base):
    __tablename__ = "tapir_strings"
    __table_args__ = {"mysql_charset": "latin1"}

    name: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    module: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    language: Mapped[str] = mapped_column(String(32), primary_key=True, nullable=False, server_default=FetchedValue())
    string: Mapped[str] = mapped_column(Text, nullable=False)


class TapirUser(Base):
    __tablename__ = "tapir_users"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[intpk]
    first_name: Mapped[Optional[str]] = mapped_column(String(50), index=True)
    last_name: Mapped[Optional[str]] = mapped_column(String(50), index=True)
    suffix_name: Mapped[Optional[str]] = mapped_column(String(50))
    share_first_name: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    share_last_name: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    email: Mapped[str] = mapped_column(String(255), nullable=False, unique=True, index=True, server_default=text("''"))
    share_email: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'8'"))
    email_bouncing: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    policy_class: Mapped[int] = mapped_column(ForeignKey("tapir_policy_classes.class_id"), nullable=False, index=True, server_default=text("'0'"))
    joined_date: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    joined_ip_num: Mapped[Optional[str]] = mapped_column(String(16), index=True)
    joined_remote_host: Mapped[str] = mapped_column(String(255), nullable=False, server_default=text("''"))
    flag_internal: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_edit_users: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_edit_system: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_email_verified: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_approved: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'1'"))
    flag_deleted: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_banned: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_wants_email: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_html_email: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    tracking_cookie: Mapped[str] = mapped_column(String(255), nullable=False, index=True, server_default=text("''"))
    flag_allow_tex_produced: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_can_lock: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))

    tapir_policy_classes: Mapped["TapirPolicyClass"] = relationship("TapirPolicyClass", back_populates="tapir_users")
    arXiv_control_holds: Mapped[List["ControlHold"]] = relationship("ControlHold", foreign_keys="[ControlHold.last_changed_by]", back_populates="tapir_users")
    arXiv_control_holds_: Mapped[List["ControlHold"]] = relationship("ControlHold", foreign_keys="[ControlHold.placed_by]", back_populates="tapir_users_")
    arXiv_documents: Mapped[List["Document"]] = relationship("Document", back_populates="submitter")
    arXiv_moderator_api_keys: Mapped[List["ModeratorApiKey"]] = relationship("ModeratorApiKey", back_populates="user")
    tapir_address: Mapped[List["TapirAddress"]] = relationship("TapirAddress", back_populates="user")
    tapir_email_change_tokens: Mapped[List["TapirEmailChangeToken"]] = relationship("TapirEmailChangeToken", back_populates="user")
    tapir_email_templates: Mapped[List["TapirEmailTemplate"]] = relationship("TapirEmailTemplate", foreign_keys="[TapirEmailTemplate.created_by]", back_populates="tapir_users")
    tapir_email_templates_: Mapped[List["TapirEmailTemplate"]] = relationship("TapirEmailTemplate", foreign_keys="[TapirEmailTemplate.updated_by]", back_populates="tapir_users_")
    tapir_email_tokens: Mapped[List["TapirEmailToken"]] = relationship("TapirEmailToken", back_populates="user")
    tapir_nicknames: Mapped[List["TapirNickname"]] = relationship("TapirNickname", back_populates="user")
    tapir_phone: Mapped[List["TapirPhone"]] = relationship("TapirPhone", back_populates="user")
    tapir_recovery_tokens: Mapped[List["TapirRecoveryToken"]] = relationship("TapirRecoveryToken", back_populates="user")
    tapir_sessions: Mapped[List["TapirSession"]] = relationship("TapirSession", back_populates="user")
    arXiv_cross_controls: Mapped[List["CrossControl"]] = relationship("CrossControl", back_populates="user")
    arXiv_endorsement_requests: Mapped[List["EndorsementRequest"]] = relationship("EndorsementRequest", back_populates="endorsee")
    arXiv_jref_controls: Mapped[List["JrefControl"]] = relationship("JrefControl", back_populates="user")
    arXiv_metadata: Mapped[List["Metadata"]] = relationship("Metadata", back_populates="submitter")
    arXiv_show_email_requests: Mapped[List["ShowEmailRequest"]] = relationship("ShowEmailRequest", back_populates="user")
    arXiv_submission_control: Mapped[List["SubmissionControl"]] = relationship("SubmissionControl", back_populates="user")
    arXiv_submissions: Mapped[List["Submission"]] = relationship("Submission", back_populates="submitter")
    tapir_admin_audit: Mapped[List["TapirAdminAudit"]] = relationship("TapirAdminAudit", foreign_keys="[TapirAdminAudit.admin_user]", back_populates="tapir_users")
    tapir_admin_audit_: Mapped[List["TapirAdminAudit"]] = relationship("TapirAdminAudit", foreign_keys="[TapirAdminAudit.affected_user]", back_populates="tapir_users_")
    tapir_email_mailings: Mapped[List["TapirEmailMailing"]] = relationship("TapirEmailMailing", foreign_keys="[TapirEmailMailing.created_by]", back_populates="tapir_users")
    tapir_email_mailings_: Mapped[List["TapirEmailMailing"]] = relationship("TapirEmailMailing", foreign_keys="[TapirEmailMailing.sent_by]", back_populates="tapir_users_")
    tapir_permanent_tokens: Mapped[List["TapirPermanentToken"]] = relationship("TapirPermanentToken", back_populates="user")
    tapir_recovery_tokens_used: Mapped[List["TapirRecoveryTokensUsed"]] = relationship("TapirRecoveryTokensUsed", back_populates="user")
    endorsee_of: Mapped[List["Endorsement"]] = relationship("Endorsement", foreign_keys="[Endorsement.endorsee_id]", back_populates="endorsee")
    endorses: Mapped[List["Endorsement"]] = relationship("Endorsement", foreign_keys="[Endorsement.endorser_id]", back_populates="endorser")
    arXiv_ownership_requests: Mapped[List["OwnershipRequest"]] = relationship("OwnershipRequest", back_populates="user")
    arXiv_submission_category_proposal: Mapped[List["SubmissionCategoryProposal"]] = relationship("SubmissionCategoryProposal", back_populates="user")
    arXiv_submission_flag: Mapped[List["SubmissionFlag"]] = relationship("SubmissionFlag", back_populates="user")
    arXiv_submission_hold_reason: Mapped[List["SubmissionHoldReason"]] = relationship("SubmissionHoldReason", back_populates="user")
    arXiv_submission_locks: Mapped[List["SubmissionLocks"]] = relationship("SubmissionLocks", back_populates="user")
    arXiv_submission_view_flag: Mapped[List["SubmissionViewFlag"]] = relationship("SubmissionViewFlag", back_populates="user")
    arXiv_check_results: Mapped[List["CheckResults"]] = relationship("CheckResults", back_populates="user")
    arXiv_check_responses: Mapped[List["CheckResponses"]] = relationship("CheckResponses", back_populates="user")
    owned_papers: Mapped[List["PaperOwner"]] = relationship("PaperOwner", foreign_keys="[PaperOwner.user_id]", back_populates="owner")
    demographics = relationship("Demographic", foreign_keys="[Demographic.user_id]", uselist=False, back_populates="user")


class AuthorIds(Base):
    __tablename__ = "arXiv_author_ids"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True)
    author_id: Mapped[str] = mapped_column(String(50), nullable=False, index=True)
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class Demographic(Base):
    __tablename__ = "arXiv_demographics"
    __table_args__ = (ForeignKeyConstraint(["archive", "subject_class"], ["arXiv_categories.archive", "arXiv_categories.subject_class"]), {"mysql_charset": "latin1"})

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, server_default=FetchedValue())
    country: Mapped[str] = mapped_column(String(2), nullable=False, index=True, server_default=FetchedValue())
    affiliation: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    url: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    type: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    archive: Mapped[Optional[str]] = mapped_column(String(16))
    subject_class: Mapped[Optional[str]] = mapped_column(String(16))
    original_subject_classes: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())
    flag_group_physics: Mapped[Optional[int]] = mapped_column(Integer, index=True)
    flag_group_math: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_cs: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_nlin: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_proxy: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_journal: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_xml: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    dirty: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_group_test: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    flag_suspect: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_q_bio: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_q_fin: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_stat: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_eess: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    flag_group_econ: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=text("'0'"))
    veto_status: Mapped[Literal["ok", "no-endorse", "no-upload", "no-replace"]] = mapped_column(Enum("ok", "no-endorse", "no-upload", "no-replace"), nullable=False, server_default=text("'ok'"))

    arXiv_category: Mapped["Category"] = relationship(
        "Category", primaryjoin="and_(Demographic.archive == Category.archive, Demographic.subject_class == Category.subject_class)", back_populates="arXiv_demographics"
    )

    @property
    def groups(self) -> List[str]:
        """Active groups for this user profile."""
        return [group for group, column in self.GROUP_FLAGS if getattr(self, column) == 1]

    # the original user
    user = relationship("TapirUser", back_populates="demographics")

    GROUP_FLAGS = [
        ("grp_physics", "flag_group_physics"),
        ("grp_math", "flag_group_math"),
        ("grp_cs", "flag_group_cs"),
        ("grp_q-bio", "flag_group_q_bio"),
        ("grp_q-fin", "flag_group_q_fin"),
        ("grp_q-stat", "flag_group_stat"),
        ("grp_q-econ", "flag_group_econ"),
        ("grp_eess", "flag_group_eess"),
    ]


class OrcidIds(Base):
    __tablename__ = "arXiv_orcid_ids"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True)
    orcid: Mapped[str] = mapped_column(String(19), nullable=False, index=True)
    authenticated: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class QueueView(Base):
    __tablename__ = "arXiv_queue_view"
    __table_args__ = {"mysql_charset": "utf8mb3"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id", ondelete="CASCADE"), primary_key=True, server_default=FetchedValue())
    last_view: Mapped[Optional[datetime]] = mapped_column(DateTime)
    second_last_view: Mapped[Optional[datetime]] = mapped_column(DateTime)
    total_views: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())


class SuspiciousName(Base):
    __tablename__ = "arXiv_suspicious_names"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, server_default=FetchedValue())
    full_name: Mapped[str] = mapped_column(String(255), nullable=False, server_default=FetchedValue())


class SwordLicense(Base):
    __tablename__ = "arXiv_sword_licenses"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True)
    license: Mapped[Optional[str]] = mapped_column(String(127))
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=FetchedValue())


class TapirDemographic(Base):
    __tablename__ = "tapir_demographics"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, server_default=FetchedValue())
    gender: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    share_gender: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    birthday: Mapped[Optional[dt.date]] = mapped_column(Date, index=True)
    share_birthday: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    country: Mapped[str] = mapped_column(ForeignKey("tapir_countries.digraph"), nullable=False, index=True, server_default=FetchedValue())
    share_country: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    postal_code: Mapped[str] = mapped_column(String(16), nullable=False, index=True, server_default=FetchedValue())

    tapir_country: Mapped["TapirCountry"] = relationship("TapirCountry", primaryjoin="TapirDemographic.country == TapirCountry.digraph", back_populates="tapir_demographics")


class TapirUsersHot(Base):
    __tablename__ = "tapir_users_hot"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, server_default=FetchedValue())
    last_login: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    second_last_login: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())
    number_sessions: Mapped[int] = mapped_column(Integer, nullable=False, index=True, server_default=FetchedValue())


class TapirUsersPassword(Base):
    __tablename__ = "tapir_users_password"
    __table_args__ = {"mysql_charset": "latin1"}

    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), primary_key=True, server_default=FetchedValue())
    password_storage: Mapped[int] = mapped_column(Integer, nullable=False, server_default=FetchedValue())
    password_enc: Mapped[str] = mapped_column(String(50), nullable=False, server_default=FetchedValue())

    user = relationship("TapirUser")


class SubmissionLocks(Base):
    __tablename__ = "arXiv_submission_locks"
    __table_args__ = (Index("arxiv_submission_locks_sub_index", "submission_id", "lock_type", unique=True), {"mysql_charset": "latin1"})

    submission_lock_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id"), nullable=False)
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True)
    lock_type: Mapped[str] = mapped_column(String(20), nullable=False)
    expires: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    updated: Mapped[datetime] = mapped_column(DateTime, nullable=False)
    released: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))

    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_submission_locks")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_submission_locks")


########################################################################################################
# Student-lead membership dashboard - supercedes "Subscription_UniversalInstitution"
class MembershipInstitutions(Base):
    __tablename__ = "membership_institutions"
    __table_args__ = {"mysql_charset": "latin1"}

    sid: Mapped[int] = mapped_column(Integer, primary_key=True)
    is_active: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    name: Mapped[Optional[str]] = mapped_column(String(256), index=True)
    country: Mapped[Optional[str]] = mapped_column(String(40))
    country_code: Mapped[Optional[str]] = mapped_column(String(10))
    consortia_code: Mapped[Optional[str]] = mapped_column(String(20))
    member_type: Mapped[Optional[str]] = mapped_column(String(20))
    ror_id: Mapped[Optional[str]] = mapped_column(String(50))
    is_consortium: Mapped[Optional[int]] = mapped_column(Integer)
    label: Mapped[Optional[str]] = mapped_column(String(256))
    comment: Mapped[Optional[str]] = mapped_column(Text)


# Student-lead membership dashboard
class MembershipUsers(Base):
    __tablename__ = "membership_users"
    __table_args__ = {"mysql_charset": "latin1"}

    id: Mapped[int] = mapped_column(Integer, primary_key=True)
    sid: Mapped[int] = mapped_column(Integer, nullable=False)
    user_id: Mapped[Optional[int]] = mapped_column(Integer)


########################################################################################################
#
class DBLaTeXMLDocuments(LaTeXMLBase):
    __tablename__ = "arXiv_latexml_doc"

    paper_id: Mapped[str] = mapped_column(String(20), primary_key=True)
    document_version: Mapped[intpk]
    # conversion_status codes:
    #   - 0 = in progress
    #   - 1 = success
    #   - 2 = failure
    conversion_status: Mapped[int] = mapped_column(Integer, nullable=False)
    latexml_version: Mapped[str] = mapped_column(String(40), nullable=False)
    tex_checksum: Mapped[Optional[str]] = mapped_column(String(255))
    conversion_start_time: Mapped[Optional[int]] = mapped_column(Integer)
    conversion_end_time: Mapped[Optional[int]] = mapped_column(Integer)
    publish_dt: Mapped[Optional[datetime]] = mapped_column(DateTime(timezone=True))


class DBLaTeXMLSubmissions(LaTeXMLBase):
    __tablename__ = "arXiv_latexml_sub"

    submission_id: Mapped[intpk]
    # conversion_status codes:
    #   - 0 = in progress
    #   - 1 = success
    #   - 2 = failure
    conversion_status: Mapped[int] = mapped_column(Integer, nullable=False)
    latexml_version: Mapped[str] = mapped_column(String(40), nullable=False)
    tex_checksum: Mapped[Optional[str]] = mapped_column(String(255))
    conversion_start_time: Mapped[Optional[int]]
    conversion_end_time: Mapped[Optional[int]]


class DBLaTeXMLFeedback(LaTeXMLBase):
    __tablename__ = "feedback"

    id: Mapped[str] = mapped_column(String(40), primary_key=True)
    canonical_url: Mapped[Optional[str]] = mapped_column(String(255))
    conversion_url: Mapped[Optional[str]] = mapped_column(String(255))
    report_time: Mapped[Optional[int]] = mapped_column(BigInteger)
    browser_info: Mapped[Optional[str]] = mapped_column(String(255))
    location_low: Mapped[Optional[str]] = mapped_column(String(255))
    location_high: Mapped[Optional[str]] = mapped_column(String(255))
    description: Mapped[Optional[str]] = mapped_column(String(255))
    selected_html: Mapped[Optional[str]] = mapped_column(String(255))
    initiation_mode: Mapped[Optional[str]] = mapped_column(String(255))


# From modapi


class CheckRoles(Base):
    """swimlanes: editor, student, moderator, qa"""

    __tablename__ = "arXiv_check_roles"
    __table_args__ = {"mysql_charset": "latin1"}

    check_role_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(40), nullable=False)
    description: Mapped[Optional[str]] = mapped_column(String(200))

    def __repr__(self):
        return f"{ type(self).__name__ }/{ self.check_role_id }:{self.name}"


class CheckResultViews(Base):
    """A hint for how arxiv-check can parse and view check_results.data"""

    __tablename__ = "arXiv_check_result_views"
    __table_args__ = {"mysql_charset": "latin1"}

    check_result_view_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(40), nullable=False)
    description: Mapped[Optional[str]] = mapped_column(String(200))

    def __repr__(self):
        return f"{ type(self).__name__ }/{ self.check_result_view_id }:{self.name}"


class CheckTargets(Base):
    """Will the QA check need to respond to updates to the file or the
    database metadata."""

    __tablename__ = "arXiv_check_targets"
    __table_args__ = {"mysql_charset": "latin1"}

    check_target_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    name: Mapped[str] = mapped_column(String(40), nullable=False)
    description: Mapped[Optional[str]] = mapped_column(String(200))

    def __repr__(self):
        return f"{ type(self).__name__ }/{ self.check_target_id }:{self.name}"


class Checks(Base):
    __tablename__ = "arXiv_checks"
    __table_args__ = {"mysql_charset": "latin1"}

    check_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    check_target_id: Mapped[int] = mapped_column(ForeignKey("arXiv_check_targets.check_target_id"), nullable=False, index=True)
    # , ondelete='CASCADE', onupdate='CASCADE'
    check_role_id = Column(ForeignKey("arXiv_check_roles.check_role_id"), index=False)
    check_result_view_id: Mapped[int] = mapped_column(ForeignKey("arXiv_check_result_views.check_result_view_id"), nullable=False, index=True, server_default=text("'1'"))
    name: Mapped[str] = mapped_column(String(40), nullable=False)
    description: Mapped[Optional[str]] = mapped_column(String(200))
    enable_check: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    enable_hold: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    enable_queue: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    retry_minutes: Mapped[int] = mapped_column(SmallInteger, nullable=False, server_default=text("'0'"))
    optional: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'1'"))
    persist_response: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    target: Mapped["CheckTargets"] = relationship("CheckTargets")
    role: Mapped["CheckRoles"] = relationship("CheckRoles")

    view: Mapped["CheckResultViews"] = relationship("CheckResultViews")
    arXiv_check_results: Mapped[List["CheckResults"]] = relationship("CheckResults", back_populates="check")

    def __repr__(self):
        return f"{ type(self).__name__ }/{ self.check_id }:{self.name};{'enabled' if self.enable_check else ''}"


class CheckResults(Base):
    __tablename__ = "arXiv_check_results"
    __table_args__ = {"mysql_charset": "latin1"}

    check_result_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    submission_id: Mapped[int] = mapped_column(ForeignKey("arXiv_submissions.submission_id"), nullable=False, index=True)
    data_version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    metadata_version: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    check_id: Mapped[int] = mapped_column(ForeignKey("arXiv_checks.check_id"), nullable=False, index=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True)
    ok: Mapped[int] = mapped_column(Integer, nullable=False)
    created: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=func.now())
    message: Mapped[Optional[str]] = mapped_column(String(40))
    data: Mapped[Optional[str]] = mapped_column(String(2000))
    submission: Mapped["Submission"] = relationship("Submission", back_populates="arXiv_check_results")

    check: Mapped["Checks"] = relationship("Checks", back_populates="arXiv_check_results")
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_check_results")
    check_responses: Mapped[List["CheckResponses"]] = relationship("CheckResponses", back_populates="check_result")
    """ 
        select max(length(logtext)) from arXiv_admin_log; #65535
        select length(logtext), count(*) from arXiv_admin_log where length(logtext)>200 and username like 'qaadmin' group by length(logtext) order by length(logtext) desc limit 200
        mysql max varchar length: 65,535
    """

    def __repr__(self):
        return f"{ type(self).__name__ }/{ self.check_result_id };check={self.check_id};s/{ self.submission_id };d={self.data_version};m={self.metadata_version};ok={ self.ok}"


class CheckResponses(Base):
    __tablename__ = "arXiv_check_responses"
    __table_args__ = {"mysql_charset": "latin1"}

    check_response_id: Mapped[int] = mapped_column(Integer, primary_key=True)
    check_result_id: Mapped[int] = mapped_column(ForeignKey("arXiv_check_results.check_result_id"), nullable=False, index=True)
    user_id: Mapped[int] = mapped_column(ForeignKey("tapir_users.user_id"), nullable=False, index=True)
    ok: Mapped[int] = mapped_column(Integer, nullable=False)
    persist_response: Mapped[int] = mapped_column(Integer, nullable=False, server_default=text("'0'"))
    created: Mapped[datetime] = mapped_column(DateTime, nullable=False, server_default=func.now())
    message: Mapped[Optional[str]] = mapped_column(String(200))
    user: Mapped["TapirUser"] = relationship("TapirUser", back_populates="arXiv_check_responses")

    check_result: Mapped["CheckResults"] = relationship("CheckResults", back_populates="check_responses")
    """If the related CheckResults ok==0, admin/mods respond with decision on whether that qa hold should stand or be dismissed."""
    """This admin/mod decision is accepted for future check_results, if the submission is updated. """

    def __repr__(self):
        return f"{ type(self).__name__ }/{ self.check_response_id };result={self.check_result_id};ok={ self.ok}"


def configure_db_engine(classic_engine: Engine, latexml_engine: Optional[Engine]) -> Tuple[Engine, Optional[Engine]]:
    session_factory.configure(
        binds={
            Base: classic_engine,
            LaTeXMLBase: (latexml_engine if latexml_engine else classic_engine),
            t_arXiv_stats_hourly: classic_engine,
            t_arXiv_admin_state: classic_engine,
            t_arXiv_bad_pw: classic_engine,
            t_arXiv_black_email: classic_engine,
            t_arXiv_block_email: classic_engine,
            t_arXiv_bogus_subject_class: classic_engine,
            t_arXiv_duplicates: classic_engine,
            t_arXiv_in_category: classic_engine,
            t_arXiv_moderators: classic_engine,
            t_arXiv_ownership_requests_papers: classic_engine,
            t_arXiv_refresh_list: classic_engine,
            t_arXiv_updates_tmp: classic_engine,
            t_arXiv_white_email: classic_engine,
            t_arXiv_xml_notifications: classic_engine,
            t_demographics_backup: classic_engine,
            t_tapir_email_change_tokens_used: classic_engine,
            t_tapir_email_tokens_used: classic_engine,
            t_tapir_error_log: classic_engine,
            t_tapir_no_cookies: classic_engine,
            t_tapir_periodic_tasks_log: classic_engine,
            t_tapir_periodic_tasks_log: classic_engine,
            t_tapir_permanent_tokens_used: classic_engine,
            t_tapir_save_post_variables: classic_engine,
        }
    )
    return classic_engine, latexml_engine


# Configure the models from env vars at package load time
configure_db_engine(_classic_engine, _latexml_engine)
