"""Package to work with arxiv JWTs

The intent of this is to have much the JWT handling code in one place so the
shape of the JWT and how it is encoded is in one place. In NG the way a had the
code unnecessarily split over sever files making it difficult understand the
shape of the data in the JWT.

Does NOT handle `tapir_session` for that see :class:`arxiv.auth.legacy.cookies`.
"""

import os
from datetime import datetime
from typing import Annotated

import jwt
from domain import Session
from pydantic import BaseModel, Field, StringConstraints

from arxiv import is_in_flask_context

from .auth import exceptions

ALGORITHM = 'HS256'


def get_secret() -> str:
    if is_in_flask_context():
        from arxiv.base.globals import get_application_config
        if secret := get_application_config()['JWT_SECRET']:
            return secret

    return os.environ.get('JWT_SECRET') or ''


def _pack(secret: str, data: dict):
    return jwt.encode(data, secret, algorithm=ALGORITHM)


def _unpack(secret: str, token: str):
    try:
        return jwt.decode(secret, token, algorithms=[ALGORITHM])
    except jwt.exceptions.DecodeError as e:
        raise exceptions.InvalidToken('Not a valid token') from e


class JwtDataNGV1(BaseModel):
    """JWT data shape for NT JWT generated by arxiv.auth.auth.sessions.store.SessionStore
     and in use by arxiv.org/login as of around 2019."""
    session_id: Annotated[str, StringConstraines(max_length=36)]  # expects uuid4
    user_id: Annotated[int, Field(gt=0)]
    nonce: Annotated[str, StringConstraines(strip_whitespace=True, max_length=16)]
    expires: datetime

    @classmethod
    def pack(cls, secret: Optional[str], session: Session):
        """arxiv.auth.domain.Session"""
        return _pack(secret or get_secret(),
                     JwtDataNGV1(session_id=session.session_id,
                                 user_id=session.user.user_id,
                                 nonce=session.nonce,
                                 expires=session.end_time).dict())

    @classmethod
    def unpack(cls, secret: Optional[str], token: str) -> 'JwtDataNGV1':
        return JwtDataNGV1(**_unpack(secret or get_secret(), token))
